<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="48:SimpleAccelAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f18eef2bd00"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f18efa25640"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f18efa25640"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f18ef851590"/></to>
    </wire>
    <wire loc="51:SimpleAccelAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18eef280c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef1a1020"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ef1a1020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef19da70"/></to>
    </wire>
    <wire loc="54:SimpleAccelAppC.nc">
      <from><interface-ref name="SampleTimer" scoped="" ref="0x7f18eef0e020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18eee9d640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18eee9d640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee94610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:SimpleAccelAppC.nc">
      <from><interface-ref name="ActivityTimer" scoped="" ref="0x7f18eef12a30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18eed06450"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18eed06450"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee94610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:SimpleAccelAppC.nc">
      <from><interface-ref name="BluetoothInit" scoped="" ref="0x7f18eef2a3f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eecfa2a0"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18eecfa2a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eec723b0"/></to>
    </wire>
    <wire loc="60:SimpleAccelAppC.nc">
      <from><interface-ref name="BTStdControl" scoped="" ref="0x7f18eef08720"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f18eed00e00"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f18eed00e00"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f18eec729f0"/></to>
    </wire>
    <wire loc="61:SimpleAccelAppC.nc">
      <from><interface-ref name="Bluetooth" scoped="" ref="0x7f18eeeef380"/></from>
      <to><interface-ref name="Bluetooth" scoped="" ref="0x7f18eecfd600"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="Bluetooth" scoped="" ref="0x7f18eecfd600"/></from>
      <to><interface-ref name="Bluetooth" scoped="" ref="0x7f18eec712d0"/></to>
    </wire>
    <wire loc="64:SimpleAccelAppC.nc">
      <from><interface-ref name="AccelInit" scoped="" ref="0x7f18eef2aa90"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eea15120"/></to>
    </wire>
    <wire loc="44:../../../tos/platforms/shimmer2r/AccelC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18eea15120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eea12020"/></to>
    </wire>
    <wire loc="65:SimpleAccelAppC.nc">
      <from><interface-ref name="Accel" scoped="" ref="0x7f18eef05e60"/></from>
      <to><interface-ref name="Accel" scoped="" ref="0x7f18eea18960"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/AccelC.nc">
      <from><interface-ref name="Accel" scoped="" ref="0x7f18eea18960"/></from>
      <to><interface-ref name="Accel" scoped="" ref="0x7f18eea126d0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eee8c400"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eef3a020"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ee1cee50"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ef72f540"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eef68a60"/></to>
    </wire>
    <wire loc="68:SimpleAccelAppC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eea16960"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18eea16960"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ee9ff080"/></to>
    </wire>
    <wire loc="69:SimpleAccelAppC.nc">
      <from><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eef1d3c0"/></from>
      <to><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eea05020"/></to>
    </wire>
    <wire loc="44:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eea05020"/></from>
      <to><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eea034f0"/></to>
    </wire>
    <wire loc="70:SimpleAccelAppC.nc">
      <from><interface-ref name="DMA0" scoped="" ref="0x7f18eeecb600"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7f18ee952210"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel0" scoped="" ref="0x7f18ee952210"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7f18ee848020"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f18eef61a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f18eef91bf0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f18eef5e440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f18eef98020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f18eef98020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f18ee662560"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f18eef5d0c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f18eef98c30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f18eef98c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f18ef79e7e0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f18eef41be0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f18eef611a0"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f18ef851c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f18f01673a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f18f01673a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f18efabec30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f18ef8506c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18efa27b30"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18efa27b30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18efa22a80"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f18ef850dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f18efa161c0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f18efa17900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f18efa17900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ef9e8840"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f18efa168a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18efa218a0"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f18efa15020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ef1742e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18ef9e8840"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ef9cf3c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f18ef9dfde0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f18ef9cfa70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f18efd674c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f18ef9cecc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f18ef98ba50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8c96d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f18ef979410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8c1b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f18ef982d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8ce160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f18ef965020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8a8cb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f18ef987020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8cf480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f18ef96d570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8a8020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f18ef962020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef890cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f18ef974a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8a1220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f18ef992020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef91e9d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f18ef967020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8b72f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f18ef96f890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8b8610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f18ef9788c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8b9220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f18ef981c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8c77a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f18ef964020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef89f2f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f18ef976020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8b16d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f18ef987da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8c8ac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f18ef9947b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef92c540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f18ef96c3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8a0610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f18ef9915a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8d0020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f18ef972020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef89a6d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f18ef97cdc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8d7a90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f18ef966020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8af7a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f18ef988140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8d8de0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f18ef96e700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8b0ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f18ef963020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8987a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f18ef9755a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef8aab30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f18ef96b1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef899ac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f18ef968020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f18ef8bfcb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f18ef96a020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef890020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f18ef970a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f18ef8bf020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f18ef9715a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ef892b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f18ef92a450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef92bd80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f18ef92aaa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f18ef88ba90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f18ef929120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f18ef888260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8d6930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef92c540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8d3020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef92bd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8cd020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef92c540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8cc7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef92bd80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8c6610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef92c540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8c4c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef92bd80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f18ef9232f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f18ef923940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f18ef8889f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f18ef922020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f18ef887240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8beb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8bc2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8b6160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8b57a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8ae610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8adc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef8a7b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef8a52f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef89e160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef89d7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef897610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef896c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f18ef88fb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f18ef88d2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18efabdb70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f18efab62c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f18f01593b0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f18ef79e7e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f18ef735d60"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f18eef978b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f18ef79b470"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f18ef79b470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f18ef7366c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f18eef94020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f18ef799b20"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f18ef799b20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f18ef734a10"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f18ee6612d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f18ef7fbce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f18ee660020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f18ef79b470"/></to>
    </wire>
    <wire loc="54:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f18ef7fbce0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f18ef7af580"/></to>
    </wire>
    <wire loc="55:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f18ef7ae400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f18ef7a43f0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f18ef7a43f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f18ef78b300"/></to>
    </wire>
    <wire loc="56:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f18ef7ad060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f18ef79b470"/></to>
    </wire>
    <wire loc="57:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f18ef7ac720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f18ef79e7e0"/></to>
    </wire>
    <wire loc="169:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f18ef7ab480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f18ef7abc60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f18ef7a03b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f18ef72fb90"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f18ef72fb90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f18ef71dc40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f18ef79e1d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f18ef7360d0"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18ef72f540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ef71d5f0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ef7292b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef78c330"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f18ef7324a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f18ef72b790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f18ef731120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f18ef72cc60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f18ef724970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f18eefafa30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f18ef72b790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f18ef5ebde0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f18ef72cc60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f18ef5eb6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f18ef5eac20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f18ef724970"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ef715760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef7292b0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ef5e8920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef7292b0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ef5decc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef7292b0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f18ef5e9590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f18ef711530"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f18ef5e9e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f18ef716a40"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f18ef70c7e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f18ef5e4e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f18ef707780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f18ef5b80c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f18ef5b80c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f18eefc40c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f18ef5d6d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f18ef5b88d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f18ef5b88d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f18eefca440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f18ef6b46e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f18ef6ec4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f18ef6b8c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f18ef6b1a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f18ef5e6020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f18ef5e6800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f18ef5b6020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f18eefc9440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f18eefc9440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f18ef54ed00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f18eefca440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f18ef54f670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18eefc8020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18eefc4920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f18eefc3020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18eefcb020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f18eefcb020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18ef555c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f18eefcbc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ee5a4020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ee5a4020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ef1272c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18ef5481d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18eefc8020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ee597760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef54c8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f18ef54be50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18ee5a5340"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f18ee5a5340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18ef128020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f18ef544710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18ee59fc10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18ee59fc10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f18ef12b4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef54c8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef4b8dc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f18ef54ed00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f18ef4b6890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f18ef54f670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f18ef4b76d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f18ef555c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18ef4b8020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18ef4b43e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18ef5481d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f18ef4b55b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f18ef54be50"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f18ef4af5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f18ef544710"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f18ef4b4a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18ef4a5b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18ef4a5b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f18ef499360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f18ef4ae020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f18ef1c3d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f18ef1c3d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f18ef1bed90"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ef4ab120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef1a1020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f18ef49dbd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef494970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18ef49e6d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f18ef494020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f18ef459860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f18ef370cc0"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f18ef370cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2c2100"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f18ef463800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f18ef36ccc0"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f18ef36ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2bdd10"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f18ef457800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f18ef36acc0"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f18ef36acc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2b8740"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f18ef454800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f18ef364cc0"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f18ef364cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2afd10"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f18ef452800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f18ef366cc0"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f18ef366cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2b3100"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f18ef46abc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f18ef084940"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f18ef3cc810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef300740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f18ef3b7810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2d0100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f18ef36eca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2c2100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f18ef349cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef237740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f18ef3b3810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2c7740"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f18ef39f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef296460"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f18ef38b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef267d10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f18ef37a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef240100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f18ef355cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef254740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f18ef341cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef232100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f18ef3c6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2f2740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f18ef3c2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2e9d10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f18ef3ad810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2b8740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f18ef3999a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef288100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f18ef3849a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef259d10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f18ef3749a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef232100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f18ef3d0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef309100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f18ef3bc810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2dad80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f18ef3a7810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2aa740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f18ef34fcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef245740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f18ef343cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef232100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f18ef35ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef26b100"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f18ef3a3810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2a1e60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f18ef38f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef270740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f18ef37e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef24ad10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f18ef34dcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef240100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f18ef362cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef27a100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f18ef3ca810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2fb100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f18ef3b5810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2ccd10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f18ef3829a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef254740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f18ef3b1810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2c2100"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f18ef39d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef292e00"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f18ef3889a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef262740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f18ef3789a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef23cd10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f18ef35ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef270740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f18ef3d6800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef33ad10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f18ef3c0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2e3740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f18ef3ab810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2b3100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f18ef3979a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef284d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f18ef359cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2aa740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f18ef353cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef24e100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f18ef347cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef232100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f18ef3939a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef27a100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f18ef357cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2a5100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f18ef3ce810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef305d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f18ef3ba810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2d5740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f18ef3a5810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2a5100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f18ef360cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef275d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f18ef34bcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef23cd10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f18ef3a19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef29b9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f18ef38d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef26b100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f18ef37c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef245740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f18ef3c8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2f7d10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f18ef3809a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef24e100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f18ef3c4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2ed100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f18ef3af810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2bdd10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f18ef39b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef28d740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f18ef3869a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef25d100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f18ef3769a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef237740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f18ef3d2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef30f740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f18ef3be810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2de100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f18ef3a9810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2afd10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f18ef3959a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef27f740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f18ef368ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2b8740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f18ef351cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef24ad10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f18ef3919a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef275d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f18ef345cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef237740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f18ef33fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef259d10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f18ef3729f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f18ef2c7740"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f18ef1bed90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f18ef1b7e50"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ef1a5020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18ef1742e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ef19d470"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f18ef19a060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f18ef19eb10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f18ef19eb10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f18ef171020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f18ef199340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f18ef177e70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f18ef177e70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f18ef15db90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f18ef194660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f18ef1750f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f18ef1750f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f18ef158710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f18ef1602f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f18ef3a3810"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f18ef15cde0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f18ef39f9a0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f18ef156930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f18ef39d9a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f18ee59e440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef12a3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f18ee59ea50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f18ef08ed70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f18ef08ed70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f18ef084940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18ee5a3020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18ef4a5b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ee5a47c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef127ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef127ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef096400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef1268a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ee597760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ef1272c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ef097020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ef097020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ee1ca530"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f18ef12b4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f18ef124d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f18ef128020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18ef098210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f18ef098210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f18ee1cb740"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef12a3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef123710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef096400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ee1c9930"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef096cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef1268a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef111bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef096400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f18ef123d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18ef49e6d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f18ef1115e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f18ef49dbd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f18ef0977a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f18ee1cacb0"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ee1c7270"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef096cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f18ee1c7a30"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f18ee1cd4a0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f18ee1c5c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f18ef07b700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f18ef499360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f18ef076250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f18ef370cc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f18ef0741f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f18ef36acc0"/></to>
    </wire>
    <wire loc="114:../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f18eef57500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f18eef3a680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f18eef41be0"/></to>
    </wire>
    <wire loc="44:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f18eef34380"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f18efa25640"/></to>
    </wire>
    <wire loc="47:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f18eef34aa0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f18ef7a03b0"/></to>
    </wire>
    <wire loc="108:SimpleAccelC.nc">
      <from><interface-ref name="stopSensing" scoped="" ref="0x7f18eeebb020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:SimpleAccelC.nc">
      <from><interface-ref name="sendSensorData" scoped="" ref="0x7f18eeec25c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="102:SimpleAccelC.nc">
      <from><interface-ref name="startSensing" scoped="" ref="0x7f18eeebe820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee94610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee8b1d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee8b1d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18eed2e690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18eee8c400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18eeda9760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f18eee82a80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f18eed1fcf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18eeda9760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ee17cc80"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f18eed28c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f18eed7dcf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f18eed771d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f18eeda8020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f18eeda8020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f18ee174890"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f18eed14020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f18eee0b020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f18eee0b020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f18eee055f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f18ee17cc80"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f18ee15e660"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f18ee16d0a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f18ee17a570"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f18ee17a570"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f18ee15d020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f18ee171c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f18eee0b020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ee15a190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ee164340"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ee164340"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18ee158770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18ee163a80"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18ee163a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18ee157a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f18ee161da0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18ee161da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f18ef979410"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f18ef970a20"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f18ef9788c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f18ef96f890"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f18ef976020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f18ef96e700"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f18ef9755a0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f18ef96d570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f18ef974a50"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f18ef96c3e0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f18ef972020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f18ef96b1f0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f18ef9715a0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f18ef96a020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f18eede9950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f18ef1bed90"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f18eed73490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f18eed23e80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="UARTControl" scoped="" ref="0x7f18eec6e130"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18eeab2c80"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18eeab2c80"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f18eeaaa550"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="UARTData" scoped="" ref="0x7f18eec6ad70"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18eeaae860"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18eeaae860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f18eeaa5130"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="RTSInterrupt" scoped="" ref="0x7f18eec68020"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f18eeba6bc0"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f18eeba6bc0"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f18eeb93a30"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="ConnectionInterrupt" scoped="" ref="0x7f18eec67020"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f18eeb9ebc0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f18eeb9ebc0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f18eeb8abc0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18eec67df0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef1a1020"/></to>
    </wire>
    <wire loc="376:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <from><interface-ref name="runSetCommands" scoped="" ref="0x7f18eebffd60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="302:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <from><interface-ref name="runMasterCommands" scoped="" ref="0x7f18eec111e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <from><interface-ref name="sendNextChar" scoped="" ref="0x7f18eec52b80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f18eeba8bc0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f18eeb95a30"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f18eeba5bc0"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f18eeb92a30"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f18eeba3bc0"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f18eeb8fa30"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f18eebaac40"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f18eeb97a30"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f18eeba0bc0"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f18eeb8ca30"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f18eeba7bc0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f18eeb94a30"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f18eeb9dbc0"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f18eeb89bc0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f18eebafd20"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f18eeb9b9c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f18eeba2bc0"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f18eeb8ea30"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f18eeba9bc0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f18eeb96a30"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f18eeb9fc40"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f18eeb8bbc0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f18eeba4bc0"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f18eeb90a30"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f18eebacc80"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f18eeb98a30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f18eeba1bc0"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f18eeb8da30"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f18eeab2450"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f18eeaadbc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f18eeaa5a00"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f18ef360cc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f18eeaa3990"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f18ef35ecc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f18eeaa1990"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f18ef35ccc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f18eea9f990"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f18ef357cc0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f18eea9d990"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f18ef359cc0"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f18ee9d5b80"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f18ee98c3b0"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Msp430DmaControl" scoped="" ref="0x7f18ee9fb560"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ee98a860"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7f18ee98a860"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ee82c060"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Msp430DmaChannel" scoped="" ref="0x7f18ee9fbd70"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7f18ee952210"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f18ee9f99e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f18ef1a1020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel2" scoped="" ref="0x7f18ee950590"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7f18ee838d80"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel1" scoped="" ref="0x7f18ee951400"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7f18ee8407a0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7f18ee847020"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7f18ee928df0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel0" scoped="" ref="0x7f18ee928df0"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7f18ee893c90"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7f18ee83f7a0"/></from>
      <to><interface-ref name="Channel1" scoped="" ref="0x7f18ee925730"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel1" scoped="" ref="0x7f18ee925730"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7f18ee8899b0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7f18ee837db0"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7f18ee91f0c0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel2" scoped="" ref="0x7f18ee91f0c0"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7f18ee8803f0"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplControl" scoped="" ref="0x7f18ee82c970"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f18ee945bd0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7f18ee945bd0"/></from>
      <to><interface-ref name="DmaControl" scoped="" ref="0x7f18ee91a510"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel0" scoped="" ref="0x7f18ee82bd90"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7f18ee928df0"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel1" scoped="" ref="0x7f18ee826740"/></from>
      <to><interface-ref name="Channel1" scoped="" ref="0x7f18ee925730"/></to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel2" scoped="" ref="0x7f18ee8210d0"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7f18ee91f0c0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7f18ee88d610"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f18ee914710"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7f18ee8842f0"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f18ee914710"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7f18ee87cc50"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f18ee914710"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimpleAccelC" loc="43:SimpleAccelC.nc">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimpleAccelAppC.SampleTimer" loc="44(SimpleAccelAppC.SampleTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SimpleAccelAppC.ActivityTimer" loc="44(SimpleAccelAppC.ActivityTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RovingNetworksC" loc="45:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
        <short>&#10; </short>
        <long>&#10; @author Steve Ayer&#10; @author Adrian Burns&#10; @date February, 2007&#10;&#10; @author Mike Healy&#10; @date April 20, 2009 - ported to TinyOS 2.x &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RovingNetworksP" loc="47:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="36:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="73:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
        <short>&#10; Implementation of USART1 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART1 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-04 22:30:21 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AccelC" loc="36:../../../tos/platforms/shimmer2r/AccelC.nc">
      <configuration/>
    </component>
    <component qname="Mma7361P" loc="37:../../../tos/platforms/shimmer2r/Mma7361P.nc">
      <module/>
    </component>
    <component qname="shimmerAnalogSetupC" loc="35:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <configuration/>
    </component>
    <component qname="shimmerAnalogSetupP" loc="39:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430DmaC" loc="46:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <documentation loc="33:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
        <short>&#10; Implementation of the HAL level component for the MSP430 DMA module.</short>
        <long>&#10; Implementation of the HAL level component for the MSP430 DMA module.&#10; This configuration provides the available DMA channels through the&#10; MSP430DMA parameterized interface.  If more channels are requested&#10; than available through unique(&#34;DMA&#34;), there will be no mapping for&#10; that channel and compilation will fail.&#10;&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaC" loc="39:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <documentation loc="33:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaP" loc="41:../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma0" loc="42(HplMsp430DmaC.Dma0):../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:480">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:482">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:484">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:486">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:15">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma1" loc="42(HplMsp430DmaC.Dma1):../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:488">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:490">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:492">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:494">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:240">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma2" loc="42(HplMsp430DmaC.Dma2):../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:496">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:498">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:500">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:502">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3840">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:8">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel0P" loc="42(Msp430DmaC.Channel0P):../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel1P" loc="42(Msp430DmaC.Channel1P):../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel2P" loc="42(Msp430DmaC.Channel2P):../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaControlP" loc="42:../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f18ef95e890" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f18ef95ec30" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f18ef95d020" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f18ef95d3a0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f18ef95d720" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f18ef95da90" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f18ef95de20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f18ef95c200" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f18ef95c5d0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f18ef920e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f18ef91d270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f18efa28820" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f18ef8170d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f18ef7f40d0" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f18ef339190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f18ef339540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f18ef3398f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f18ef339ca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f18ef338060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f18ef1b8e60" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f18ef1b8e60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f18ef10c5b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f18ef0ff5b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f18ef0e6d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f18eef92490" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f18eef92490"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f18eef92810" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f18eee3e9c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f18eee3e9c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f18eee07ba0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f18eee07ba0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f18eee043b0" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f18eee043b0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f18eee047a0" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f18eee047a0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f18eee03020" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f18eee03020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f18eee033f0" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f18eee03bf0" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f18eee03bf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f18eede0020" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f18eede0020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f18eede07f0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f18eede07f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f18eede0be0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f18eede0be0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f18eeddf400" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f18eeddf400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f18eeddf7d0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18eeda14f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18eeda14f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18eed71d70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18eed71d70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f18eed6e0d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18eed1d1f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18eed1d1f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430DmaXP" loc="42:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="DMAxCTL_addr" ref="0x7f18ee9185e0" loc="42:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxSA_addr" ref="0x7f18ee918990" loc="43:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxDA_addr" ref="0x7f18ee918d40" loc="44:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxSZ_addr" ref="0x7f18ee8ff180" loc="45:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxTSEL_mask" ref="0x7f18ee8ff550" loc="46:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxTSEL_shift" ref="0x7f18ee8ff920" loc="47:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430DmaChannelP" loc="42:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc" abstract="">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f18efa24be0" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f18efa24be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa27020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f18efa25640" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f18efa25640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f18efa259c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18efa27b30" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18efa27b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa22020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f18efa168a0" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f18efa168a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa16c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18efa22a80" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18efa22a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa22e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f18efa161c0" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f18efa161c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa16540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f18efa15020" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f18efa15020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa153a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18efa218a0" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18efa218a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa21c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f18efa17900" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f18efa17900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efa17c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f18ef9dfde0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f18ef9dfde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f18ef9e4c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f18ef9e4310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f18ef9e44a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f18ef9e4630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f18ef9e4180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f18ef9e47c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f18ef9e4950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f18ef9e4ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ef9e8840" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ef9e8840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef9e8bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f18ef9cfa70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f18ef9cfa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f18ef9ce980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f18ef9ce020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f18ef9ce1b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f18ef9ce340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f18ef9cfdf0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f18ef9ce4d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f18ef9ce660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f18ef9ce7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f18ef9cecc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f18ef9cecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f18ef9cd0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ef9cf3c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ef9cf3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef9cf740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f18ef98ba50" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f18ef98ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef98bdd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef98a020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef98a1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef98a340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef98a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef98a660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef98a7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef98a980"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef98ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f18ef979410" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f18ef979410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef979790"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef979920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef979ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef979c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef979dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef978020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef9781b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef978340"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef9784d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f18ef982d10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f18ef982d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9810e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef981270"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef981400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef981590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef981720"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef9818b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f18ef965020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f18ef965020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9653a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef965530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9656c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef965850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9659e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef965b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f18ef987020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f18ef987020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9873a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef987530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef9876c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef987850"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef9879e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f18ef96d570" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f18ef96d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef96d8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96da80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96dc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96dda0"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f18ef962020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f18ef962020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9623a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef962530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9626c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef962850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9629e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef962b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f18ef974a50" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f18ef974a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef974dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef973020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef9731b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef973340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef9734d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef973660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef9737f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef973980"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef973b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f18ef992020" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f18ef992020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef9923a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef992530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef9926c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef992850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef9929e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef992b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef992d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef991020"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef9911b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f18ef967020" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f18ef967020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9673a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef967530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9676c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef967850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9679e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef967b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f18ef96f890" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f18ef96f890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef96fc10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96fda0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96e020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96e1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f18ef9788c0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f18ef9788c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef978d40"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef977020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef9771b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef977340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef9774d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef977660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef9777f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef977980"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef977b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f18ef981c70" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f18ef981c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef97b020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef97b1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef97b340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef97b4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef97b660"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef97b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f18ef964020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f18ef964020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9643a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef964530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9646c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef964850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9649e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef964b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f18ef976020" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f18ef976020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef9763a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef976530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef9766c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef976850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef9769e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef976b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef976d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef975020"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef9751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f18ef987da0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f18ef987da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef983180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef983310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef9834a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef983630"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef9837c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f18ef9947b0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f18ef9947b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef994b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef994cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef994e50"/>
        <function-ref name="get" scoped="" ref="0x7f18ef99c020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef99c1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef99c340"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef99c4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef99c660"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef99c7f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef99c980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef99cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f18ef96c3e0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f18ef96c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef96c760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96c8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96ca80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96cc10"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f18ef9915a0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f18ef9915a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef991920"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef991ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef991c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef991dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef98b020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef98b1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef98b340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef98b4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef98b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f18ef972020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f18ef972020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef9723a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef972530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef9726c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef972850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef9729e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef972b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef972d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef971020"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef9711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f18ef97cdc0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f18ef97cdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef982180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef982310"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9824a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef982630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9827c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef982950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f18ef966020" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f18ef966020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9663a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef966530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9666c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef966850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9669e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef966b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f18ef988140" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f18ef988140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9884c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef988650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef9887e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef988970"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef988b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f18ef96e700" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f18ef96e700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef96ea80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96ec10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96eda0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96d020"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f18ef963020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f18ef963020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9633a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef963530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9636c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef963850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9639e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef963b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f18ef9755a0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f18ef9755a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef975920"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef975ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef975c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef975dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef974020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef9741b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef974340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef9744d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef974660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f18ef97bb70" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f18ef97bb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef97a020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef97a1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef97a340"/>
        <function-ref name="get" scoped="" ref="0x7f18ef97a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef97a660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef97a7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef97a980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef97ab10"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef97aca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef97ae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef979020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f18ef96b1f0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f18ef96b1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef96b570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96b700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96b890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96ba20"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96bbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f18ef968020" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f18ef968020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef9683a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef968530"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef9686c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef968850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef9689e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef968b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f18ef96a020" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f18ef96a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef96a5a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96a730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96a8c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96aa50"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96abe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f18ef970a20" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f18ef970a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef970da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef96f020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef96f1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef96f340"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef96f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f18ef9715a0" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f18ef9715a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef971920"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef971ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef971c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef971dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef970020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef9701b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef970340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef9704d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef970660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f18ef92aaa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f18ef92aaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef92ae20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f18ef92a450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f18ef92a450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef92a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f18ef929120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f18ef929120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef9294a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f18ef92bd80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef92bd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef92a180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f18ef92c540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef92c540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef92c8c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef92ca50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef92cbe0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef92cd70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef92b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef92b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef92b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef92b4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef92b660"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef92b7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef92b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f18ef923940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f18ef923940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef923cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f18ef9232f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f18ef9232f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef923670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f18ef922020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f18ef922020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef9223a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f18ef924bf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef924bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef923020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f18ef9253e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef9253e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef925760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef9258f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef925a80"/>
        <function-ref name="get" scoped="" ref="0x7f18ef925c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef925da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef924020"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef9241b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef924340"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef9244d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef924660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef9247f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8d7a90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8d7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8d7e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8d6020"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8d61b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8d6340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8d64d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8d6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef91e9d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef91e9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef91ed50"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8d8020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8d81b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8d8340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8d84d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8d8660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8d87f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8d8980"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8d8b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8d3020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8d3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8d33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8d8de0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8d8de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8d7180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8d7310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8d74a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8d7630"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8d77c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8d6930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8d6930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8d6cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8d6e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8d4020"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8d41b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8d4340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8d44d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8d4660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8d47f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8d4980"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8d4b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8d4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8ce160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8ce160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8ce4e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8ce670"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8ce800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8ce990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8ceb20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8cecb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8d0020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8d0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8d03a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8d0530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8d06c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8d0850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8d09e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8d0b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8d0d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8cf020"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8cf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8cc7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8cc7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8ccb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8cf480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8cf480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8cf800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8cf990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8cfb20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8cfcb0"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8cfe40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8cd020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8cd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8cd3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8cd530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8cd6c0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8cd850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8cd9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8cdb70"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8cdd00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8cc020"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8cc1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8cc340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8cc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8c77a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8c77a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8c7b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8c7cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8c7e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8c6020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8c61b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8c6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8c96d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8c96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8c9a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8c9be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8c9d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8c8020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8c81b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8c8340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8c84d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8c8660"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8c87f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8c4c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8c4c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8c3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8c8ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8c8ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8c8e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8c7020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8c71b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8c7340"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8c74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8c6610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8c6610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8c6990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8c6b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8c6cb0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8c6e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8c4020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8c41b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8c4340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8c44d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8c4660"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8c47f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8c4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8bfcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8bfcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8be0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8be230"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8be3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8be550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8be6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8be870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8c1b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8c1b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8c0020"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8c01b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8c0340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8c04d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8c0660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8c07f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8c0980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8c0b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8c0ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8bc2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8bc2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8bc670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8bf020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8bf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8bf3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8bf530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8bf6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8bf850"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8bf9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8beb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8beb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8bd020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8bd1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8bd340"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8bd4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8bd660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8bd7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8bd980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8bdb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8bdca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8bde30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8bc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8b72f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8b72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8b7670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8b7800"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8b7990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8b7b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8b7cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8b7e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8b9220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8b9220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8b95a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8b9730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8b98c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8b9a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8b9be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8b9d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8b8020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8b81b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8b8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8b57a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8b57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8b5b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8b8610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8b8610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8b8990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8b8b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8b8cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8b8e40"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8b7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8b6160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8b6160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8b64e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8b6670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8b6800"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8b6990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8b6b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8b6cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8b6e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8b5020"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8b51b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8b5340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8b54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8af7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8af7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8afb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8afcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8afe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8ae020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8ae1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8ae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8b16d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8b16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8b1a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8b1be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8b1d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8b0020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8b01b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8b0340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8b04d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8b0660"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8b07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8adc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8adc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8ac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8b0ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8b0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8b0e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8af020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8af1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8af340"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8af4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8ae610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8ae610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8ae990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8aeb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8aecb0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8aee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8ad020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8ad1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8ad340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8ad4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8ad660"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8ad7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8ad980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8a8cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8a8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8a70a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef8a7230"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef8a73c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8a7550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8a76e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef8a7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8aab30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8aab30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8a9020"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8a91b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8a9340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8a94d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8a9660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8a97f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8a9980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8a9b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8a9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef8a52f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef8a52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8a5670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8a8020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8a8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8a83a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8a8530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8a86c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8a8850"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8a89e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef8a7b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef8a7b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef8a6020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef8a61b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8a6340"/>
        <function-ref name="get" scoped="" ref="0x7f18ef8a64d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8a6660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8a67f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef8a6980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8a6b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef8a6ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8a6e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef8a5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef89f2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef89f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef89f670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef89f800"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef89f990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef89fb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef89fcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef89fe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef8a1220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef8a1220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef8a15a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8a1730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef8a18c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8a1a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8a1be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8a1d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8a0020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef8a01b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8a0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef89d7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef89d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef89db20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef8a0610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef8a0610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8a0990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef8a0b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8a0cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef8a0e40"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef89f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef89e160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef89e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef89e4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef89e670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef89e800"/>
        <function-ref name="get" scoped="" ref="0x7f18ef89e990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef89eb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef89ecb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef89ee40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef89d020"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef89d1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef89d340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef89d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef8987a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef8987a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef898b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef898cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef898e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef897020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8971b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef897340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef89a6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef89a6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef89aa50"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef89abe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef89ad70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef899020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef8991b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef899340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef8994d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef899660"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef8997f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef896c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef896c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef895020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef899ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef899ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef899e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef898020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8981b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef898340"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8984d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef897610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef897610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef897990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef897b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef897cb0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef897e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef896020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef8961b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef896340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef8964d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef896660"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef8967f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef896980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f18ef890cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f18ef890cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef88f0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f18ef88f230"/>
        <function-ref name="captured" scoped="" ref="0x7f18ef88f3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef88f550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef88f6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f18ef88f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ef892b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ef892b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ef891020"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ef8911b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef891340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ef8914d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ef891660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef8917f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ef891980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ef891b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ef891ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f18ef88d2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f18ef88d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef88d670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f18ef890020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f18ef890020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ef8903a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ef890530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ef8906c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ef890850"/>
        <function-ref name="fired" scoped="" ref="0x7f18ef8909e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f18ef88fb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18ef88fb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef88e020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef88e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef88e340"/>
        <function-ref name="get" scoped="" ref="0x7f18ef88e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef88e660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef88e7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef88e980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef88eb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef88eca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef88ee30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef88d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f18ef887240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f18ef887240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8875c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f18ef88ba90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f18ef88ba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef88be10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f18ef888260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f18ef888260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef8885e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f18ef8889f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f18ef8889f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef888d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f18efd674c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f18efd674c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f18efd67840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f18f01593b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f18f01593b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f18f0159730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f18f01598c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f18f0159a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f18eff41bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f18eff41bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f18f00fe020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f18ef850dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f18ef850dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef84f180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f18ef851590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f18ef851590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f18ef851910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f18ef8506c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f18ef8506c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef850a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f18ef851c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f18ef851c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef850020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f18ef8501b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f18ef850340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f18f01d6410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f18f01d6410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18f01d6790"/>
        <function-ref name="runTask" scoped="" ref="0x7f18f01d6920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f18f01673a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f18f01673a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18f0167720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f18f01678b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f18f0167a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f18efabdb70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f18efabdb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18efabc020"/>
        <function-ref name="runTask" scoped="" ref="0x7f18efabc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f18efab62c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f18efab62c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f18efab6640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f18efab67d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f18efab6960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f18efabec30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f18efabec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18efabd020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f18efabd1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f18efabd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f18eef98020" loc="49:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f18eef98020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18eef983a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18eef98530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18eef986c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f18eef98850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18eef989e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f18eef98c30" loc="50:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f18eef98c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eef97020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f18eef971b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18eef97340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18eef974d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f18eef97660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f18eef978b0" loc="51:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f18eef978b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f18eef97c30"/>
        <function-ref name="source" scoped="" ref="0x7f18eef97dc0"/>
        <function-ref name="address" scoped="" ref="0x7f18eef95020"/>
        <function-ref name="destination" scoped="" ref="0x7f18eef951b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f18eef95340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f18eef954d0"/>
        <function-ref name="type" scoped="" ref="0x7f18eef95660"/>
        <function-ref name="setType" scoped="" ref="0x7f18eef957f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f18eef95980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f18eef95b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f18eef95ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f18eef94020" loc="52:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f18eef94020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f18eef943a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f18eef94530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f18eef946c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f18ee662560" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f18ee662560"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ee6628e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ee662a70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ee662c00"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ee662d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ee661020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f18ee6612d0" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f18ee6612d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ee661650"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ee6617e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ee661970"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ee661b00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ee661c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f18ee660020" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f18ee660020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f18ee6603a0"/>
        <function-ref name="source" scoped="" ref="0x7f18ee660530"/>
        <function-ref name="address" scoped="" ref="0x7f18ee6606c0"/>
        <function-ref name="destination" scoped="" ref="0x7f18ee660850"/>
        <function-ref name="setSource" scoped="" ref="0x7f18ee6609e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f18ee660b70"/>
        <function-ref name="type" scoped="" ref="0x7f18ee660d00"/>
        <function-ref name="setType" scoped="" ref="0x7f18ee65f020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f18ee65f1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f18ee65f340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f18ee65f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f18ef7fbce0" loc="44:../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f18ef7fbce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef7f80a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7f8230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef7f83c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef7f8550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef7f86e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f18ef7ae400" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f18ef7ae400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef7ae7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7ae930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef7aeac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef7aec50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef7aede0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f18ef7af580" loc="46:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f18ef7af580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef7af920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7afab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef7afc40"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef7afdd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef7ae020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f18ef7ac720" loc="50:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f18ef7ac720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef7acaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f18ef7acc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7acdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef7ab020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f18ef7ab1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f18ef7ab480" loc="169:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f18ef7ab480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef7ab800"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef7ab990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f18ef7abc60" loc="126:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f18ef7abc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef7a9020"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef7a91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f18ef7ad060" loc="49:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f18ef7ad060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f18ef7ad3e0"/>
        <function-ref name="source" scoped="" ref="0x7f18ef7ad570"/>
        <function-ref name="address" scoped="" ref="0x7f18ef7ad700"/>
        <function-ref name="destination" scoped="" ref="0x7f18ef7ad890"/>
        <function-ref name="setSource" scoped="" ref="0x7f18ef7ada20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f18ef7adbb0"/>
        <function-ref name="type" scoped="" ref="0x7f18ef7add40"/>
        <function-ref name="setType" scoped="" ref="0x7f18ef7ac020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f18ef7ac1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f18ef7ac340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f18ef7ac4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f18ef7a03b0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f18ef7a03b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f18ef7a0730"/>
        <function-ref name="stopDone" scoped="" ref="0x7f18ef7a08c0"/>
        <function-ref name="start" scoped="" ref="0x7f18ef7a0a50"/>
        <function-ref name="stop" scoped="" ref="0x7f18ef7a0be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f18ef7a43f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f18ef7a43f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef7a4770"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7a4900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef7a4a90"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef7a4c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef7a4db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f18ef79e7e0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f18ef79e7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef79eb60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f18ef79ecf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef79ee80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef79b030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f18ef79b1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f18ef79e1d0" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f18ef79e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f18ef79e550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef78c330" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef78c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef78c6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef78c840"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef78c9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef78cb60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef78ccf0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef78ce80"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef797030"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef797670"/>
        <function-ref name="set" scoped="" ref="0x7f18ef7971c0"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef797350"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef7974e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f18ef799b20" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f18ef799b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f18ef798020"/>
        <function-ref name="noAck" scoped="" ref="0x7f18ef7981b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f18ef798340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f18ef79b470" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f18ef79b470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f18ef79b7f0"/>
        <function-ref name="source" scoped="" ref="0x7f18ef79b980"/>
        <function-ref name="address" scoped="" ref="0x7f18ef79bb10"/>
        <function-ref name="destination" scoped="" ref="0x7f18ef79bca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f18ef79be30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f18ef799020"/>
        <function-ref name="type" scoped="" ref="0x7f18ef7991b0"/>
        <function-ref name="setType" scoped="" ref="0x7f18ef799340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f18ef7994d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f18ef799660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f18ef7997f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f18ef7324a0" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f18ef7324a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef732820"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7329b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef732b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef732cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef732e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f18ef731120" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f18ef731120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f18ef7314a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f18ef78b300" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f18ef78b300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef78b6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef78b830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef78b9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef78bb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef78bce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f18ef735d60" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f18ef735d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef734180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f18ef734310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef7344a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef734630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f18ef7347c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f18ef7360d0" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f18ef7360d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f18ef736470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f18ef734a10" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f18ef734a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f18ef734d90"/>
        <function-ref name="noAck" scoped="" ref="0x7f18ef732020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f18ef7321b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f18ef7366c0" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f18ef7366c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f18ef736a40"/>
        <function-ref name="source" scoped="" ref="0x7f18ef736bd0"/>
        <function-ref name="address" scoped="" ref="0x7f18ef736d60"/>
        <function-ref name="destination" scoped="" ref="0x7f18ef735020"/>
        <function-ref name="setSource" scoped="" ref="0x7f18ef7351b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f18ef735340"/>
        <function-ref name="type" scoped="" ref="0x7f18ef7354d0"/>
        <function-ref name="setType" scoped="" ref="0x7f18ef735660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f18ef7357f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f18ef735980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f18ef735b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f18ef72fb90" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f18ef72fb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f18ef72c020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f18ef72c1b0"/>
        <function-ref name="start" scoped="" ref="0x7f18ef72c340"/>
        <function-ref name="stop" scoped="" ref="0x7f18ef72c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f18ef72b790" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f18ef72b790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f18efa3e0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef72bb10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef72bca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef72be30"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef72a020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef72a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ef72f540" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ef72f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef72f8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f18ef72cc60" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f18ef72cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f18efa3e0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f18ef72b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef7292b0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef7292b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef729630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef7297c0"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef729950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef729ae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef729c70"/>
        <function-ref name="get" scoped="" ref="0x7f18ef729e00"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef728020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef728660"/>
        <function-ref name="set" scoped="" ref="0x7f18ef7281b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef728340"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef7284d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f18ef724970" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f18ef724970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f18efa3e0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f18ef724cf0"/>
        <function-ref name="offset" scoped="" ref="0x7f18ef724e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f18ef729030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f18ef71dc40" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f18ef71dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f18ef71c020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f18ef71c1b0"/>
        <function-ref name="start" scoped="" ref="0x7f18ef71c340"/>
        <function-ref name="stop" scoped="" ref="0x7f18ef71c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f18ef6b46e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f18ef6b46e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef6b4a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef6b4bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f18ef707780" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f18ef707780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18ef707b00"/>
        <function-ref name="stop" scoped="" ref="0x7f18ef707c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f18ef6ec4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f18ef6ec4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef6ec870"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef6eca00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ef71d5f0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ef71d5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef71d970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f18ef705360" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f18ef705360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f18ef7056e0"/>
        <function-ref name="flush" scoped="" ref="0x7f18ef705870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f18ef6b8c70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f18ef6b8c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef6b7020"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef6b71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f18ef70c7e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f18ef70c7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f18ef70cb60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f18ef70ccf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f18ef70ce80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f18ef715030"/>
        <function-ref name="putData" scoped="" ref="0x7f18ef7151c0"/>
        <function-ref name="putDone" scoped="" ref="0x7f18ef715350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f18ef7154e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef715760" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef715760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef715ae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef715c70"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef715e00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef710020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef7101b0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef710340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef7104d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef710b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef710660"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef7107f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef710980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f18ef6b1a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f18ef6b1a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef6b1d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef6b0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f18ef716a40" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f18ef716a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f18ef716dc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f18ef71b020"/>
        <function-ref name="startSend" scoped="" ref="0x7f18ef71b1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f18ef71b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f18ef711530" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f18ef711530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f18ef7118b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f18ef711a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7f18ef711bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f18ef5e6020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f18ef5e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef5e63a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef5e6530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f18ef5ebde0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f18ef5ebde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f18efa3e0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef5ea1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18ef5ea350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18ef5ea4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f18ef5ea670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef5ea800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f18ef5e6800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f18ef5e6800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ef5e6b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ef5e6d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f18ef5eb6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f18ef5eb6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f18efa3e0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f18ef5eba60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f18ef5eac20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f18ef5eac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f18efa3e0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f18ef5e9020"/>
        <function-ref name="offset" scoped="" ref="0x7f18ef5e91b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f18ef5e9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef5e8920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef5e8920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef5e8ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef5e8e30"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef5e7020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef5e71b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef5e7340"/>
        <function-ref name="get" scoped="" ref="0x7f18ef5e74d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef5e7660"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef5e7ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef5e7980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef5e77f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef5e7b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f18ef5e9e80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f18ef5e9e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f18ef5e8220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f18ef5e83b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f18ef5e8540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f18ef5e86d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f18ef5e9590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f18ef5e9590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f18ef5e9910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f18ef5e9aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f18ef5e9c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f18ef5d6d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f18ef5d6d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef5de0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f18ef5de270"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef5de400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f18ef5de590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f18ef5de720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f18ef5de8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef5dea40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f18ef5e4e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f18ef5e4e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f18ef5e11c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f18ef5e1350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f18ef5e14e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f18ef5e1670"/>
        <function-ref name="putData" scoped="" ref="0x7f18ef5e1800"/>
        <function-ref name="putDone" scoped="" ref="0x7f18ef5e1990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f18ef5e1b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef5decc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef5decc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef5dd0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef5dd230"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef5dd3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef5dd550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef5dd6e0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef5dd870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef5dda00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef5d31b0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef5ddb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef5ddd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef5d3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f18ef5b6020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f18ef5b6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef5b63a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f18ef5b6530"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef5b66c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f18ef5b6850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f18ef5b88d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f18ef5b88d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef5b8c50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f18ef5b8de0"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef5b7020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f18ef5b71b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f18ef5b7340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f18ef5b74d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef5b7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f18ef5b80c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f18ef5b80c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18ef5b8440"/>
        <function-ref name="stop" scoped="" ref="0x7f18ef5b85d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f18eefcbc70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f18eefcbc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f18eefca020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18eefca1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f18eefc9440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f18eefc9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18eefc97c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f18eefc9950"/>
        <function-ref name="receive" scoped="" ref="0x7f18eefc9ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f18eefc9c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f18eefc8020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18eefc8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f18eefc83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f18eefca440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f18eefca440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18eefca7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f18eefca950"/>
        <function-ref name="receive" scoped="" ref="0x7f18eefcaae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f18eefcac70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f18eefcae00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f18eefc9020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18eefc91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18eefcb020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18eefcb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18eefcb3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18eefcb530"/>
        <function-ref name="request" scoped="" ref="0x7f18eefcb6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f18eefcb850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18eefcb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f18ef54c8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef54c8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f18ef54cc60"/>
        <function-ref name="configure" scoped="" ref="0x7f18ef54cdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f18ef54ed00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f18ef54ed00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef54b0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f18ef54b230"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef54b3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f18ef54b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f18ef5481d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18ef5481d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f18ef548550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f18ef54f670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f18ef54f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef54f9f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f18ef54fb80"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef54fd10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f18ef54e020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f18ef54e1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f18ef54e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef54e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f18ef54be50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f18ef54be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef549210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ef5493a0"/>
        <function-ref name="request" scoped="" ref="0x7f18ef549530"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef5496c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef549850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18ef555c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18ef555c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef5510a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ef551230"/>
        <function-ref name="request" scoped="" ref="0x7f18ef5513c0"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef551550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef5516e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f18ef544710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f18ef544710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef544a90"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef544c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f18ef4b8dc0" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef4b8dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f18ef4b7180"/>
        <function-ref name="configure" scoped="" ref="0x7f18ef4b7310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f18ef4b6890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f18ef4b6890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef4b6c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f18ef4b6dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef4b5020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f18ef4b51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f18ef4b43e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18ef4b43e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f18ef4b4780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f18ef4b4a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f18ef4b4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18ef4b4dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18ef4b3020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18ef4b31b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18ef4b3340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18ef4b34d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18ef4b3660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18ef4b37f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18ef4b3980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18ef4b3b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18ef4b3ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18ef4b3e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18ef4b2020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18ef4b21b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18ef4b2440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18ef4b25d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18ef4b2760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18ef4b28f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f18ef4b2a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18ef4b2c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18ef4b2da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18ef4b1020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18ef4b11b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18ef4b1340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18ef4b14d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef4b1660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18ef4b19f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18ef4b1b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18ef4b1d10"/>
        <function-ref name="tx" scoped="" ref="0x7f18ef4b0020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18ef4b01b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18ef4b0340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18ef4b04d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18ef4b0660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18ef4b07f0"/>
        <function-ref name="rx" scoped="" ref="0x7f18ef4b0980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18ef4b0b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18ef4b0ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18ef4b0e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18ef4af020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18ef4af1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f18ef4b76d0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f18ef4b76d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18ef4b7a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f18ef4b7c00"/>
        <function-ref name="receive" scoped="" ref="0x7f18ef4b7d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f18ef4b6020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f18ef4b61b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f18ef4b6340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18ef4b64d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f18ef4ae020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18ef4ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18ef4aee30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef4ad800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef4ad340"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef4adcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f18ef4b55b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f18ef4b55b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef4b5950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ef4b5ae0"/>
        <function-ref name="request" scoped="" ref="0x7f18ef4b5c70"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef4b5e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef4b4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18ef4b8020" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18ef4b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef4b83c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ef4b8550"/>
        <function-ref name="request" scoped="" ref="0x7f18ef4b86e0"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef4b8870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef4b8a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f18ef4af5b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f18ef4af5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef4af950"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef4afae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef4ab120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef4ab120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef4ab4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef4ab630"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef4ab7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef4ab950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef4abae0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef4abc70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef4abe00"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef4aa4d0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef4aa1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef4aa020"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef4aa340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f18ef49dbd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f18ef49dbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef49c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f18ef49e6d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18ef49e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef49ea50"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef49ebe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f18ef4a5b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18ef4a5b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18ef4a2020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18ef4a21b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18ef4a2340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18ef4a24d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18ef4a2660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18ef4a27f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18ef4a2980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18ef4a2b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18ef4a2ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18ef4a2e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18ef4a1020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18ef4a11b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18ef4a1340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18ef4a15d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18ef4a1760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18ef4a18f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18ef4a1a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f18ef4a1c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18ef4a1da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18ef4a0020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18ef4a01b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18ef4a0340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18ef4a04d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18ef4a0660"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef4a07f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18ef4a0b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18ef4a0d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18ef49f020"/>
        <function-ref name="tx" scoped="" ref="0x7f18ef49f1b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18ef49f340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18ef49f4d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18ef49f660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18ef49f7f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18ef49f980"/>
        <function-ref name="rx" scoped="" ref="0x7f18ef49fb10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18ef49fca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18ef49fe30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18ef49e020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18ef49e1b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18ef49e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f18ef457800" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f18ef457800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef457b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef457d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef455020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef4551b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef455340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef4554d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef455660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef4557f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef455980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef455b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef455ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef455e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef454020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef4542b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef454440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f18ef494020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f18ef494020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef4943a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef494530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f18ef454800" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f18ef454800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef454b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef454d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef453020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef4531b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef453340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef4534d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef453660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef4537f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef453980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef453b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef453ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef453e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef452020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef4522b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef452440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f18ef452800" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f18ef452800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef452b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef452d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef451020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef4511b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef451340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef4514d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef451660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef4517f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef451980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef451b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef451ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef451e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef450020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef4502b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef450440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f18ef499360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f18ef499360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18ef4996e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18ef499870"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18ef499a00"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18ef499b90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18ef499d20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18ef498020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18ef4981b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18ef498340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18ef4984d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18ef498660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18ef4987f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18ef498980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18ef498b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18ef498da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18ef497020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18ef4971b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18ef497340"/>
        <function-ref name="isUart" scoped="" ref="0x7f18ef4974d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18ef497660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18ef4977f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18ef497980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18ef497b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18ef497ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18ef497e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef496020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18ef4963b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18ef496540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18ef4966d0"/>
        <function-ref name="tx" scoped="" ref="0x7f18ef496860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18ef4969f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18ef496b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18ef496d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18ef495020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18ef4951b0"/>
        <function-ref name="rx" scoped="" ref="0x7f18ef495340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18ef4954d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18ef495660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18ef4957f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18ef495980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18ef495b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ef450700" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef450700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef450a80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef450c10"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef450da0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef44f020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef44f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef44f340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef44f4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef44fb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef44f660"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef44f7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef44f980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f18ef46abc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f18ef46abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f18ef492020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f18ef4921b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f18ef492340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f18ef4924d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f18ef492660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f18ef4927f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f18ef492980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f18ef492b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef492ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f18ef492e30"/>
        <function-ref name="getData" scoped="" ref="0x7f18ef491020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f18ef4911b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f18ef491340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f18ef4915d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f18ef491760"/>
        <function-ref name="getIV" scoped="" ref="0x7f18ef4918f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f18ef491a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f18ef491c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f18ef491da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f18ef469020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f18ef4691b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f18ef469340"/>
        <function-ref name="isI2C" scoped="" ref="0x7f18ef4694d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f18ef469660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f18ef4697f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f18ef469b80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f18ef469d10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f18ef468020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f18ef4681b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f18ef468340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f18ef4684d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f18ef468660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f18ef4687f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f18ef468980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f18ef468b10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f18ef468ca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f18ef468e30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f18ef467020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f18ef4671b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f18ef467340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f18ef4674d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f18ef467660"/>
        <function-ref name="setData" scoped="" ref="0x7f18ef4677f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f18ef467980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f18ef467b10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f18ef467ca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f18ef467e30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f18ef466020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f18ef4661b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f18ef466740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f18ef4668d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f18ef466a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f18ef466bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f18ef466d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f18ef465020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f18ef4651b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f18ef465340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f18ef4654d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f18ef465660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f18ef463800" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f18ef463800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef463b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef463d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef458020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef4581b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef458340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef4584d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef458660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef4587f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef458980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef458b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef458ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef458e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef457020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef4572b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef457440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f18ef494970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef494970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef494cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f18ef459860" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f18ef459860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef459be0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef459d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef464020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef4641b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef464340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef4644d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef464660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef4647f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef464980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef464b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef464ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef464e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef463020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef4632b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef463440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f18ef3cc810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f18ef3cc810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3ccb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3ccd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3cb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3cb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3cb340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3cb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3cb660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3cb7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3cb980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3cbb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3cbca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3cbe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3ca020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3ca2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3ca440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f18ef3b7810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f18ef3b7810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3b7b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3b7d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3b6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3b61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3b6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3b64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3b6660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3b67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3b6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3b6b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3b6ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3b6e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3b5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3b52b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3b5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f18ef36eca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f18ef36eca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef36d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef36d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef36d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef36d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef36d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef36d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef36da00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef36db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef36dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef36c020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef36c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef36c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef36c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef36c760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef36c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f18ef349cb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f18ef349cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3480a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef348230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3483c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef348550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3486e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef348870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef348a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef348b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef348d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef347020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3471b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef347340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3474d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef347760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3478f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f18ef36ccc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f18ef36ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef36b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef36b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef36b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef36b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef36b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef36b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef36ba00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef36bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef36bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef36a020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef36a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef36a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef36a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef36a760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef36a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f18ef3b3810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f18ef3b3810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3b3b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3b3d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3b2020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3b21b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3b2340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3b24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3b2660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3b27f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3b2980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3b2b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3b2ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3b2e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3b1020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3b12b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3b1440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f18ef39f9a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f18ef39f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef39fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef39e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef39e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef39e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef39e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef39e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef39e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef39e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef39eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef39eca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef39ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef39d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef39d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef39d440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef39d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f18ef38b9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f18ef38b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef38bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef389020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3891b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef389340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3894d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef389660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3897f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef389980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef389b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef389ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef389e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef388020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3881b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef388440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3885d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f18ef37a9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f18ef37a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef37ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef379020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3791b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef379340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3794d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef379660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3797f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef379980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef379b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef379ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef379e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef378020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3781b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef378440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3785d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f18ef366cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f18ef366cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3650a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef365230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3653c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef365550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3656e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef365870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef365a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef365b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef365d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef364020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3641b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef364340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3644d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef364760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3648f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f18ef355cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f18ef355cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3540a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef354230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3543c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef354550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3546e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef354870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef354a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef354b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef354d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef353020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3531b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef353340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3534d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef353760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3538f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f18ef341cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f18ef341cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3400a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef340230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3403c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef340550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3406e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef340870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef340a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef340b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef340d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef33f020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef33f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef33f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef33f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef33f760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef33f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f18ef3c6810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f18ef3c6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3c6b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3c6d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3c5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3c51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3c5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3c54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3c5660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3c57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3c5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3c5b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3c5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3c5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3c4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3c42b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3c4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f18ef364cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f18ef364cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3630a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef363230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3633c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef363550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3636e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef363870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef363a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef363b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef363d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef362020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3621b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef362340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3624d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef362760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3628f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f18ef3c2810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f18ef3c2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3c2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3c2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3c1020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3c11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3c1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3c14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3c1660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3c17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3c1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3c1b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3c1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3c1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3c0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3c02b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3c0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f18ef3ad810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f18ef3ad810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3adb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3add20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3ac020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3ac1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3ac340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3ac4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3ac660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3ac7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3ac980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3acb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3acca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3ace30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3ab020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3ab2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3ab440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f18ef3999a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f18ef3999a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef399d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef398020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3981b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef398340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3984d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef398660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3987f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef398980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef398b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef398ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef398e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef397020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3971b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef397440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3975d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f18ef3849a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f18ef3849a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef384d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef383020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3831b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef383340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3834d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef383660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3837f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef383980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef383b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef383ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef383e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef382020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3821b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef382440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3825d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f18ef3749a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f18ef3749a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef374d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef373020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3731b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef373340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3734d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef373660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3737f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef373980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef373b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef373ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef373e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef372020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3721b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef372440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3725d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f18ef3d0810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f18ef3d0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3d0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3d0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3cf020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3cf1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3cf340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3cf4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3cf660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3cf7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3cf980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3cfb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3cfca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3cfe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3ce020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3ce2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3ce440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f18ef3bc810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f18ef3bc810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3bcc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3bce20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3bb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3bb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3bb340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3bb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3bb660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3bb7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3bb980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3bbb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3bbca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3bbe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3ba020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3ba2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3ba440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f18ef3a7810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f18ef3a7810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3a7b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3a7d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3a6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3a61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3a6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3a64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3a6660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3a67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3a6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3a6b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3a6ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3a6e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3a5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3a52b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3a5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f18ef370cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f18ef370cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef36f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef36f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef36f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef36f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef36f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef36f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef36fa00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef36fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef36fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef36e020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef36e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef36e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef36e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef36e760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef36e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f18ef34fcb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f18ef34fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef34e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef34e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef34e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef34e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef34e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef34e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef34ea00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef34eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef34ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef34d020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef34d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef34d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef34d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef34d760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef34d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f18ef343cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f18ef343cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3420a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef342230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3423c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef342550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3426e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef342870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef342a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef342b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef342d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef341020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3411b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef341340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3414d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef341760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3418f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f18ef35ccc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f18ef35ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef35a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef35a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef35a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef35a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef35a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef35a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef35aa00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef35ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef35ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef359020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3591b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef359340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3594d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef359760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3598f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f18ef3a3810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f18ef3a3810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3a3d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3a2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3a21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3a2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3a24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3a2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3a27f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3a2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3a2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3a2ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3a2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3a1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3a11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3a1440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3a15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f18ef38f9a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f18ef38f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef38fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef38e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef38e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef38e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef38e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef38e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef38e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef38e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef38eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef38eca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef38ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef38d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef38d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef38d440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef38d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f18ef37e9a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f18ef37e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef37ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef37d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef37d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef37d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef37d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef37d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef37d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef37d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef37db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef37dca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef37de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef37c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef37c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef37c440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef37c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f18ef34dcb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f18ef34dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef34c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef34c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef34c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef34c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef34c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef34c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef34ca00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef34cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef34cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef34b020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef34b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef34b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef34b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef34b760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef34b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f18ef362cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f18ef362cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3610a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef361230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3613c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef361550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3616e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef361870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef361a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef361b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef361d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef360020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3601b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef360340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3604d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef360760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3608f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f18ef3ca810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f18ef3ca810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3cab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3cad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3c9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3c91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3c9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3c94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3c9660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3c97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3c9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3c9b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3c9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3c9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3c8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3c82b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3c8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f18ef3b5810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f18ef3b5810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3b5b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3b5d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3b4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3b41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3b4340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3b44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3b4660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3b47f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3b4980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3b4b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3b4ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3b4e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3b3020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3b32b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3b3440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f18ef3829a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f18ef3829a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef382d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef381020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3811b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef381340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3814d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef381660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3817f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef381980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef381b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef381ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef381e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef380020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3801b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef380440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3805d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f18ef3b1810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f18ef3b1810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3b1b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3b1d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3b0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3b01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3b0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3b04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3b0660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3b07f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3b0980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3b0b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3b0ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3b0e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3af020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3af2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3af440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f18ef39d9a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f18ef39d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef39dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef39c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef39c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef39c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef39c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef39c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef39c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef39c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef39cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef39cca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef39ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef39b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef39b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef39b440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef39b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f18ef3889a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f18ef3889a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef388d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef387020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3871b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef387340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3874d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef387660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3877f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef387980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef387b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef387ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef387e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef386020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3861b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef386440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3865d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f18ef3789a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f18ef3789a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef378d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef377020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3771b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef377340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3774d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef377660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3777f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef377980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef377b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef377ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef377e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef376020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3761b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef376440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3765d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f18ef35ecc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f18ef35ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef35d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef35d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef35d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef35d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef35d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef35d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef35da00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef35db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef35dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef35c020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef35c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef35c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef35c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef35c760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef35c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f18ef3d6800" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f18ef3d6800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3d6b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3d6d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3d3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3d31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3d3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3d34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3d3660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3d37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3d3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3d3b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3d3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3d3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3d2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3d22b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3d2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f18ef3c0810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f18ef3c0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3c0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3c0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3bf020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3bf1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3bf340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3bf4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3bf660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3bf7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3bf980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3bfb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3bfca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3bfe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3be020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3be2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3be440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f18ef3ab810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f18ef3ab810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3abb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3abd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3aa020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3aa1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3aa340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3aa4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3aa660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3aa7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3aa980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3aab10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3aaca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3aae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3a9020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3a92b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3a9440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f18ef3979a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f18ef3979a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef397d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef396020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3961b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef396340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3964d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef396660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3967f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef396980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef396b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef396ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef396e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef395020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3951b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef395440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3955d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f18ef359cc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f18ef359cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3580a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef358230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3583c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef358550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3586e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef358870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef358a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef358b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef358d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef357020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3571b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef357340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3574d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef357760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3578f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f18ef353cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f18ef353cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3520a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef352230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3523c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef352550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3526e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef352870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef352a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef352b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef352d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef351020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3511b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef351340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3514d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef351760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3518f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f18ef347cb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f18ef347cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3460a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef346230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3463c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef346550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3466e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef346870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef346a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef346b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef346d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef345020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3451b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef345340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3454d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef345760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3458f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f18ef3939a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f18ef3939a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef393d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef392020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3921b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef392340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3924d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef392660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3927f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef392980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef392b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef392ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef392e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef391020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3911b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef391440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3915d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f18ef357cc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f18ef357cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3560a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef356230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3563c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef356550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3566e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef356870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef356a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef356b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef356d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef355020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3551b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef355340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3554d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef355760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3558f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f18ef3ce810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f18ef3ce810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3ceb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3ced20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3cd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3cd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3cd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3cd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3cd660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3cd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3cd980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3cdb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3cdca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3cde30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3cc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3cc2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3cc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f18ef3ba810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f18ef3ba810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3bab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3bad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3b8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3b81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3b8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3b84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3b8660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3b87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3b8980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3b8b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3b8ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3b8e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3b7020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3b72b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3b7440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f18ef3a5810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f18ef3a5810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3a5b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3a5d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3a4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3a41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3a4340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3a44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3a4660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3a47f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3a4980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3a4b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3a4ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3a4e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3a3020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3a32b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3a3440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f18ef360cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f18ef360cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef35f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef35f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef35f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef35f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef35f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef35f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef35fa00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef35fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef35fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef35e020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef35e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef35e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef35e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef35e760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef35e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f18ef34bcb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f18ef34bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef34a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef34a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef34a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef34a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef34a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef34a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef34aa00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef34ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef34ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef349020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3491b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef349340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3494d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef349760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3498f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f18ef3a19a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f18ef3a19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3a1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3a0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3a01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3a0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3a04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3a0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3a07f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3a0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3a0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3a0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3a0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef39f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef39f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef39f440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef39f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f18ef38d9a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f18ef38d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef38dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef38c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef38c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef38c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef38c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef38c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef38c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef38c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef38cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef38cca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef38ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef38b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef38b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef38b440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef38b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f18ef37c9a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f18ef37c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef37cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef37b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef37b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef37b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef37b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef37b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef37b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef37b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef37bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef37bca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef37be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef37a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef37a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef37a440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef37a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f18ef3c8810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f18ef3c8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3c8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3c8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3c7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3c71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3c7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3c74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3c7660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3c77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3c7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3c7b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3c7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3c7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3c6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3c62b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3c6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f18ef3809a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f18ef3809a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef380d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef37f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef37f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef37f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef37f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef37f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef37f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef37f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef37fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef37fca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef37fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef37e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef37e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef37e440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef37e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f18ef3c4810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f18ef3c4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3c4b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3c4d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3c3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3c31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3c3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3c34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3c3660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3c37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3c3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3c3b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3c3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3c3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3c2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3c22b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3c2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f18ef3af810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f18ef3af810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3afb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3afd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3ae020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3ae1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3ae340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3ae4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3ae660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3ae7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3ae980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3aeb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3aeca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3aee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3ad020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3ad2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3ad440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f18ef39b9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f18ef39b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef39bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef39a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef39a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef39a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef39a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef39a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef39a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef39a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef39ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef39aca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef39ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef399020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3991b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef399440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3995d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f18ef3869a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f18ef3869a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef386d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef385020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3851b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef385340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3854d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef385660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3857f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef385980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef385b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef385ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef385e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef384020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3841b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef384440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3845d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f18ef3769a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f18ef3769a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef376d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef375020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3751b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef375340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3754d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef375660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3757f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef375980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef375b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef375ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef375e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef374020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3741b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef374440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3745d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f18ef3d2810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f18ef3d2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3d2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3d2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3d1020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3d11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3d1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3d14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3d1660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3d17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3d1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3d1b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3d1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3d1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3d0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3d02b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3d0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f18ef3be810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f18ef3be810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3beb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3bed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3bd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3bd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3bd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3bd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3bd660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3bd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3bd980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3bdb10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3bdca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3bde30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3bc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3bc2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3bc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f18ef3a9810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f18ef3a9810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3a9b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef3a9d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3a8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef3a81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3a8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3a84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3a8660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef3a87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3a8980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef3a8b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3a8ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef3a8e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3a7020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef3a72b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3a7440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f18ef3959a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f18ef3959a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef395d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef394020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3941b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef394340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3944d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef394660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3947f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef394980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef394b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef394ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef394e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef393020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3931b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef393440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3935d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f18ef368ca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f18ef368ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3670a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef367230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3673c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef367550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3676e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef367870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef367a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef367b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef367d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef366020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3661b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef366340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3664d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef366760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3668f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f18ef351cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f18ef351cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3500a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef350230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3503c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef350550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3506e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef350870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef350a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef350b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef350d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef34f020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef34f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef34f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef34f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef34f760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef34f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f18ef36acc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f18ef36acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3690a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef369230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3693c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef369550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3696e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef369870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef369a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef369b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef369d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef368020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3681b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef368340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3684d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef368760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3688f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f18ef3919a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f18ef3919a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef391d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef390020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3901b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef390340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3904d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef390660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef3907f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef390980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef390b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef390ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef390e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef38f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef38f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef38f440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef38f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f18ef345cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f18ef345cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3440a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef344230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3443c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef344550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef3446e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef344870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef344a00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef344b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef344d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef343020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3431b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef343340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3434d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef343760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3438f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f18ef33fcc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f18ef33fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef33e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef33e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef33e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef33e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef33e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef33e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef33ea00"/>
        <function-ref name="get" scoped="" ref="0x7f18ef33eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef33ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef33d020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef33d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef33d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef33d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef33d760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef33d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f18ef3729f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f18ef3729f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3711c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef371350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3714e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef371670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef371800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef371990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef371b20"/>
        <function-ref name="get" scoped="" ref="0x7f18ef371cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef371e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef370020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3701b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef370340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3704d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef370760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3708f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef33ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef33ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3130e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef313270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef313400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef313590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef313720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3138b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef313a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef313bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef313d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef312020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3121b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef312340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3124d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef312760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3128f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef30f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef30f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef30fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef30fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef30fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef30e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef30e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef30e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef30e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef30e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef30e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef30e980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef30eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef30eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef30ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef30d120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef30d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef309100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef309100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef309480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef309610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef3097a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef309930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef309ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef309c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef309de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef308020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef3081b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef308340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3084d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef308660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3087f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef308a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef308c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef305d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef305d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef3040e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef304270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef304400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef304590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef304720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef3048b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef304a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef304bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef304d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef303020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef3031b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef303340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef3034d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef303760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef3038f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef300740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef300740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef300ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef300c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef300de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2ff020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2ff1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2ff340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2ff4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2ff660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2ff7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2ff980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2ffb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2ffca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2ffe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2fe120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2fe2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2fb100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2fb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2fb480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2fb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2fb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2fb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2fbac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2fbc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2fbde0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2fa020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2fa1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2fa340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2fa4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2fa660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2fa7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2faa80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2fac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2f7d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2f7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2f60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2f6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2f6400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2f6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2f6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2f68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2f6a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2f6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2f6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2f5020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2f51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2f5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2f54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2f5760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2f58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2f2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2f2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2f2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2f2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2f2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2f1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2f11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2f1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2f14d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2f1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2f17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2f1980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2f1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2f1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2f1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2f0120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2f02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2ed100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2ed100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2ed480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2ed610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2ed7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2ed930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2edac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2edc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2edde0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2ec020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2ec1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2ec340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2ec4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2ec660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2ec7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2eca80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2ecc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2e9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2e9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2e70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2e7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2e7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2e7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2e7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2e78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2e7a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2e7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2e7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2e6020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2e61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2e6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2e64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2e6760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2e68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2e3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2e3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2e3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2e3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2e3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2e2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2e21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2e2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2e24d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2e2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2e27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2e2980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2e2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2e2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2e2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2e1120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2e12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2de100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2de100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2de480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2de610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2de7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2de930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2deac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2dec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2dede0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2dd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2dd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2dd340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2dd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2dd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2dd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2dda80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2ddc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2dad80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2dad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2d9180"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2d9310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2d94a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2d9630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2d97c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2d9950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2d9ae0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2d9c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2d9e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2d8020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2d81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2d8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2d84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2d8760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2d88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2d5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2d5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2d5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2d5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2d5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2d4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2d41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2d4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2d44d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2d4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2d47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2d4980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2d4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2d4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2d4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2d3120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2d32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2d0100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2d0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2d0480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2d0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2d07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2d0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2d0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2d0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2d0de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2cf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2cf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2cf340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2cf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2cf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2cf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2cfa80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2cfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2ccd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2ccd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2cb0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2cb270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2cb400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2cb590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2cb720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2cb8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2cba40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2cbbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2cbd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2ca020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2ca1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2ca340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2ca4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2ca760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2ca8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2c7740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2c7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2c7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2c7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2c7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2c6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2c61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2c6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2c64d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2c6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2c67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2c6980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2c6b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2c6ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2c6e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2c5120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2c52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2c2100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2c2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2c2480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2c2610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2c27a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2c2930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2c2ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2c2c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2c2de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2c0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2c01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2c0340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2c04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2c0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2c07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2c0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2c0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2bdd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2bdd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2bc0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2bc270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2bc400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2bc590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2bc720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2bc8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2bca40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2bcbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2bcd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2bb020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2bb1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2bb340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2bb4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2bb760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2bb8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2b8740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2b8740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2b8ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2b8c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2b8de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2b7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2b71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2b7340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2b74d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2b7660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2b77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2b7980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2b7b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2b7ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2b7e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2b6120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2b62b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2b3100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2b3100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2b3480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2b3610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2b37a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2b3930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2b3ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2b3c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2b3de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2b2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2b21b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2b2340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2b24d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2b2660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2b27f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2b2a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2b2c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2afd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2afd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2ae0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2ae270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2ae400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2ae590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2ae720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2ae8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2aea40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2aebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2aed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2ad020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2ad1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2ad340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2ad4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2ad760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2ad8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2aa740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2aa740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2aaac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2aac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2aade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2a9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2a91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2a9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2a94d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2a9660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2a97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2a9980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2a9b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2a9ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2a9e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2a8120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2a82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2a5100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2a5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2a5480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2a5610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2a57a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2a5930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2a5ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2a5c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2a5de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2a4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2a41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef2a4340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2a44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef2a4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2a47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef2a4a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2a4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef2a1e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef2a1e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2a0210"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef2a03a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2a0530"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef2a06c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2a0850"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2a09e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2a0b70"/>
        <function-ref name="get" scoped="" ref="0x7f18ef2a0d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef29f020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef29f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef29f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef29f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef29f660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef29f8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef29fa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef29b9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef29b9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef29bd70"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef29a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef29a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef29a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef29a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef29a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef29a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef29a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef29ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef29aca0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef29ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef299020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2991b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef299440"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2995d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef296460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef296460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2967e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef296970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef296b00"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef296c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef296e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef295020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2951b0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef295340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2954d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef295660"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2957f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef295980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef295b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef295da0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef294020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef292e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef292e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2911c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef291350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2914e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef291670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef291800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef291990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef291b20"/>
        <function-ref name="get" scoped="" ref="0x7f18ef291cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef291e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef290020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2901b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef290340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2904d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef290760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2908f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef28d740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef28d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef28dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef28dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef28dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef28c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef28c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef28c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef28c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef28c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef28c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef28c980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef28cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef28cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef28ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef28b120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef28b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef288100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef288100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef288480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef288610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2887a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef288930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef288ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef288c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef288de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef287020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2871b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef287340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2874d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef287660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2877f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef287a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef287c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef284d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef284d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2830e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef283270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef283400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef283590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef283720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2838b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef283a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef283bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef283d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef282020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2821b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef282340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2824d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef282760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2828f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef27f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef27f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef27fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef27fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef27fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef27e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef27e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef27e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef27e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef27e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef27e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef27e980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef27eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef27eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef27ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef27d120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef27d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef27a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef27a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef27a480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef27a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef27a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef27a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef27aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef27ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef27ade0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef278020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2781b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef278340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2784d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef278660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2787f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef278a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef278c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef275d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef275d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2740e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef274270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef274400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef274590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef274720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2748b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef274a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef274bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef274d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef273020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2731b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef273340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2734d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef273760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2738f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef270740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef270740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef270ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef270c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef270de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef26f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef26f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef26f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef26f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef26f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef26f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef26f980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef26fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef26fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef26fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef26e120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef26e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef26b100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef26b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef26b480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef26b610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef26b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef26b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef26bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef26bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef26bde0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef26a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef26a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef26a340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef26a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef26a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef26a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef26aa80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef26ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef267d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef267d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2660e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef266270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef266400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef266590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef266720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2668b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef266a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef266bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef266d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef265020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2651b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef265340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2654d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef265760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2658f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef262740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef262740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef262ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef262c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef262de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef261020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2611b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef261340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2614d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef261660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2617f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef261980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef261b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef261ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef261e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef260120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2602b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef25d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef25d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef25d480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef25d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef25d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef25d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef25dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef25dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef25dde0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef25c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef25c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef25c340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef25c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef25c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef25c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef25ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef25cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef259d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef259d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2580e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef258270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef258400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef258590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef258720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2588b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef258a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef258bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef258d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef257020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2571b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef257340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2574d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef257760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2578f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef254740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef254740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef254ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef254c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef254de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef252020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2521b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef252340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2524d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef252660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2527f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef252980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef252b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef252ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef252e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef251120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2512b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef24e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef24e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef24e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef24e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef24e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef24e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef24eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef24ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef24ede0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef24d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef24d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef24d340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef24d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef24d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef24d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef24da80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef24dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef24ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef24ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef2490e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef249270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef249400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef249590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef249720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef2498b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef249a40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef249bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef249d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef248020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2481b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef248340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2484d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef248760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2488f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef245740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef245740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef245ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef245c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef245de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef244020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2441b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef244340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2444d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef244660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2447f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef244980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef244b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef244ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef244e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef243120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2432b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef240100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef240100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef240480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef240610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2407a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef240930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef240ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef240c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef240de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef23f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef23f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef23f340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef23f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef23f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef23f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef23fa80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef23fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef23cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef23cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef23b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef23b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef23b400"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef23b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef23b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef23b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef23ba40"/>
        <function-ref name="get" scoped="" ref="0x7f18ef23bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef23bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef23a020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef23a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef23a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef23a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef23a760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef23a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef237740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef237740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef237ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef237c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef237de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef236020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef2361b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef236340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef2364d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef236660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2367f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef236980"/>
        <function-ref name="set" scoped="" ref="0x7f18ef236b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef236ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef236e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef235120"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef2352b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f18ef232100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f18ef232100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef232480"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef232610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef2327a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef232930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef232ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef232c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef232de0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef231020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef2311b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef231340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef2314d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef231660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef2317f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef231a80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef231c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f18ef1c3d20" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18ef1c3d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18ef1c0b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef1bf550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef1bf090"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef1bfa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f18ef1bed90" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f18ef1bed90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18ef1bbbc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef1b9590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef1b90d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef1b9a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f18ef1a5020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ef1a5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ef1a53a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef1a5530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ef1a56c0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef1a5850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ef1a59e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef1a5b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef1a5d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef1a4020"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef1a41b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ef1a4340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ef1a44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f18ef1b7e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18ef1b7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18ef1b6ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ef1a7670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ef1a71b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ef1a7b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f18ef1a1020" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef1a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef1a13a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef1a1530"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef1a16c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef1a1850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef1a19e0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef1a1b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef1a1d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef1a04d0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef1a0020"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef1a01b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef1a0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f18ef19a060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f18ef19a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef19a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef19a570"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef19a700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef19a890"/>
        <function-ref name="get" scoped="" ref="0x7f18ef19aa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef19abb0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef19ad40"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef199020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ef19d470" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ef19d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef19d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f18ef199340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f18ef199340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef1996c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef199850"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef1999e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef199b70"/>
        <function-ref name="get" scoped="" ref="0x7f18ef199d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef194020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef1941b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef194340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f18ef19da70" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ef19da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ef19ddf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ef19c020"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ef19c1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ef19c340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ef19c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef19c660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ef19c7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ef19ce30"/>
        <function-ref name="set" scoped="" ref="0x7f18ef19c980"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ef19cb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ef19cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f18ef194660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f18ef194660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef1949e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef194b70"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef194d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef193020"/>
        <function-ref name="get" scoped="" ref="0x7f18ef1931b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef193340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef1934d0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef193660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f18ef19eb10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f18ef19eb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef177020"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef1771b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef177340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef1774d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef177660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef1777f0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef177980"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef177b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f18ef177e70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f18ef177e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef176220"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef1763b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef176540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef1766d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef176860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef1769f0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef176b80"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef176d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f18ef1742e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ef1742e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ef174660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f18ef1750f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f18ef1750f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef175470"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef175600"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef175790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef175920"/>
        <function-ref name="get" scoped="" ref="0x7f18ef175ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef175c40"/>
        <function-ref name="set" scoped="" ref="0x7f18ef175dd0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef174020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f18ef1602f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f18ef1602f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef160670"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef160800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef160990"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef160b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef160cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef160e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef15f020"/>
        <function-ref name="get" scoped="" ref="0x7f18ef15f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef15f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef15f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef15f660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef15f7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef15f980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef15fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef15fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f18ef171020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f18ef171020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef1713a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef171530"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef1716c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef171850"/>
        <function-ref name="get" scoped="" ref="0x7f18ef1719e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef171b70"/>
        <function-ref name="set" scoped="" ref="0x7f18ef171d00"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef160020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f18ef15cde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f18ef15cde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef15b180"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef15b310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef15b4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef15b630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef15b7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef15b950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef15bae0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef15bc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef15be00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef15a020"/>
        <function-ref name="set" scoped="" ref="0x7f18ef15a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef15a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef15a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef15a760"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef15a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f18ef15db90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f18ef15db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef15c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef15c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef15c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef15c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ef15c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef15c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef15c980"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef15cb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f18ef156930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f18ef156930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef156cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef156e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef155020"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef1551b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef155340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef1554d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef155660"/>
        <function-ref name="get" scoped="" ref="0x7f18ef1557f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef155980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef155b10"/>
        <function-ref name="set" scoped="" ref="0x7f18ef155ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef155e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef154020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef1542b0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef154440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f18ef158710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f18ef158710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef158a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef158c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef158db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef156020"/>
        <function-ref name="get" scoped="" ref="0x7f18ef1561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef156340"/>
        <function-ref name="set" scoped="" ref="0x7f18ef1564d0"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef156660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f18ee5a4020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ee5a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f18ee5a43a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18ee5a4530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f18ee59e440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f18ee59e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ee59e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f18ee597760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ee597760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f18ee597ae0"/>
        <function-ref name="configure" scoped="" ref="0x7f18ee597c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f18ee59ea50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f18ee59ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f18ee59edd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f18ee59d020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f18ee59d1b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f18ee59d340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f18ee59d4d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f18ee59d660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f18ee59d7f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f18ee59d980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ee59db10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f18ee59dca0"/>
        <function-ref name="getData" scoped="" ref="0x7f18ee59de30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f18ee59c020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f18ee59c1b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f18ee59c440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f18ee59c5d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f18ee59c760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f18ee59c8f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f18ee59ca80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f18ee59cc10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f18ee59cda0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f18ee59b020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f18ee59b1b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f18ee59b340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f18ee59b4d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f18ee59b660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f18ee59b9f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f18ee59bb80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f18ee59bd10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f18ee59a020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f18ee59a1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f18ee59a340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f18ee59a4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f18ee59a660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f18ee59a7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f18ee59a980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f18ee59ab10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f18ee59aca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f18ee59ae30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f18ee599020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f18ee5991b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f18ee599340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f18ee5994d0"/>
        <function-ref name="setData" scoped="" ref="0x7f18ee599660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f18ee5997f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f18ee599980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f18ee599b10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f18ee599ca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f18ee599e30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f18ee598020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f18ee5985b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f18ee598740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f18ee5988d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f18ee598a60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f18ee598bf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f18ee598d80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f18ee597020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f18ee5971b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f18ee597340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f18ee5974d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f18ee59fc10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18ee59fc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ee59e020"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ee59e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18ee5a5340" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18ee5a5340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ee5a56c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ee5a5850"/>
        <function-ref name="request" scoped="" ref="0x7f18ee5a59e0"/>
        <function-ref name="granted" scoped="" ref="0x7f18ee5a5b70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ee5a5d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f18ee5a3020" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18ee5a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18ee5a33a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18ee5a3530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18ee5a36c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18ee5a3850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18ee5a39e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18ee5a3b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18ee5a3d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18ee5a2020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18ee5a21b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18ee5a2340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18ee5a24d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18ee5a2660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18ee5a27f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18ee5a2a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18ee5a2c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18ee5a2da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18ee5a1020"/>
        <function-ref name="isUart" scoped="" ref="0x7f18ee5a11b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18ee5a1340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18ee5a14d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18ee5a1660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18ee5a17f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18ee5a1980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18ee5a1b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ee5a1ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18ee5a0220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18ee5a03b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18ee5a0540"/>
        <function-ref name="tx" scoped="" ref="0x7f18ee5a06d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18ee5a0860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18ee5a09f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18ee5a0b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18ee5a0d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18ee59f020"/>
        <function-ref name="rx" scoped="" ref="0x7f18ee59f1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18ee59f340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18ee59f4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18ee59f660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18ee59f7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18ee59f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f18ee5a47c0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ee5a47c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f18ee5a4b40"/>
        <function-ref name="userId" scoped="" ref="0x7f18ee5a4cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f18ef1272c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ef1272c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f18ef127640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18ef1277d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f18ef1268a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef1268a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f18ef126c20"/>
        <function-ref name="configure" scoped="" ref="0x7f18ef126db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f18ef12b4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f18ef12b4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef12b850"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef12b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18ef128020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18ef128020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef1283a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ef128530"/>
        <function-ref name="request" scoped="" ref="0x7f18ef1286c0"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef128850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef1289e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f18ef12a3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef12a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef12a770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f18ef127ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef127ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f18ef127e50"/>
        <function-ref name="userId" scoped="" ref="0x7f18ef126020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f18ef111bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef111bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f18ef110020"/>
        <function-ref name="userId" scoped="" ref="0x7f18ef1101b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f18ef124d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f18ef124d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef123180"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef123310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f18ef1115e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f18ef1115e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef111960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f18ef123710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f18ef123710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ef123ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f18ef123d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f18ef123d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18ef111180"/>
        <function-ref name="txDone" scoped="" ref="0x7f18ef111310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f18ef097020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ef097020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f18ef0973c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18ef097550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f18ef096cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ef096cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f18ef0950a0"/>
        <function-ref name="configure" scoped="" ref="0x7f18ef095230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f18ef0977a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f18ef0977a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef097b20"/>
        <function-ref name="requested" scoped="" ref="0x7f18ef097cb0"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef097e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef096020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18ef0961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18ef098210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18ef098210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ef0985b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ef098740"/>
        <function-ref name="request" scoped="" ref="0x7f18ef0988d0"/>
        <function-ref name="granted" scoped="" ref="0x7f18ef098a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ef098bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f18ef096400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ef096400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f18ef096780"/>
        <function-ref name="userId" scoped="" ref="0x7f18ef096910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ee1cee50" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ee1cee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ee1cd210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f18ee1cd4a0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f18ee1cd4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f18ee1cd820"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f18ee1cd9b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f18ee1cdb40"/>
        <function-ref name="dequeue" scoped="" ref="0x7f18ee1cdcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f18ee1ca530" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f18ee1ca530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f18ee1ca8d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18ee1caa60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f18ee1c7270" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f18ee1c7270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f18ee1c7610"/>
        <function-ref name="configure" scoped="" ref="0x7f18ee1c77a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f18ee1c7a30" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f18ee1c7a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f18ee1c7db0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f18ee1c6020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f18ee1c61b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f18ee1c6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f18ee1cacb0" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f18ee1cacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ee1c90a0"/>
        <function-ref name="requested" scoped="" ref="0x7f18ee1c9230"/>
        <function-ref name="granted" scoped="" ref="0x7f18ee1c93c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ee1c9550"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f18ee1c96e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ee1c6590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ee1c6590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ee1c6910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ee1c6aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ee1c6c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ee1c6dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ee1c5020"/>
        <function-ref name="get" scoped="" ref="0x7f18ee1c51b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ee1c5340"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ee1c5980"/>
        <function-ref name="set" scoped="" ref="0x7f18ee1c5660"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ee1c54d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ee1c57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f18ee1cb740" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18ee1cb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18ee1cbae0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18ee1cbc70"/>
        <function-ref name="request" scoped="" ref="0x7f18ee1cbe00"/>
        <function-ref name="granted" scoped="" ref="0x7f18ee1ca020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18ee1ca1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f18ee1c9930" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f18ee1c9930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f18ee1c9cb0"/>
        <function-ref name="userId" scoped="" ref="0x7f18ee1c9e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f18ee1c5c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f18ee1c5c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18ee1c4020"/>
        <function-ref name="runTask" scoped="" ref="0x7f18ee1c41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f18ef08ed70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f18ef08ed70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f18ef08b180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f18ef08b310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f18ef08b4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f18ef08b630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f18ef08b7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f18ef08b950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f18ef08bae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f18ef08bc70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef08be00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f18ef08a020"/>
        <function-ref name="getData" scoped="" ref="0x7f18ef08a1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f18ef08a340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f18ef08a4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f18ef08a760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f18ef08a8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f18ef08aa80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f18ef08ac10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f18ef08ada0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f18ef089020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f18ef0891b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f18ef089340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f18ef0894d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f18ef089660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f18ef0897f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f18ef089980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f18ef089d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f18ef088020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f18ef0881b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f18ef088340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f18ef0884d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f18ef088660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f18ef0887f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f18ef088980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f18ef088b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f18ef088ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f18ef088e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f18ef087020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f18ef0871b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f18ef087340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f18ef0874d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f18ef087660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f18ef0877f0"/>
        <function-ref name="setData" scoped="" ref="0x7f18ef087980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f18ef087b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f18ef087ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f18ef087e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f18ef086020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f18ef0861b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f18ef086340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f18ef0868d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f18ef086a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f18ef086bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f18ef086d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f18ef085020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f18ef0851b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f18ef085340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f18ef0854d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f18ef085660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f18ef0857f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f18ef07b700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f18ef07b700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18ef07ba80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18ef07bc10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18ef07bda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18ef07a020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18ef07a1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18ef07a340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18ef07a4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18ef07a660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18ef07a7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18ef07a980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18ef07ab10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18ef07aca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18ef07ae30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18ef079120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18ef0792b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18ef079440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18ef0795d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f18ef079760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18ef0798f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18ef079a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18ef079c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18ef079da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18ef078020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18ef0781b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ef078340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18ef0786d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18ef078860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18ef0789f0"/>
        <function-ref name="tx" scoped="" ref="0x7f18ef078b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18ef078d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18ef077020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18ef0771b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18ef077340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18ef0774d0"/>
        <function-ref name="rx" scoped="" ref="0x7f18ef077660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18ef0777f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18ef077980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18ef077b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18ef077ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18ef077e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f18ef0741f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f18ef0741f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef074570"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef074700"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef074890"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef074a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef074bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef074d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef073020"/>
        <function-ref name="get" scoped="" ref="0x7f18ef0731b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef073340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef0734d0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef073660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef0737f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef073980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef073c10"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef073da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f18ef084940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f18ef084940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f18ef084cc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f18ef084e50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f18ef081020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f18ef0811b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f18ef081340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f18ef0814d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f18ef081660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f18ef0817f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ef081980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f18ef081b10"/>
        <function-ref name="getData" scoped="" ref="0x7f18ef081ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f18ef081e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f18ef080020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f18ef0802b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f18ef080440"/>
        <function-ref name="getIV" scoped="" ref="0x7f18ef0805d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f18ef080760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f18ef0808f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f18ef080a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f18ef080c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f18ef080da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f18ef07f020"/>
        <function-ref name="isI2C" scoped="" ref="0x7f18ef07f1b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f18ef07f340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f18ef07f4d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f18ef07f860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f18ef07f9f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f18ef07fb80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f18ef07fd10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f18ef07e020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f18ef07e1b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f18ef07e340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f18ef07e4d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f18ef07e660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f18ef07e7f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f18ef07e980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f18ef07eb10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f18ef07eca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f18ef07ee30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f18ef07d020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f18ef07d1b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f18ef07d340"/>
        <function-ref name="setData" scoped="" ref="0x7f18ef07d4d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f18ef07d660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f18ef07d7f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f18ef07d980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f18ef07db10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f18ef07dca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f18ef07de30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f18ef07c420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f18ef07c5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f18ef07c740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f18ef07c8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f18ef07ca60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f18ef07cbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f18ef07cd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f18ef07b020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f18ef07b1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f18ef07b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f18ef076250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f18ef076250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18ef0765d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f18ef076760"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18ef0768f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18ef076a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18ef076c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18ef076da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18ef075020"/>
        <function-ref name="get" scoped="" ref="0x7f18ef0751b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18ef075340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18ef0754d0"/>
        <function-ref name="set" scoped="" ref="0x7f18ef075660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18ef0757f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18ef075980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18ef075c10"/>
        <function-ref name="clr" scoped="" ref="0x7f18ef075da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f18eefc4920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f18eefc4920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f18eefc4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f18eefc3020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f18eefc3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f18eefc33a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f18eefc3530"/>
        <function-ref name="request" scoped="" ref="0x7f18eefc36c0"/>
        <function-ref name="granted" scoped="" ref="0x7f18eefc3850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f18eefc39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f18eefc40c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f18eefc40c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18eefc4440"/>
        <function-ref name="stop" scoped="" ref="0x7f18eefc45d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f18eefafa30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f18eefafa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f18eefafdb0"/>
        <function-ref name="offset" scoped="" ref="0x7f18eefac020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f18eefac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f18eef91bf0" loc="43:../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f18eef91bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f18eef6cae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f18eef6b880"/>
        <function-ref name="element" scoped="" ref="0x7f18eef69020"/>
        <function-ref name="full" scoped="" ref="0x7f18eef6dce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f18eef6c660"/>
        <function-ref name="dequeue" scoped="" ref="0x7f18eef6b1d0"/>
        <function-ref name="empty" scoped="" ref="0x7f18eef6d860"/>
        <function-ref name="size" scoped="" ref="0x7f18eef6c1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f18eef61a20" loc="93:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f18eef61a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f18eef62920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f18eef5f6d0"/>
        <function-ref name="element" scoped="" ref="0x7f18eef5fd40"/>
        <function-ref name="full" scoped="" ref="0x7f18eef63af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f18eef624a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f18eef5f020"/>
        <function-ref name="empty" scoped="" ref="0x7f18eef63670"/>
        <function-ref name="size" scoped="" ref="0x7f18eef62020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f18eef5e440" loc="94:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f18eef5e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f18eef5e7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18eef5e950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18eef5eae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f18eef5ec70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f18eef5ee00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f18eef5d0c0" loc="95:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f18eef5d0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eef5d440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f18eef5d5d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f18eef5d760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f18eef5d8f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f18eef5da80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f18eef57500" loc="114:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7f18eef57500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eef57880"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eef57a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eef68a60" loc="89:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eef68a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eef68de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18eef5dd00" loc="96:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18eef5dd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18eef5c0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18eef5c230"/>
        <function-ref name="led1On" scoped="" ref="0x7f18eef5c3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18eef5c550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18eef5c6e0"/>
        <function-ref name="get" scoped="" ref="0x7f18eef5c870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18eef5ca00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18eef5b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f18eef5cb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f18eef5cd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f18eef5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f18eef611a0" loc="90:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f18eef611a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f18eef61520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f18eef41be0" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f18eef41be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f18eef3e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eef3a020" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eef3a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eef3a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f18eef3a680" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f18eef3a680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f18eef3aa00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f18eef34380" loc="39:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f18eef34380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f18eef34700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f18eef34aa0" loc="40:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f18eef34aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f18eef34e20"/>
        <function-ref name="stopDone" scoped="" ref="0x7f18eef31020"/>
        <function-ref name="start" scoped="" ref="0x7f18eef311b0"/>
        <function-ref name="stop" scoped="" ref="0x7f18eef31340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActivityTimer" ref="0x7f18eef12a30" loc="50:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActivityTimer" scoped="" ref="0x7f18eef12a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eef0f020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eef1b510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eef10300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eef1be10"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eef0f920"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eef0f4a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eef1b990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eef1c670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eef10910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eef1cb40"/>
        <function-ref name="stop" scoped="" ref="0x7f18eef1b090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f18eef2bd00" loc="45:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f18eef2bd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f18eef2a0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SampleTimer" ref="0x7f18eef0e020" loc="51:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SampleTimer" scoped="" ref="0x7f18eef0e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eef0a630"/>
        <function-ref name="fired" scoped="" ref="0x7f18eef0da60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eef0b920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eef0b4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eef09020"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eef0aab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eef0b020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eef0ec10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eef0a020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eef0d110"/>
        <function-ref name="stop" scoped="" ref="0x7f18eef0d5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DMA0" ref="0x7f18eeecb600" loc="55:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA0" scoped="" ref="0x7f18eeecb600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18eeecb980"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18eeecbb10"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18eeecbca0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18eeecbe30"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18eeeed020"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18eeeed1b0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18eeeed340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BluetoothInit" ref="0x7f18eef2a3f0" loc="46:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BluetoothInit" scoped="" ref="0x7f18eef2a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eef2a770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopSensing" ref="0x7f18eeebb020" loc="108:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopSensing" scoped="" ref="0x7f18eeebb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eeebb3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eeebb530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18eef280c0" loc="48:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18eef280c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18eef28440"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18eef285d0"/>
        <function-ref name="led1On" scoped="" ref="0x7f18eef28760"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18eef288f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18eef28a80"/>
        <function-ref name="get" scoped="" ref="0x7f18eef28c10"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18eef28da0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18eef274d0"/>
        <function-ref name="set" scoped="" ref="0x7f18eef27020"/>
        <function-ref name="led0On" scoped="" ref="0x7f18eef271b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f18eef27340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendSensorData" ref="0x7f18eeec25c0" loc="92:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendSensorData" scoped="" ref="0x7f18eeec25c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eeec2940"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eeec2ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startSensing" ref="0x7f18eeebe820" loc="102:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startSensing" scoped="" ref="0x7f18eeebe820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eeebeca0"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eeebee30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Bluetooth" ref="0x7f18eeeef380" loc="54:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Bluetooth" scoped="" ref="0x7f18eeeef380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Bluetooth"/>
      </instance>
      <interface-functions>
        <function-ref name="setDeviceClass" scoped="" ref="0x7f18eef03ca0"/>
        <function-ref name="setBaudrate" scoped="" ref="0x7f18eeeef890"/>
        <function-ref name="setDiscoverable" scoped="" ref="0x7f18eeeefa20"/>
        <function-ref name="dataAvailable" scoped="" ref="0x7f18eeeefd40"/>
        <function-ref name="disconnect" scoped="" ref="0x7f18eef03e30"/>
        <function-ref name="connectionClosed" scoped="" ref="0x7f18eef04020"/>
        <function-ref name="setName" scoped="" ref="0x7f18eef041b0"/>
        <function-ref name="setServiceName" scoped="" ref="0x7f18eef04340"/>
        <function-ref name="setRawBaudrate" scoped="" ref="0x7f18eef044d0"/>
        <function-ref name="setPagingTime" scoped="" ref="0x7f18eef04660"/>
        <function-ref name="writeDone" scoped="" ref="0x7f18eef047f0"/>
        <function-ref name="setInquiryTime" scoped="" ref="0x7f18eef04980"/>
        <function-ref name="connect" scoped="" ref="0x7f18eef04b10"/>
        <function-ref name="connectionMade" scoped="" ref="0x7f18eef04da0"/>
        <function-ref name="setAuthentication" scoped="" ref="0x7f18eef03020"/>
        <function-ref name="resetDefaults" scoped="" ref="0x7f18eeeef700"/>
        <function-ref name="commandModeEnded" scoped="" ref="0x7f18eeeefbb0"/>
        <function-ref name="setServiceClass" scoped="" ref="0x7f18eef031b0"/>
        <function-ref name="write" scoped="" ref="0x7f18eef03340"/>
        <function-ref name="discoverDevices" scoped="" ref="0x7f18eef034d0"/>
        <function-ref name="setRadioMode" scoped="" ref="0x7f18eef03660"/>
        <function-ref name="setPIN" scoped="" ref="0x7f18eef037f0"/>
        <function-ref name="setEncryption" scoped="" ref="0x7f18eef03980"/>
        <function-ref name="disableRemoteConfig" scoped="" ref="0x7f18eef03b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelInit" ref="0x7f18eef2aa90" loc="47:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AccelInit" scoped="" ref="0x7f18eef2aa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eef2ae10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BTStdControl" ref="0x7f18eef08720" loc="53:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BTStdControl" scoped="" ref="0x7f18eef08720"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18eef08aa0"/>
        <function-ref name="stop" scoped="" ref="0x7f18eef08c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Accel" ref="0x7f18eef05e60" loc="52:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Accel" scoped="" ref="0x7f18eef05e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Mma_Accel"/>
      </instance>
      <interface-functions>
        <function-ref name="setSensitivity" scoped="" ref="0x7f18eef08210"/>
        <function-ref name="wake" scoped="" ref="0x7f18eef083a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="shimmerAnalogSetup" ref="0x7f18eef1d3c0" loc="49:SimpleAccelC.nc">
      <component-ref qname="SimpleAccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eef1d3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="shimmerAnalogSetup"/>
      </instance>
      <interface-functions>
        <function-ref name="addAccelInputs" scoped="" ref="0x7f18eef1d740"/>
        <function-ref name="triggerConversion" scoped="" ref="0x7f18eef1d8d0"/>
        <function-ref name="getNumberOfChannels" scoped="" ref="0x7f18eef1da60"/>
        <function-ref name="addECGInputs" scoped="" ref="0x7f18eef1dbf0"/>
        <function-ref name="addAnExInput" scoped="" ref="0x7f18eef1dd80"/>
        <function-ref name="reset" scoped="" ref="0x7f18eef26020"/>
        <function-ref name="addEMGInput" scoped="" ref="0x7f18eef261b0"/>
        <function-ref name="addStrainGaugeInputs" scoped="" ref="0x7f18eef26340"/>
        <function-ref name="addGSRInput" scoped="" ref="0x7f18eef264d0"/>
        <function-ref name="finishADCSetup" scoped="" ref="0x7f18eef26660"/>
        <function-ref name="addUVInputs" scoped="" ref="0x7f18eef267f0"/>
        <function-ref name="addGyroInputs" scoped="" ref="0x7f18eef26980"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f18eef26b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f18eee9d640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="SimpleAccelAppC.SampleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18eee9d640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eed0ac40"/>
        <function-ref name="fired" scoped="" ref="0x7f18eed0b1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eed0a020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eed0bae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eed08590"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eed08110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eed0b660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eed0c390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eed0a630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eed0c860"/>
        <function-ref name="stop" scoped="" ref="0x7f18eed0cd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f18eee94610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee94610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eee91c40"/>
        <function-ref name="fired" scoped="" ref="0x7f18eee921e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eee91020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eee92ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eee8f590"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eee8f110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eee92660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eee93390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eee91630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eee93860"/>
        <function-ref name="stop" scoped="" ref="0x7f18eee93d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f18eee8b1d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f18eee8b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eee87630"/>
        <function-ref name="fired" scoped="" ref="0x7f18eee89c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eee889d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eee88550"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eee86020"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eee87ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eee880d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eee8bdc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eee87020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eee892e0"/>
        <function-ref name="stop" scoped="" ref="0x7f18eee897b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f18eee82a80" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f18eee82a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18eee846f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eee8c400" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eee8c400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eee8c780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f18eeda8020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f18eeda8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eeda6870"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeda7840"/>
        <function-ref name="startAt" scoped="" ref="0x7f18eeda6220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eeda7d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f18eeda6d30"/>
        <function-ref name="start" scoped="" ref="0x7f18eeda8e30"/>
        <function-ref name="stop" scoped="" ref="0x7f18eeda7380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eeda9760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eeda9760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eeda9ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f18ee17a570" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f18ee17a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18ee177db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18ee179da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f18ee177760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18ee1772a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f18ee1762a0"/>
        <function-ref name="start" scoped="" ref="0x7f18ee1793d0"/>
        <function-ref name="stop" scoped="" ref="0x7f18ee1798e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ee17cc80" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ee17cc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ee17a0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f18ee161da0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f18ee161da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ee160180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ee160310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ee1604a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ee160630"/>
        <function-ref name="fired" scoped="" ref="0x7f18ee1607c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f18ee164340" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ee164340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ee1646c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ee164850"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ee1649e0"/>
        <function-ref name="get" scoped="" ref="0x7f18ee164b70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ee164d00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ee163020"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ee1631b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ee163340"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ee1634d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ee163660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ee1637f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f18ee163a80" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18ee163a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ee163e00"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ee161020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ee1611b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ee161340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ee1614d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ee161660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ee1617f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ee161980"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ee161b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f18eee60ba0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f18eee60ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18eee5e020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18eee5e1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18eee5e340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18eee5e4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eee5e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f18eee634d0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f18eee634d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eee63850"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18eee639e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18eee63b70"/>
        <function-ref name="get" scoped="" ref="0x7f18eee63d00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18eee62020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18eee621b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18eee62340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18eee624d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18eee62660"/>
        <function-ref name="setMode" scoped="" ref="0x7f18eee627f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18eee62980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f18eee61280" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18eee61280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18eee61600"/>
        <function-ref name="getControl" scoped="" ref="0x7f18eee61790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18eee61920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18eee61ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18eee61c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18eee61dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18eee60020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18eee601b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f18eee60340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f18ee157a80" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f18ee157a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f18ee157e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f18ee156020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f18ee1561b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f18ee156340"/>
        <function-ref name="fired" scoped="" ref="0x7f18ee1564d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f18ee15a190" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f18ee15a190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18ee15a510"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f18ee15a6a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ee15a830"/>
        <function-ref name="get" scoped="" ref="0x7f18ee15a9c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ee15ab50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ee15ace0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18ee15ae70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ee158030"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ee1581c0"/>
        <function-ref name="setMode" scoped="" ref="0x7f18ee158350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f18ee1584e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f18ee15d020" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f18ee15d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18ee15b870"/>
        <function-ref name="fired" scoped="" ref="0x7f18ee15c840"/>
        <function-ref name="startAt" scoped="" ref="0x7f18ee15b220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18ee15cd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f18ee15bd30"/>
        <function-ref name="start" scoped="" ref="0x7f18ee15de30"/>
        <function-ref name="stop" scoped="" ref="0x7f18ee15c380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ee15e660" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ee15e660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ee15e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f18ee158770" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f18ee158770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f18ee158af0"/>
        <function-ref name="getControl" scoped="" ref="0x7f18ee158c80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f18ee158e10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f18ee157020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f18ee1571b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f18ee157340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f18ee1574d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f18ee157660"/>
        <function-ref name="setControl" scoped="" ref="0x7f18ee1577f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f18eee0b020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18eee0b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18eee0be30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18eee0a800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18eee0a340"/>
        <function-ref name="overflow" scoped="" ref="0x7f18eee0acc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f18eede9950" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f18eede9950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18eede7780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18eede6150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18eede7c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f18eede6610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f18eee055f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18eee055f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18eedea430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18eedeadb0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18eedea8f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f18eede92a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f18ee174890" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f18ee174890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18ee1710d0"/>
        <function-ref name="fired" scoped="" ref="0x7f18ee1720d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f18ee172a50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18ee172590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f18ee171590"/>
        <function-ref name="start" scoped="" ref="0x7f18ee1736e0"/>
        <function-ref name="stop" scoped="" ref="0x7f18ee173bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f18ee16d0a0" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f18ee16d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef541950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f18ef541cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18ee16bb30"/>
        <function-ref name="fired" scoped="" ref="0x7f18ee16c9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f18ee16b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18ee16b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f18ee169020"/>
        <function-ref name="start" scoped="" ref="0x7f18ee16c020"/>
        <function-ref name="stop" scoped="" ref="0x7f18ee16c530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f18ee171c00" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18ee171c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18ee16fa80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18ee16e4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18ee16e020"/>
        <function-ref name="overflow" scoped="" ref="0x7f18ee16e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f18eed73490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f18eed73490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eed73810"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eed739a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f18eed771d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f18eed771d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eed74b30"/>
        <function-ref name="fired" scoped="" ref="0x7f18eed769f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f18eed744e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eed74020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f18eed73020"/>
        <function-ref name="start" scoped="" ref="0x7f18eed76020"/>
        <function-ref name="stop" scoped="" ref="0x7f18eed76530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f18eed7dcf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18eed7dcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eed78220"/>
        <function-ref name="fired" scoped="" ref="0x7f18eed7b7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eed79590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eed79110"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eed78b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eed786a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eed7bc40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eed7c940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eed79ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eed7ce10"/>
        <function-ref name="stop" scoped="" ref="0x7f18eed7b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f18eed23e80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f18eed23e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eed22220"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eed223b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f18eed28c30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f18eed28c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eed23110"/>
        <function-ref name="fired" scoped="" ref="0x7f18eed256a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eed244a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eed24020"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eed23a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eed23590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eed25b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eed27860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eed24ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eed27d30"/>
        <function-ref name="stop" scoped="" ref="0x7f18eed25220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f18eed2e690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18eed2e690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eed2acf0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eed2b260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eed2a090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eed2bba0"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eed28680"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eed281e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eed2b700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eed2d390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eed2a6c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eed2d880"/>
        <function-ref name="stop" scoped="" ref="0x7f18eed2dd70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f18eed1fcf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f18eed1fcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18eed15980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f18eed14020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f18eed14020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f18eed14e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f18eed13800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f18eed13340"/>
        <function-ref name="overflow" scoped="" ref="0x7f18eed13cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f18eed06450" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="SimpleAccelAppC.ActivityTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f18eed06450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ef5411a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f18ef541510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f18eed02a20"/>
        <function-ref name="fired" scoped="" ref="0x7f18eed04020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f18eed04da0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f18eed04920"/>
        <function-ref name="getdt" scoped="" ref="0x7f18eed014a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f18eed01020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f18eed044a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f18eed05090"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f18eed02410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f18eed05560"/>
        <function-ref name="stop" scoped="" ref="0x7f18eed05a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eecfa2a0" loc="49:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <component-ref qname="RovingNetworksC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eecfa2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eecfa620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Bluetooth" ref="0x7f18eecfd600" loc="48:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <component-ref qname="RovingNetworksC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Bluetooth" scoped="" ref="0x7f18eecfd600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Bluetooth"/>
      </instance>
      <interface-functions>
        <function-ref name="setDeviceClass" scoped="" ref="0x7f18eecfbe30"/>
        <function-ref name="setBaudrate" scoped="" ref="0x7f18eecfdb10"/>
        <function-ref name="setDiscoverable" scoped="" ref="0x7f18eecfdca0"/>
        <function-ref name="dataAvailable" scoped="" ref="0x7f18eecfc020"/>
        <function-ref name="disconnect" scoped="" ref="0x7f18eecfa020"/>
        <function-ref name="connectionClosed" scoped="" ref="0x7f18eecfc1b0"/>
        <function-ref name="setName" scoped="" ref="0x7f18eecfc340"/>
        <function-ref name="setServiceName" scoped="" ref="0x7f18eecfc4d0"/>
        <function-ref name="setRawBaudrate" scoped="" ref="0x7f18eecfc660"/>
        <function-ref name="setPagingTime" scoped="" ref="0x7f18eecfc7f0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f18eecfc980"/>
        <function-ref name="setInquiryTime" scoped="" ref="0x7f18eecfcb10"/>
        <function-ref name="connect" scoped="" ref="0x7f18eecfcca0"/>
        <function-ref name="connectionMade" scoped="" ref="0x7f18eecfb020"/>
        <function-ref name="setAuthentication" scoped="" ref="0x7f18eecfb1b0"/>
        <function-ref name="resetDefaults" scoped="" ref="0x7f18eecfd980"/>
        <function-ref name="commandModeEnded" scoped="" ref="0x7f18eecfde30"/>
        <function-ref name="setServiceClass" scoped="" ref="0x7f18eecfb340"/>
        <function-ref name="write" scoped="" ref="0x7f18eecfb4d0"/>
        <function-ref name="discoverDevices" scoped="" ref="0x7f18eecfb660"/>
        <function-ref name="setRadioMode" scoped="" ref="0x7f18eecfb7f0"/>
        <function-ref name="setPIN" scoped="" ref="0x7f18eecfb980"/>
        <function-ref name="setEncryption" scoped="" ref="0x7f18eecfbb10"/>
        <function-ref name="disableRemoteConfig" scoped="" ref="0x7f18eecfbca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f18eed00e00" loc="47:../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <component-ref qname="RovingNetworksC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f18eed00e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18eecfd1c0"/>
        <function-ref name="stop" scoped="" ref="0x7f18eecfd350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="runSetCommands" ref="0x7f18eebffd60" loc="376:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="runSetCommands" scoped="" ref="0x7f18eebffd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eebfe180"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eebfe310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="runMasterCommands" ref="0x7f18eec111e0" loc="302:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="runMasterCommands" scoped="" ref="0x7f18eec111e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eec11560"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eec116f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConnectionInterrupt" ref="0x7f18eec67020" loc="57:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConnectionInterrupt" scoped="" ref="0x7f18eec67020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eec673a0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eec67530"/>
        <function-ref name="disable" scoped="" ref="0x7f18eec676c0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eec67850"/>
        <function-ref name="enable" scoped="" ref="0x7f18eec679e0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eec67b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eec723b0" loc="49:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eec723b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eec72730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTControl" ref="0x7f18eec6e130" loc="54:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UARTControl" scoped="" ref="0x7f18eec6e130"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18eec6e4b0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18eec6e640"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18eec6e7d0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18eec6e960"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18eec6eaf0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18eec6ec80"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18eec6ee10"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18eec6d020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18eec6d1b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18eec6d340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18eec6d4d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18eec6d660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18eec6d7f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18eec6da80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18eec6dc10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18eec6dda0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18eec6c020"/>
        <function-ref name="isUart" scoped="" ref="0x7f18eec6c1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18eec6c340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18eec6c4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18eec6c660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18eec6c7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18eec6c980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18eec6cb10"/>
        <function-ref name="getMode" scoped="" ref="0x7f18eec6cca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18eec6b220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18eec6b3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18eec6b540"/>
        <function-ref name="tx" scoped="" ref="0x7f18eec6b6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18eec6b860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18eec6b9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18eec6bb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18eec6bd10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18eec6a020"/>
        <function-ref name="rx" scoped="" ref="0x7f18eec6a1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18eec6a340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18eec6a4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18eec6a660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18eec6a7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18eec6a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTData" ref="0x7f18eec6ad70" loc="55:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UARTData" scoped="" ref="0x7f18eec6ad70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18eec69180"/>
        <function-ref name="txDone" scoped="" ref="0x7f18eec69310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RTSInterrupt" ref="0x7f18eec68020" loc="56:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RTSInterrupt" scoped="" ref="0x7f18eec68020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eec683a0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eec68530"/>
        <function-ref name="disable" scoped="" ref="0x7f18eec686c0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eec68850"/>
        <function-ref name="enable" scoped="" ref="0x7f18eec689e0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eec68b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18eec67df0" loc="59:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18eec67df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18eec621c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18eec62350"/>
        <function-ref name="led1On" scoped="" ref="0x7f18eec624e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18eec62670"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18eec62800"/>
        <function-ref name="get" scoped="" ref="0x7f18eec62990"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18eec62b20"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18eec611b0"/>
        <function-ref name="set" scoped="" ref="0x7f18eec62cb0"/>
        <function-ref name="led0On" scoped="" ref="0x7f18eec62e40"/>
        <function-ref name="led2On" scoped="" ref="0x7f18eec61020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Bluetooth" ref="0x7f18eec712d0" loc="51:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Bluetooth" scoped="" ref="0x7f18eec712d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Bluetooth"/>
      </instance>
      <interface-functions>
        <function-ref name="setDeviceClass" scoped="" ref="0x7f18eec6fb10"/>
        <function-ref name="setBaudrate" scoped="" ref="0x7f18eec717e0"/>
        <function-ref name="setDiscoverable" scoped="" ref="0x7f18eec71970"/>
        <function-ref name="dataAvailable" scoped="" ref="0x7f18eec71c90"/>
        <function-ref name="disconnect" scoped="" ref="0x7f18eec6fca0"/>
        <function-ref name="connectionClosed" scoped="" ref="0x7f18eec71e20"/>
        <function-ref name="setName" scoped="" ref="0x7f18eec70020"/>
        <function-ref name="setServiceName" scoped="" ref="0x7f18eec701b0"/>
        <function-ref name="setRawBaudrate" scoped="" ref="0x7f18eec70340"/>
        <function-ref name="setPagingTime" scoped="" ref="0x7f18eec704d0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f18eec70660"/>
        <function-ref name="setInquiryTime" scoped="" ref="0x7f18eec707f0"/>
        <function-ref name="connect" scoped="" ref="0x7f18eec70980"/>
        <function-ref name="connectionMade" scoped="" ref="0x7f18eec70c10"/>
        <function-ref name="setAuthentication" scoped="" ref="0x7f18eec70da0"/>
        <function-ref name="resetDefaults" scoped="" ref="0x7f18eec71650"/>
        <function-ref name="commandModeEnded" scoped="" ref="0x7f18eec71b00"/>
        <function-ref name="setServiceClass" scoped="" ref="0x7f18eec6f020"/>
        <function-ref name="write" scoped="" ref="0x7f18eec6f1b0"/>
        <function-ref name="discoverDevices" scoped="" ref="0x7f18eec6f340"/>
        <function-ref name="setRadioMode" scoped="" ref="0x7f18eec6f4d0"/>
        <function-ref name="setPIN" scoped="" ref="0x7f18eec6f660"/>
        <function-ref name="setEncryption" scoped="" ref="0x7f18eec6f7f0"/>
        <function-ref name="disableRemoteConfig" scoped="" ref="0x7f18eec6f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f18eec729f0" loc="50:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f18eec729f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18eec72d70"/>
        <function-ref name="stop" scoped="" ref="0x7f18eec71020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendNextChar" ref="0x7f18eec52b80" loc="88:../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendNextChar" scoped="" ref="0x7f18eec52b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f18eec51020"/>
        <function-ref name="runTask" scoped="" ref="0x7f18eec511b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f18eeba8bc0" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f18eeba8bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba7020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba71b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba7340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba74d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba7660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f18eeb9ebc0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f18eeb9ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb9d020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb9d1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb9d340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb9d4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb9d660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb9d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f18eeba5bc0" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f18eeba5bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba4020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba41b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba4340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba44d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba4660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f18eeba3bc0" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f18eeba3bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba2020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba21b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba2340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba24d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba2660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f18eebaac40" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f18eebaac40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba9020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba91b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba9340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba94d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba9660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f18eeba0bc0" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f18eeba0bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb9f0a0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb9f230"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb9f3c0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb9f550"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb9f6e0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb9f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f18eeba7bc0" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f18eeba7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba6020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba61b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba6340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba64d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba6660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f18eeb9dbc0" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f18eeb9dbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb9c020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb9c1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb9c340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb9c4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb9c660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb9c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f18eebafd20" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f18eebafd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eebac0e0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eebac270"/>
        <function-ref name="disable" scoped="" ref="0x7f18eebac400"/>
        <function-ref name="edge" scoped="" ref="0x7f18eebac590"/>
        <function-ref name="enable" scoped="" ref="0x7f18eebac720"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eebac8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f18eeba2bc0" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f18eeba2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba1020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba11b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba1340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba14d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba1660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f18eeba9bc0" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f18eeba9bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba8020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba81b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba8340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba84d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba8660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f18eeb9fc40" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f18eeb9fc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb9e020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb9e1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb9e340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb9e4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb9e660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb9e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f18eeba6bc0" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f18eeba6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba5020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba51b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba5340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba54d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba5660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f18eeba4bc0" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f18eeba4bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba3020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba31b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba3340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba34d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba3660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f18eebacc80" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f18eebacc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eebaa0a0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eebaa230"/>
        <function-ref name="disable" scoped="" ref="0x7f18eebaa3c0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eebaa550"/>
        <function-ref name="enable" scoped="" ref="0x7f18eebaa6e0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eebaa870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f18eeba1bc0" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f18eeba1bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeba0020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeba01b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeba0340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeba04d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeba0660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeba07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f18eeb95a30" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f18eeb95a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb95db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb94020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb941b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb94340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb944d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb94660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f18eeb8abc0" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f18eeb8abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb89020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb891b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb89340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb894d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb89660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb897f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f18eeb92a30" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f18eeb92a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb92db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb90020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb901b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb90340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb904d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb90660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f18eeb8fa30" loc="50:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f18eeb8fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb8fdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb8e020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb8e1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb8e340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb8e4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb8e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f18eeb97a30" loc="41:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f18eeb97a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb97db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb96020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb961b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb96340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb964d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb96660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f18eeb8ca30" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f18eeb8ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb8b020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb8b1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb8b340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb8b4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb8b660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb8b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f18eeb94a30" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f18eeb94a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb94db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb93020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb931b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb93340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb934d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb93660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f18eeb89bc0" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f18eeb89bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb88020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb881b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb88340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb884d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb88660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb887f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f18eeb9b9c0" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f18eeb9b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb9bd40"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb98020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb981b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb98340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb984d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb98660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f18eeb8ea30" loc="51:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f18eeb8ea30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb8edb0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb8d020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb8d1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb8d340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb8d4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb8d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f18eeb96a30" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f18eeb96a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb96db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb95020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb951b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb95340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb954d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb95660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f18eeb8bbc0" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f18eeb8bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb8a020"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb8a1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb8a340"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb8a4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb8a660"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb8a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f18eeb93a30" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f18eeb93a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb93db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb92020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb921b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb92340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb924d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb92660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f18eeb90a30" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f18eeb90a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb90db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb8f020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb8f1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb8f340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb8f4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb8f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f18eeb98a30" loc="40:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f18eeb98a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb98db0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb97020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb971b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb97340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb974d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb97660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f18eeb8da30" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f18eeb8da30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f18eeb8ddb0"/>
        <function-ref name="fired" scoped="" ref="0x7f18eeb8c020"/>
        <function-ref name="disable" scoped="" ref="0x7f18eeb8c1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f18eeb8c340"/>
        <function-ref name="enable" scoped="" ref="0x7f18eeb8c4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f18eeb8c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f18eeaae860" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f18eeaae860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18eeaaebe0"/>
        <function-ref name="txDone" scoped="" ref="0x7f18eeaaed70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f18eeab2450" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f18eeab2450"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18eeab27d0"/>
        <function-ref name="stop" scoped="" ref="0x7f18eeab2960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f18eeab2c80" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f18eeab2c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18eeab50a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18eeab5230"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18eeab53c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18eeab5550"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18eeab56e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18eeab5870"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18eeab5a00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18eeab5b90"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18eeab5d20"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18eeab4020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18eeab41b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18eeab4340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18eeab44d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18eeab4760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18eeab48f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18eeab4a80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18eeab4c10"/>
        <function-ref name="isUart" scoped="" ref="0x7f18eeab4da0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18eeab0020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18eeab01b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18eeab0340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18eeab04d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18eeab0660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18eeab07f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f18eeab0980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18eeab0d10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18eeaaf020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18eeaaf1b0"/>
        <function-ref name="tx" scoped="" ref="0x7f18eeaaf340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18eeaaf4d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18eeaaf660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18eeaaf7f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18eeaaf980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18eeaafb10"/>
        <function-ref name="rx" scoped="" ref="0x7f18eeaafca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18eeaafe30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18eeaae020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18eeaae1b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18eeaae340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18eeaae4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f18eeaa1990" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f18eeaa1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18eeaa1d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f18eeaa0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18eeaa01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18eeaa0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18eeaa04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18eeaa0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18eeaa07f0"/>
        <function-ref name="get" scoped="" ref="0x7f18eeaa0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18eeaa0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18eeaa0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18eeaa0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18eea9f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18eea9f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18eea9f440"/>
        <function-ref name="clr" scoped="" ref="0x7f18eea9f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f18eeaa5130" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f18eeaa5130"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f18eeaa54b0"/>
        <function-ref name="txDone" scoped="" ref="0x7f18eeaa5640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f18eea9f990" loc="81:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f18eea9f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18eea9fd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f18eea9e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18eea9e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18eea9e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18eea9e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18eea9e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18eea9e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18eea9e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18eea9eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18eea9eca0"/>
        <function-ref name="set" scoped="" ref="0x7f18eea9ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18eea9d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18eea9d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18eea9d440"/>
        <function-ref name="clr" scoped="" ref="0x7f18eea9d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f18eea9d990" loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f18eea9d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18eea9dd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f18eea9c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18eea9c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18eea9c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18eea9c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18eea9c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18eea9c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f18eea9c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18eea9cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18eea9cca0"/>
        <function-ref name="set" scoped="" ref="0x7f18eea9ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18eea9b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18eea9b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18eea9b440"/>
        <function-ref name="clr" scoped="" ref="0x7f18eea9b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f18eeaaa550" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f18eeaaa550"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f18eeaaa8d0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f18eeaaaa60"/>
        <function-ref name="setUctl" scoped="" ref="0x7f18eeaaabf0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f18eeaaad80"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f18eeaa9020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f18eeaa91b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f18eeaa9340"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f18eeaa94d0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f18eeaa9660"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f18eeaa97f0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f18eeaa9980"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f18eeaa9b10"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f18eeaa9ca0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f18eeaa8020"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f18eeaa81b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f18eeaa8340"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f18eeaa84d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f18eeaa8660"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f18eeaa87f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f18eeaa8980"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f18eeaa8b10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f18eeaa8ca0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f18eeaa8e30"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f18eeaa7020"/>
        <function-ref name="getMode" scoped="" ref="0x7f18eeaa71b0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f18eeaa7540"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f18eeaa76d0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f18eeaa7860"/>
        <function-ref name="tx" scoped="" ref="0x7f18eeaa79f0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f18eeaa7b80"/>
        <function-ref name="disableUart" scoped="" ref="0x7f18eeaa7d10"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f18eeaa6020"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f18eeaa61b0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f18eeaa6340"/>
        <function-ref name="rx" scoped="" ref="0x7f18eeaa64d0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f18eeaa6660"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f18eeaa67f0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f18eeaa6980"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f18eeaa6b10"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f18eeaa6ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f18eeaadbc0" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f18eeaadbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f18eeaaa020"/>
        <function-ref name="stop" scoped="" ref="0x7f18eeaaa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f18eeaa3990" loc="79:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f18eeaa3990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18eeaa3d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f18eeaa2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18eeaa21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18eeaa2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18eeaa24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18eeaa2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18eeaa27f0"/>
        <function-ref name="get" scoped="" ref="0x7f18eeaa2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18eeaa2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18eeaa2ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18eeaa2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18eeaa1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18eeaa11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18eeaa1440"/>
        <function-ref name="clr" scoped="" ref="0x7f18eeaa15d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f18eeaa5a00" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f18eeaa5a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f18eeaa5d80"/>
        <function-ref name="isInput" scoped="" ref="0x7f18eeaa4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f18eeaa41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f18eeaa4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f18eeaa44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f18eeaa4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f18eeaa47f0"/>
        <function-ref name="get" scoped="" ref="0x7f18eeaa4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f18eeaa4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f18eeaa4ca0"/>
        <function-ref name="set" scoped="" ref="0x7f18eeaa4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f18eeaa3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f18eeaa31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f18eeaa3440"/>
        <function-ref name="clr" scoped="" ref="0x7f18eeaa35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eea15120" loc="39:../../../tos/platforms/shimmer2r/AccelC.nc">
      <component-ref qname="AccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eea15120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eea154a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Accel" ref="0x7f18eea18960" loc="38:../../../tos/platforms/shimmer2r/AccelC.nc">
      <component-ref qname="AccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Accel" scoped="" ref="0x7f18eea18960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Mma_Accel"/>
      </instance>
      <interface-functions>
        <function-ref name="setSensitivity" scoped="" ref="0x7f18eea18ce0"/>
        <function-ref name="wake" scoped="" ref="0x7f18eea18e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eea12020" loc="39:../../../tos/platforms/shimmer2r/Mma7361P.nc">
      <component-ref qname="Mma7361P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eea12020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eea123a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Accel" ref="0x7f18eea126d0" loc="40:../../../tos/platforms/shimmer2r/Mma7361P.nc">
      <component-ref qname="Mma7361P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Accel" scoped="" ref="0x7f18eea126d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Mma_Accel"/>
      </instance>
      <interface-functions>
        <function-ref name="setSensitivity" scoped="" ref="0x7f18eea12a50"/>
        <function-ref name="wake" scoped="" ref="0x7f18eea12be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18eea16960" loc="37:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <component-ref qname="shimmerAnalogSetupC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18eea16960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18eea16ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="shimmerAnalogSetup" ref="0x7f18eea05020" loc="38:../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <component-ref qname="shimmerAnalogSetupC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eea05020"/></type-interface>
      <instance>
        <interfacedef-ref qname="shimmerAnalogSetup"/>
      </instance>
      <interface-functions>
        <function-ref name="addAccelInputs" scoped="" ref="0x7f18eea053a0"/>
        <function-ref name="triggerConversion" scoped="" ref="0x7f18eea05530"/>
        <function-ref name="getNumberOfChannels" scoped="" ref="0x7f18eea056c0"/>
        <function-ref name="addECGInputs" scoped="" ref="0x7f18eea05850"/>
        <function-ref name="addAnExInput" scoped="" ref="0x7f18eea059e0"/>
        <function-ref name="reset" scoped="" ref="0x7f18eea05b70"/>
        <function-ref name="addEMGInput" scoped="" ref="0x7f18eea05d00"/>
        <function-ref name="addStrainGaugeInputs" scoped="" ref="0x7f18eea04020"/>
        <function-ref name="addGSRInput" scoped="" ref="0x7f18eea041b0"/>
        <function-ref name="finishADCSetup" scoped="" ref="0x7f18eea04340"/>
        <function-ref name="addUVInputs" scoped="" ref="0x7f18eea044d0"/>
        <function-ref name="addGyroInputs" scoped="" ref="0x7f18eea04660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f18eea047f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430DmaControl" ref="0x7f18ee9fb560" loc="45:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430DmaControl" scoped="" ref="0x7f18ee9fb560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7f18ee9fb8e0"/>
        <function-ref name="init" scoped="" ref="0x7f18ee9fba70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430DmaChannel" ref="0x7f18ee9fbd70" loc="46:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430DmaChannel" scoped="" ref="0x7f18ee9fbd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee9fe180"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee9fe310"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee9fe4a0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee9fe630"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee9fe7c0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee9fe950"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee9feae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f18ee9d5b80" loc="47:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f18ee9d5b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f18ee9fa020"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f18ee9fa1b0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f18ee9fa340"/>
        <function-ref name="isBusy" scoped="" ref="0x7f18ee9fa4d0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f18ee9fa660"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f18ee9fa7f0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f18ee9fa980"/>
        <function-ref name="startConversion" scoped="" ref="0x7f18ee9fab10"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f18ee9faca0"/>
        <function-ref name="getMem" scoped="" ref="0x7f18ee9fae30"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f18ee9f9020"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f18ee9f91b0"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f18ee9f9340"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f18ee9f95d0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f18ee9f9760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f18ee9ff080" loc="42:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f18ee9ff080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f18ee9ff400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f18ee9f99e0" loc="48:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f18ee9f99e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f18ee9f9d60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f18ee9d4020"/>
        <function-ref name="led1On" scoped="" ref="0x7f18ee9d41b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f18ee9d4340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f18ee9d44d0"/>
        <function-ref name="get" scoped="" ref="0x7f18ee9d4660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f18ee9d47f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f18ee9d4e30"/>
        <function-ref name="set" scoped="" ref="0x7f18ee9d4980"/>
        <function-ref name="led0On" scoped="" ref="0x7f18ee9d4b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f18ee9d4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="shimmerAnalogSetup" ref="0x7f18eea034f0" loc="41:../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7f18eea034f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="shimmerAnalogSetup"/>
      </instance>
      <interface-functions>
        <function-ref name="addAccelInputs" scoped="" ref="0x7f18eea03870"/>
        <function-ref name="triggerConversion" scoped="" ref="0x7f18eea03a00"/>
        <function-ref name="getNumberOfChannels" scoped="" ref="0x7f18eea03b90"/>
        <function-ref name="addECGInputs" scoped="" ref="0x7f18eea03d20"/>
        <function-ref name="addAnExInput" scoped="" ref="0x7f18eea00020"/>
        <function-ref name="reset" scoped="" ref="0x7f18eea001b0"/>
        <function-ref name="addEMGInput" scoped="" ref="0x7f18eea00340"/>
        <function-ref name="addStrainGaugeInputs" scoped="" ref="0x7f18eea004d0"/>
        <function-ref name="addGSRInput" scoped="" ref="0x7f18eea00660"/>
        <function-ref name="finishADCSetup" scoped="" ref="0x7f18eea007f0"/>
        <function-ref name="addUVInputs" scoped="" ref="0x7f18eea00980"/>
        <function-ref name="addGyroInputs" scoped="" ref="0x7f18eea00b10"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f18eea00ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7f18ee98c3b0" loc="46:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f18ee98c3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f18ee98c730"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f18ee98c8c0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f18ee98ca50"/>
        <function-ref name="isBusy" scoped="" ref="0x7f18ee98cbe0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f18ee98cd70"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f18ee989020"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f18ee9891b0"/>
        <function-ref name="startConversion" scoped="" ref="0x7f18ee989340"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f18ee9894d0"/>
        <function-ref name="getMem" scoped="" ref="0x7f18ee989660"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f18ee9897f0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f18ee989980"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f18ee989b10"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f18ee989da0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f18ee988020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel2" ref="0x7f18ee950590" loc="51:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel2" scoped="" ref="0x7f18ee950590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee950910"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee950aa0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee950c30"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee950dc0"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee94f020"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee94f1b0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee94f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel0" ref="0x7f18ee952210" loc="49:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel0" scoped="" ref="0x7f18ee952210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee952590"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee952720"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee9528b0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee952a40"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee952bd0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee952d60"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee951020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ee98a860" loc="48:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ee98a860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7f18ee98abe0"/>
        <function-ref name="init" scoped="" ref="0x7f18ee98ad70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel1" ref="0x7f18ee951400" loc="50:../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel1" scoped="" ref="0x7f18ee951400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee951780"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee951910"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee951aa0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee951c30"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee951dc0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee950020"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee9501b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel2" ref="0x7f18ee91f0c0" loc="44:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel2" scoped="" ref="0x7f18ee91f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee91f440"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee91f5d0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee91f760"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee91f8f0"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee91fa80"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee91fc10"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee91fda0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee91e020"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee91e1b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee91e340"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee91e4d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee91e660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee91e7f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee91ea80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee91ec10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee91eda0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee91d020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee91d1b0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee91d340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee91d4d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee91d660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee91d7f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee91d980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee91db10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee91dca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee91c220"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee91c3b0"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee91c540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee91c6d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee91c860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee91c9f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee91cb80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee91cd10"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee91b020"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee91b1b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee91b340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee91b4d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee91b660"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee91b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel0" ref="0x7f18ee928df0" loc="42:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel0" scoped="" ref="0x7f18ee928df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee9441c0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee944350"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee9444e0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee944670"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee944800"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee944990"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee944b20"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee944cb0"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee944e40"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee943020"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee9431b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee943340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee9434d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee943760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee9438f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee943a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee943c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee943da0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee927020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee9271b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee927340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee9274d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee927660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee9277f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee927980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee927d10"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee926020"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee9261b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee926340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee9264d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee926660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee9267f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee926980"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee926b10"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee926ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee926e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee925020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee9251b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee925340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ee945bd0" loc="41:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ee945bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7f18ee94bca0"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7f18ee94b1b0"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7f18ee94b340"/>
        <function-ref name="setENNMI" scoped="" ref="0x7f18ee94b4d0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee94b660"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee94b7f0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7f18ee94b980"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee94bb10"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7f18ee94b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel1" ref="0x7f18ee925730" loc="43:../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel1" scoped="" ref="0x7f18ee925730"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee925ab0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee925c40"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee925dd0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee923020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee9231b0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee923340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee9234d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee923660"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee9237f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee923980"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee923b10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee923ca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee923e30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee922120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee9222b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee922440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee9225d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee922760"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee9228f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee922a80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee922c10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee922da0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee921020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee9211b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee921340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee9216d0"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee921860"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee9219f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee921b80"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee921d10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee920020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee9201b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee920340"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee9204d0"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee920660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee9207f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee920980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee920b10"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee920ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DmaControl" ref="0x7f18ee91a510" loc="43:../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <component-ref qname="HplMsp430DmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DmaControl" scoped="" ref="0x7f18ee91a510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7f18ee917660"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7f18ee91aa20"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7f18ee91abb0"/>
        <function-ref name="setENNMI" scoped="" ref="0x7f18ee91ad40"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee917020"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee9171b0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7f18ee917340"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee9174d0"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7f18ee91a890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f18ee914710" loc="44:../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <component-ref qname="HplMsp430DmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f18ee914710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ee914a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7f18ee893c90" loc="49:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7f18ee893c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee8910a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee891230"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee8913c0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee891550"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee8916e0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee891870"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee891a00"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee891b90"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee891d20"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee890020"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee8901b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee890340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee8904d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee890760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee8908f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee890a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee890c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee890da0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee88f020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee88f1b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee88f340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee88f4d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee88f660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee88f7f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee88f980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee88fd10"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee88e020"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee88e1b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee88e340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee88e4d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee88e660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee88e7f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee88e980"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee88eb10"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee88eca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee88ee30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee88d020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee88d1b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee88d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7f18ee88d610" loc="50:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f18ee88d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ee88d990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7f18ee8899b0" loc="49:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7f18ee8899b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee889d30"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee888020"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee8881b0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee888340"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee8884d0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee888660"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee8887f0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee888980"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee888b10"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee888ca0"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee888e30"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee887020"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee8871b0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee887440"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee8875d0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee887760"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee8878f0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee887a80"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee887c10"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee887da0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee886020"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee8861b0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee886340"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee8864d0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee886660"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee8869f0"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee886b80"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee886d10"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee885020"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee8851b0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee885340"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee8854d0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee885660"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee8857f0"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee885980"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee885b10"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee885ca0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee885e30"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee884020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7f18ee8842f0" loc="50:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f18ee8842f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ee884670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7f18ee8803f0" loc="49:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7f18ee8803f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee880770"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee880900"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee880a90"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee880c20"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee880db0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee87f020"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee87f1b0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee87f340"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee87f4d0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee87f660"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee87f7f0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee87f980"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee87fb10"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee87fda0"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee87e020"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee87e1b0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee87e340"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee87e4d0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee87e660"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee87e7f0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee87e980"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee87eb10"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee87eca0"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee87ee30"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee87d020"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee87d3b0"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee87d540"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee87d6d0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee87d860"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee87d9f0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee87db80"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee87dd10"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee87c020"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee87c1b0"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee87c340"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee87c4d0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee87c660"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee87c7f0"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee87c980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7f18ee87cc50" loc="50:../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f18ee87cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f18ee87b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7f18ee847020" loc="45:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7f18ee847020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee8473a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee847530"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee8476c0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee847850"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee8479e0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee847b70"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee847d00"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee846020"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee8461b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee846340"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee8464d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee846660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee8467f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee846a80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee846c10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee846da0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee845020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee8451b0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee845340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee8454d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee845660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee8457f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee845980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee845b10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee845ca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee844220"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee8443b0"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee844540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee8446d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee844860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee8449f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee844b80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee844d10"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee843020"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee8431b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee843340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee8434d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee843660"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee8437f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7f18ee848020" loc="44:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7f18ee848020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee8483a0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee848530"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee8486c0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee848850"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee8489e0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee848b70"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee848d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7f18ee83f7a0" loc="45:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7f18ee83f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee83fb20"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee83fcb0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee83fe40"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee83e020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee83e1b0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee83e340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee83e4d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee83e660"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee83e7f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee83e980"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee83eb10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee83eca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee83ee30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee83d120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee83d2b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee83d440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee83d5d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee83d760"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee83d8f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee83da80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee83dc10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee83dda0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee83c020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee83c1b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee83c340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee83c6d0"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee83c860"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee83c9f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee83cb80"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee83cd10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee83b020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee83b1b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee83b340"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee83b4d0"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee83b660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee83b7f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee83b980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee83bb10"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee83bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7f18ee8407a0" loc="44:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7f18ee8407a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee840b20"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee840cb0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee840e40"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee83f020"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee83f1b0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee83f340"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee83f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7f18ee837db0" loc="45:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel2P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7f18ee837db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee836180"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee836310"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee8364a0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee836630"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee8367c0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee836950"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee836ae0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee836c70"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee836e00"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee835020"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee8351b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee835340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee8354d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee835760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee8358f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee835a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee835c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee835da0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee834020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee8341b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee834340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee8344d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee834660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee8347f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee834980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee834d10"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee833020"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee8331b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee833340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee8334d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee833660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee8337f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee833980"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee833b10"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee833ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee833e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee832020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee8321b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee832340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7f18ee838d80" loc="44:../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel2P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7f18ee838d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f18ee837180"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f18ee837310"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f18ee8374a0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f18ee837630"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f18ee8377c0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee837950"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f18ee837ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel1" ref="0x7f18ee826740" loc="48:../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel1" scoped="" ref="0x7f18ee826740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee826ac0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee826c50"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee826de0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee825020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee8251b0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee825340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee8254d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee825660"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee8257f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee825980"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee825b10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee825ca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee825e30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee824120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee8242b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee824440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee8245d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee824760"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee8248f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee824a80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee824c10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee824da0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee823020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee8231b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee823340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee8236d0"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee823860"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee8239f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee823b80"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee823d10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee822020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee8221b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee822340"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee8224d0"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee822660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee8227f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee822980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee822b10"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee822ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplControl" ref="0x7f18ee82c970" loc="46:../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplControl" scoped="" ref="0x7f18ee82c970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7f18ee82b990"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7f18ee82ce80"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7f18ee82b030"/>
        <function-ref name="setENNMI" scoped="" ref="0x7f18ee82b1c0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee82b350"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee82b4e0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7f18ee82b670"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee82b800"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7f18ee82ccf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel2" ref="0x7f18ee8210d0" loc="49:../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel2" scoped="" ref="0x7f18ee8210d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee821450"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee8215e0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee821770"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee821900"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee821a90"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee821c20"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee821db0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee820020"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee8201b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee820340"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee8204d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee820660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee8207f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee820a80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee820c10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee820da0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee81f020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee81f1b0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee81f340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee81f4d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee81f660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee81f7f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee81f980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee81fb10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee81fca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee81e220"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee81e3b0"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee81e540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee81e6d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee81e860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee81e9f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee81eb80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee81ed10"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee81d020"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee81d1b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee81d340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee81d4d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee81d660"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee81d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f18ee82c060" loc="44:../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f18ee82c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7f18ee82c3e0"/>
        <function-ref name="init" scoped="" ref="0x7f18ee82c570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel0" ref="0x7f18ee82bd90" loc="47:../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel0" scoped="" ref="0x7f18ee82bd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f18ee82a180"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f18ee82a310"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f18ee82a4a0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f18ee82a630"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f18ee82a7c0"/>
        <function-ref name="getState" scoped="" ref="0x7f18ee82a950"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f18ee82aae0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f18ee82ac70"/>
        <function-ref name="getDestination" scoped="" ref="0x7f18ee82ae00"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f18ee829020"/>
        <function-ref name="aborted" scoped="" ref="0x7f18ee8291b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f18ee829340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f18ee8294d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f18ee829760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f18ee8298f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f18ee829a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f18ee829c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f18ee829da0"/>
        <function-ref name="reset" scoped="" ref="0x7f18ee828020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f18ee8281b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f18ee828340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f18ee8284d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f18ee828660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f18ee8287f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f18ee828980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f18ee828d10"/>
        <function-ref name="getSource" scoped="" ref="0x7f18ee827020"/>
        <function-ref name="getSize" scoped="" ref="0x7f18ee8271b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f18ee827340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f18ee8274d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f18ee827660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f18ee8277f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f18ee827980"/>
        <function-ref name="setSize" scoped="" ref="0x7f18ee827b10"/>
        <function-ref name="setState" scoped="" ref="0x7f18ee827ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f18ee827e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f18ee826020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f18ee8261b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f18ee826340"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f18efa24730" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f18efa25270" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f18ef9dfb40" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f18ef9e2de0" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f18ef9df420" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f18ef9e2700" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f18ef9e15a0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f18ef9e5900" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f18ef9e2020" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f18ef9e1cc0" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f18efd67020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f18f00a93a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f18ef98e500" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f18ef98e280" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f18ef9939c0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f18ef9d75a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f18ef9d6020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f18ef98ed70" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f18ef98cc80" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f18ef98fb00" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f18ef98c4f0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f18ef990190" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f18ef990920" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f18ef98f390" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f18ef9d75a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f18ef9d6020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f18ef98f110" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f18ef9d75a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f18ef9d6020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f18ef980740" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f18ef97ed80" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f18ef97eb00" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f18ef97c9d0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f18ef97c750" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f18ef97e350" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f18ef97fa40" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f18ef97f120" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f18ef980e70" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f18ef989890" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f18ef9862a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f18ef986020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f18ef986c80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f18ef986a00" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f18ef9856a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f18ef985420" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f18ef985d90" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f18ef996120" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f18ef995a10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f18ef995790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f18ef996850" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f18ef99a350" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f18ef995020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f18ef999270" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f18ef9989e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f18ef99aae0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f18ef999980" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f18ef9982e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f18ef998060" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f18ef994450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f18ef9941d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f18ef9571f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f18efab97f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f18efab6020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f18efab9020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f18eff41810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f18f0168020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f18f0167020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f18f0168790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f18f015c270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f18f015cac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f18ef841020" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f18ef843690" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f18ef843a10" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef843d40" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f18ef83d660" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef83d060" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef83d390" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f18ef83c790" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f18ef840390" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef840110" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f18ef83f8b0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef83f2d0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f18ef83f620" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f18ef838020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef845c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f18ef837110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef838e10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f18ef833490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef834e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef8331c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f18ef834560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f18ef8365e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef836020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef836350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f18ef823d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f18efa41930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef823ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f18ef82da10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef82d790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f18ef844e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f18ef82f950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef82f6d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f18ef82a3a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef82ed70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f18ef82a110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f18ef82ce50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef82c870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f18ef82cbc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f18efa41d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f18ef827810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef827590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f18ef825b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef8255e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f18ef825900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f18efa41550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f18ef829600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef829380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f18ef8212f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f18efa41930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f18ef824cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f18ef821060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f18efa41930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f18ef820190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f18efa41930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f18ef81dad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef81d850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f18ef81bcd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef81ba50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f18ef819020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef81cce0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f18ef8135e0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef813020" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef813350" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f18ef80ebb0" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef80e5b0" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef80e8e0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f18ef810d20" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f18ef811900" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef811680" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f18ef80fe00" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef80f820" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f18ef80fb70" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f18ef7a2ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f18ef7a2830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f18ef7a0020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f18ef7a1d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f18ef7a5d60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f18ef7a1350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f18ef79c410" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
              <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef79fa80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f18ef79fdd0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef79c130" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f18ef792270" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f18ef792a20" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f18ef791270" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f18ef7901f0" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f18ef78e940" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f18ef78d190" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f18ef791a00" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f18ef78dd00" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f18ef78da80" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f18ef793a60" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f18ef7909d0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f18ef78e190" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f18ef724020" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef725960" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f18ef725ce0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f18ef727020" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f18ef725020" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f18ef7278b0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f18efa31720"/>
                <typename><typedef-ref name="message_t" ref="0x7f18efa30d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f18ef727c20" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f18ef70aa40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f18ef707270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f18ef705070" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f18ef7098e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f18ef71ab20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f18ef70e020" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f18ef70dc20" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18ef70d9a0" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f18ef70e8a0" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f18ef70f6d0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18ef70f450" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f18ef70c4b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f18ef70d190" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f18ef7170e0" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f18ef717a10" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f18ef719720" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f18ef7194a0" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f18ef7165c0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f18ef716340" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f18ef7147a0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f18ef713400" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18ef713180" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f18ef711020" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f18ef713c50" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f18ef5dfdd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f18ef5df800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef5dfb40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f18ef5d8ac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f18ef5d8840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f18ef5d7930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f18ef5d7360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef5d76a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f18ef5d9740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f18ef5d62c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f18ef5d5920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef5d5c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f18ef5d6020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f18ef5d8070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f18ef5db720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f18ef5dcdb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18ef5db130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f18ef5db480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f18ef5b45b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f18ef5b4330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f18ef5b4df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f18ef5b3cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f18ef5b3700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f18ef5b3a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f18ef5b1b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f18ef55eae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f18ef5574e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f18ef554890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f18ef57de70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f18ef57c2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f18ef55b350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f18ef55c350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f18ef55f980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f18ef55cb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f18ef55bdb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f18ef54c020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f18ef54d750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f18ef545d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18ef545af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f18ef545350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f18ef51c390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f18ef527020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f18ef537de0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5acc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f18ef5ab4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f18ef537b60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5acc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f18ef5ab4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f18ef52a020" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f18ef5312a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5a7c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f18ef5a64f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f18ef531020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5a7c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f18ef5a64f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f18ef521750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f18ef51ecf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f18ef533830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5aab60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f18ef5a8390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f18ef531a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5a7c30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f18ef5a64f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f18ef52e830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f18ef52e5b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f18ef52fe40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f18ef521020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f18ef533040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5aab60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f18ef5a8390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f18ef534da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5aab60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f18ef5a8390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f18ef530c80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f18ef521e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f18ef52f690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f18ef52f410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f18ef52b0e0" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f18ef52b860" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f18ef522070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f18ef525020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f18ef529020" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f18ef5227b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f18ef527800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f18ef5205c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f18ef52c070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18ef5b5320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f18ef5ad320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f18ef520d60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f18ef51dbd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f18ef5304d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f18ef530250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f18ef51cd30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18ef51cab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f18ef534600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ef5acc50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f18ef5ab4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f18ef52a790" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f18ef526020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f18ef524800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f18ef57de70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f18ef57c2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f18ef524580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f18ef57de70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f18ef57c2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f18ef525af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f18ef58f020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f18ef58f440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f18ef525870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f18ef58f020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f18ef58f440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f18ef51b730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f18ef51e570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f18ef52c820" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f18ef51d480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f18ef526790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f18ef529800" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18ef516ce0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18ef516ce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f18ef513020" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18ef513020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f18ef513940" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18ef513020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f18ef512a50" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f18ef5121f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f18ef5111f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f18ef49d930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f18ef45fa50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f18ef45e1f0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f18ef45ab10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f18ef45a890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f18ef4602d0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f18ef45c0e0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f18ef459490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f18ef45e930" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f18ef45f2b0" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f18ef45b7c0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f18ef460a70" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f18ef462420" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f18ef45c860" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f18ef45a020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f18ef45b070" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f18ef462b50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f18ef473780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f18ef486c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f18ef479020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f18ef47aca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f18ef48d390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f18ef4767a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f18ef47e020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f18ef487da0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f18ef484b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f18ef488d40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f18ef488ac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f18ef489270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f18ef482900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f18ef478020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f18ef473020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f18ef47a560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f18ef46e1f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f18ef46a880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f18ef48c270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f18ef482190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f18ef481a90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f18ef487650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f18ef48f190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f18ef47bd40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f18ef47bac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f18ef4939f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f18ef476020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f18ef471020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f18ef46c9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f18ef46a120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f18ef475790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f18ef471750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f18ef4797b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f18ef46f1f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f18ef48c990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f18ef47d1f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f18ef470630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f18ef474790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f18ef47f760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f18ef47f4e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f18ef46b190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f18ef47b390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f18ef475020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f18ef48fc10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f18ef569b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f18ef567020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f18ef48f990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f18ef569b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f18ef567020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f18ef483a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f18ef48ba80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f18ef48b800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f18ef4812a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18ef481020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f18ef46f9c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f18ef4883b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f18ef48b120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f18ef47dbb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f18ef47d930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f18ef48dac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f18ef471e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f18ef474020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f18ef478790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f18ef47e9f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f18ef47e770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f18ef4832b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f18ef486530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f18ef46b900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f18ef489bf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f18ef489970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f18ef46e9b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f18ef484420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f18ef46c1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f18ef196730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f18ef196e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f18ef198880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f18ef195cf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f18ef196020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f18ef1955b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f18ef19ba90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f18ef198190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f18ef13b020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f18ef13b880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f18ef106e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f18ef104020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f18ef106570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f18ef1056d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f18ef104950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f18ef0f8020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f18ef0ff090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f18ef0fad20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f18ef0ff090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f18ef0fb020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f18ef0fbb20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f18ef0ff090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f18ef0fb8a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f18ef0ff090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f18ef0fa470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f18ef0ff090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f18eef8fad0" loc="43:../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f18eef8fad0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f18eef8a270" loc="80:../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f18eef8fad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f18eef88cb0" loc="97:../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f18eef8fad0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f18eef88a30" loc="97:../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f18eef8fad0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f18f0b48c30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7f18f0b48c30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f18eef86c70" loc="108:../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f18eef8fad0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f18eef869f0" loc="108:../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f18eef8cb20" loc="57:../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f18eef8bad0" loc="72:../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f18eef8ae50" loc="88:../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f18eef8fad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f18eef8c3b0" loc="50:../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f18eef8b2d0" loc="65:../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f18eef64dd0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f18eef64b50" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18eef256a0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18eef256a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f18eef13420" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f18eef18d60" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f18eef16b10" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f18eef16540" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f18eef16880" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f18eef17d60" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f18eef12460" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f18eef13bb0" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f18eef17570" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f18eef192a0" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f18eef19020" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f18eef14aa0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f18eef144d0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f18eef14810" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f18eef19d60" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f18eef19ae0" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f18eef18650" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430DmaChannel" loc="41:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
      <function command="" provided="0" name="stopTransfer" ref="0x7f18eeecc7f0" loc="102:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="99:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Stop a DMA transfer in progress&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="repeatTransfer" ref="0x7f18eeecd630" loc="91:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="86:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Repeat a DMA transfer using previous settings but new pointers&#10; and transfer size.</short>
          <long>&#10; Repeat a DMA transfer using previous settings but new pointers&#10; and transfer size.  Automatically starts the transfer (sets the&#10; enable bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src_addr" ref="0x7f18eeecfc20" loc="91:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dst_addr" ref="0x7f18eeecd020" loc="91:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f18eeecd390" loc="92:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setupTransfer" ref="0x7f18eeed1090" loc="49:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="43:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Setup a transfer using explicit argument (most robust and simple&#10; mechanism and recommended for novice users)&#10;&#10; See MSP430DMA.h for parameter options&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedfa70"/>
              <typename><typedef-ref name="dma_transfer_mode_t" ref="0x7f18eeedd740"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeee83f0"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f18eeee5e00"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeeda600"/>
              <typename><typedef-ref name="dma_level_t" ref="0x7f18eeed9090"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedb860"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f18eeeda350"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedb860"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f18eeeda350"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedc700"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f18eeedb5d0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedc700"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f18eeedb5d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="transfer_mode" ref="0x7f18eeed5c50" loc="49:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedfa70"/>
              <typename><typedef-ref name="dma_transfer_mode_t" ref="0x7f18eeedd740"/></typename>
            </type-tag>
          </variable>
          <variable name="trigger" ref="0x7f18eeed4060" loc="50:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeee83f0"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f18eeee5e00"/></typename>
            </type-tag>
          </variable>
          <variable name="level" ref="0x7f18eeed43f0" loc="51:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeeda600"/>
              <typename><typedef-ref name="dma_level_t" ref="0x7f18eeed9090"/></typename>
            </type-tag>
          </variable>
          <variable name="src_addr" ref="0x7f18eeed4770" loc="52:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dst_addr" ref="0x7f18eeed4af0" loc="53:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f18eeed4e60" loc="54:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="src_byte" ref="0x7f18eeed2240" loc="55:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedb860"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f18eeeda350"/></typename>
            </type-tag>
          </variable>
          <variable name="dst_byte" ref="0x7f18eeed25f0" loc="56:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedb860"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f18eeeda350"/></typename>
            </type-tag>
          </variable>
          <variable name="src_incr" ref="0x7f18eeed29a0" loc="57:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedc700"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f18eeedb5d0"/></typename>
            </type-tag>
          </variable>
          <variable name="dst_incr" ref="0x7f18eeed2d50" loc="58:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeedc700"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f18eeedb5d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startTransfer" ref="0x7f18eeecf3e0" loc="84:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="80:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Enable the DMA module.</short>
          <long>&#10; Enable the DMA module.  Equivalent to setting the DMA enable bit.&#10; This function does not force a transfer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setupTransferRaw" ref="0x7f18eeed0900" loc="77:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="60:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Raw interface for setting up a DMA transfer.</short>
          <long>&#10; Raw interface for setting up a DMA transfer.  This function is&#10; intended to provide as much raw performance as possible but&#10; sacrifices type checking in the process.  Recommended ONLY for&#10; advanced users that have very intricate knowledge of the MSP430&#10; DMA module described in the user's guide.&#10;&#10; @param state The control register value, as specified by &#10;              dma_control_state_t in MSP430DMA.h&#10; @param trigger The trigger for the DMA transfer.  Should be one&#10;                of the options from dma_trigger_t in MSP430DMA.h&#10; @param src Pointer to the source address&#10; @param dest Pointer to the destination address&#10; @param size Size of the DMA transfer&#10;&#10; See MSP430DMA.h for parameter options&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x7f18eeed18b0" loc="77:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="trigger" ref="0x7f18eeed1c20" loc="77:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="src" ref="0x7f18eeed0020" loc="78:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7f18eeed0350" loc="78:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f18eeed0640" loc="78:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="transferDone" ref="0x7f18eeecb2a0" loc="107:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="104:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Notification that the transfer has completed&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7f18eeecb020" loc="107:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="softwareTrigger" ref="0x7f18eeecc020" loc="97:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="94:../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Trigger a DMA transfer using software&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Bluetooth" loc="47:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
      <documentation loc="34:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <short>&#10; </short>
        <long>&#10; @author Steve Ayer&#10; @author Adrian Burns&#10; @date February, 2007&#10;&#10; @author Mike Healy&#10; @date April 20, 2009 - ported to TinyOS 2.x &#10;</long>
      </documentation>
      <function command="" provided="0" name="resetDefaults" ref="0x7f18eeef3350" loc="90:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBaudrate" ref="0x7f18eeef5810" loc="84:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="new_baud" ref="0x7f18eeef5590" loc="84:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDiscoverable" ref="0x7f18eeefd590" loc="66:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="disc" ref="0x7f18eeefd310" loc="66:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="commandModeEnded" ref="0x7f18eeef0020" loc="95:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataAvailable" ref="0x7f18eeef09e0" loc="103:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f18eeef0760" loc="103:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="connectionClosed" ref="0x7f18eeef1740" loc="94:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reason" ref="0x7f18eeef14c0" loc="94:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setName" ref="0x7f18eeefb2e0" loc="69:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7f18eeefb060" loc="69:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setServiceName" ref="0x7f18eeef8020" loc="72:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7f18eeef9c80" loc="72:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRawBaudrate" ref="0x7f18eeef7e40" loc="78:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="rate_factor" ref="0x7f18eeef7bc0" loc="78:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPagingTime" ref="0x7f18eeef42a0" loc="88:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="hexval_time" ref="0x7f18eeef4020" loc="88:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f18eeeef0e0" loc="104:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInquiryTime" ref="0x7f18eeef4c30" loc="89:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="hexval_time" ref="0x7f18eeef49b0" loc="89:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="connect" ref="0x7f18eeeff2a0" loc="61:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f18eeeff020" loc="61:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="connectionMade" ref="0x7f18eeef3d20" loc="93:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="status" ref="0x7f18eeef3aa0" loc="93:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAuthentication" ref="0x7f18eeefc980" loc="68:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="auth" ref="0x7f18eeefc700" loc="68:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setServiceClass" ref="0x7f18eeef95b0" loc="71:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="class" ref="0x7f18eeef9330" loc="71:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f18eef01770" loc="51:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f18eef011b0" loc="51:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f18eef014e0" loc="51:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="discoverDevices" ref="0x7f18eef00770" loc="58:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRadioMode" ref="0x7f18eeeffc10" loc="64:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f18eeeff990" loc="64:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPIN" ref="0x7f18eeefbbe0" loc="70:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7f18eeefb960" loc="70:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEncryption" ref="0x7f18eeefc020" loc="67:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enc" ref="0x7f18eeefdc40" loc="67:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRemoteConfig" ref="0x7f18eeef7490" loc="74:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="disableConfig" ref="0x7f18eeef7210" loc="74:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDeviceClass" ref="0x7f18eeef8980" loc="73:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="class" ref="0x7f18eeef8700" loc="73:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disconnect" ref="0x7f18eef00020" loc="54:../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Mma_Accel" loc="40:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
      <function command="" provided="0" name="setSensitivity" ref="0x7f18eef05a90" loc="54:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
        <documentation loc="49:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
          <short>&#10; Sets the sensitivity (gain) of the sensors.</short>
          <long>&#10; Sets the sensitivity (gain) of the sensors.&#10;&#10; @param sensitivity the sensitivity (gain)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Mma_Accel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sensitivity" ref="0x7f18eef05810" loc="54:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wake" ref="0x7f18eef05020" loc="47:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
        <documentation loc="42:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
          <short>&#10; Turns the accelerometer on or off.</short>
          <long>&#10; Turns the accelerometer on or off.&#10;&#10; @param wakeup if &#60;code>TRUE&#60;/code> turns it on; if &#60;code>FALSE&#60;/code> turns it off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Mma_Accel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="wakeup" ref="0x7f18eef09cc0" loc="47:../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="shimmerAnalogSetup" loc="43:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
      <function command="" provided="0" name="addAccelInputs" ref="0x7f18eef24120" loc="46:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerConversion" ref="0x7f18eef1e020" loc="79:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNumberOfChannels" ref="0x7f18eef1d020" loc="83:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addECGInputs" ref="0x7f18eef23020" loc="52:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addAnExInput" ref="0x7f18eef20020" loc="64:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f18eef22c60" loc="64:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f18eef20e50" loc="70:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addEMGInput" ref="0x7f18eef22550" loc="61:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addStrainGaugeInputs" ref="0x7f18eef20780" loc="67:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addGSRInput" ref="0x7f18eef23e20" loc="58:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="finishADCSetup" ref="0x7f18eef1f870" loc="77:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f18eef1f5f0" loc="77:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="addUVInputs" ref="0x7f18eef23720" loc="55:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addGyroInputs" ref="0x7f18eef24840" loc="49:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7f18eef1e720" loc="81:../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18eee86c40" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18eee86c40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f18eee825a0" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f18f0b42920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f18eee7d5d0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f18eee7d5d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f18eee7d810" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f18eee78390" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f18eee7a3b0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f18eee799d0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f18eee79400" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f18eee79740" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f18eee7ab90" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f18eee78b80" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f18eee7b390" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f18eee7b110" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f18eee7d810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f18eee7bbc0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="37:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f18eec64020" loc="52:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f18eec63ac0" loc="72:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f18eec667c0" loc="47:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f18eec632a0" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f18eec63020" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f18eec66020" loc="42:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f18eec64820" loc="59:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port.</short>
          <long> &#10; Gets the current value of the input voltage of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f18eeab37b0" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f18eeab2030" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430DmaControl" loc="40:../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFlags" ref="0x7f18ee9fb2c0" loc="42:../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
        <interfacedef-ref qname="Msp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enable_nmi" ref="0x7f18ee9fc900" loc="42:../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
          <variable name="round_robin" ref="0x7f18ee9fcc60" loc="42:../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
          <variable name="on_fetch" ref="0x7f18ee9fb020" loc="43:../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x7f18ee9fc1f0" loc="41:../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
        <interfacedef-ref qname="Msp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <function command="" provided="0" name="getCtl0" ref="0x7f18ee9de560" loc="63:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ee9e4ce0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7f18ee9e37a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7f18ee9db6c0" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ee9f4190"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7f18ee9f4660"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f18ee9db440" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7f18ee9d9d90" loc="106:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7f18ee9d6020" loc="118:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7f18ee9d77d0" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7f18ee9d7550" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7f18ee9ded80" loc="68:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ee9e1e20"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7f18ee9e0770"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7f18ee9dcb70" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ee9f4190"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f18ee9f4660"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f18ee9dc520" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7f18ee9dc8e0" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f18ee9f4190"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f18ee9f4660"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7f18ee9d50e0" loc="128:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7f18ee9df2a0" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ee9e4ce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f18ee9e37a0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7f18ee9df020" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ee9e4ce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f18ee9e37a0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7f18ee9da2a0" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f18ee9da020" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f18f0b42160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7f18ee9dad20" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f18ee9daaa0" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7f18ee9d95d0" loc="101:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7f18ee9d67e0" loc="123:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7f18ee9d5880" loc="133:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7f18ee9dfd00" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ee9e1e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f18ee9e0770"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7f18ee9dfa80" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f18ee9e1e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f18ee9e0770"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaChannel" loc="38:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
      <documentation loc="33:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableDMA" ref="0x7f18ee936e50" loc="61:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearTrigger" ref="0x7f18ee9414a0" loc="40:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstDecrement" ref="0x7f18ee93b770" loc="51:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLevelSensitive" ref="0x7f18ee936020" loc="58:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcIncrement" ref="0x7f18ee93c830" loc="49:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getState" ref="0x7f18ee92cab0" loc="77:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7f18eeed9420"/>
            <typename><typedef-ref name="dma_channel_state_t" ref="0x7f18eeed52e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordToWord" ref="0x7f18ee93a760" loc="53:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTrigger" ref="0x7f18ee94ad50" loc="39:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeee83f0"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f18eeee5e00"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="trigger" ref="0x7f18ee94aad0" loc="39:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f18eeee83f0"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f18eeee5e00"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestination" ref="0x7f18ee92a9b0" loc="79:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedBlockMode" ref="0x7f18ee93f9f0" loc="45:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="aborted" ref="0x7f18ee933e40" loc="68:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setByteToByte" ref="0x7f18ee937020" loc="56:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f18ee9355e0" loc="63:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterrupt" ref="0x7f18ee935d40" loc="64:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="interruptPending" ref="0x7f18ee933510" loc="66:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f18f016c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStateRaw" ref="0x7f18ee92c2e0" loc="76:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x7f18ee92d270" loc="76:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="trigger" ref="0x7f18ee92d5e0" loc="76:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
          <variable name="src" ref="0x7f18ee92d900" loc="76:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7f18ee92dc30" loc="76:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f18ee92c020" loc="76:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTrigger" ref="0x7f18ee929990" loc="81:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7f18eeee3200"/>
            <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7f18eeee3d50"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstIncrement" ref="0x7f18ee93a020" loc="52:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f18ee9280e0" loc="83:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSingleMode" ref="0x7f18ee941be0" loc="41:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerDMA" ref="0x7f18ee9325b0" loc="69:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setByteToWord" ref="0x7f18ee938020" loc="54:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrc" ref="0x7f18ee931020" loc="71:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="saddr" ref="0x7f18ee932c80" loc="71:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedSingleMode" ref="0x7f18ee93f270" loc="44:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcNoIncrement" ref="0x7f18ee93e950" loc="47:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBurstMode" ref="0x7f18ee940a80" loc="43:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSource" ref="0x7f18ee92a230" loc="78:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSize" ref="0x7f18ee929190" loc="80:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcDecrement" ref="0x7f18ee93c0e0" loc="48:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="transferDone" ref="0x7f18ee928a90" loc="85:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7f18ee928810" loc="85:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f18f0163c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableDMA" ref="0x7f18ee936730" loc="60:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedBurstMode" ref="0x7f18ee93e1f0" loc="46:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBlockMode" ref="0x7f18ee940350" loc="42:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSize" ref="0x7f18ee930350" loc="73:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sz" ref="0x7f18ee9300d0" loc="73:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setState" ref="0x7f18ee92eaf0" loc="75:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7f18eeed9420"/>
              <typename><typedef-ref name="dma_channel_state_t" ref="0x7f18eeed52e0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7f18eeee3200"/>
              <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7f18eeee3d50"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7f18ee930a90" loc="75:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7f18eeed9420"/>
              <typename><typedef-ref name="dma_channel_state_t" ref="0x7f18eeed52e0"/></typename>
            </type-tag>
          </variable>
          <variable name="t" ref="0x7f18ee930e40" loc="75:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7f18eeee3200"/>
              <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7f18eeee3d50"/></typename>
            </type-tag>
          </variable>
          <variable name="src" ref="0x7f18ee92e1b0" loc="75:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7f18ee92e4e0" loc="75:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f18ee92e830" loc="75:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f18f0b42520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstNoIncrement" ref="0x7f18ee93b020" loc="50:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdgeSensitive" ref="0x7f18ee937780" loc="57:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordToByte" ref="0x7f18ee938760" loc="55:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDst" ref="0x7f18ee931970" loc="72:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="daddr" ref="0x7f18ee9316f0" loc="72:../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaControl" loc="40:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
      <documentation loc="34:../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearENNMI" ref="0x7f18ee946020" loc="47:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoundRobin" ref="0x7f18ee9499b0" loc="44:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOnFetch" ref="0x7f18ee949270" loc="43:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setENNMI" ref="0x7f18ee947830" loc="46:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getState" ref="0x7f18ee945190" loc="49:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7f18eeee1c30"/>
            <typename><typedef-ref name="dma_state_t" ref="0x7f18eeee0e40"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f18ee945880" loc="50:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOnFetch" ref="0x7f18ee94cae0" loc="42:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setState" ref="0x7f18ee946990" loc="48:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7f18eeee1c30"/>
              <typename><typedef-ref name="dma_state_t" ref="0x7f18eeee0e40"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7f18ee946710" loc="48:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7f18eeee1c30"/>
              <typename><typedef-ref name="dma_state_t" ref="0x7f18eeee0e40"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearRoundRobin" ref="0x7f18ee947120" loc="45:../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaInterrupt" loc="38:../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
      <documentation loc="33:../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f18ee9143b0" loc="39:../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
