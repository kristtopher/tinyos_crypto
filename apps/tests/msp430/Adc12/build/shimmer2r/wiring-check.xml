<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="55:TestAdcAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f771f0f5b10"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f771f35d330"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f771f35d330"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f771f35bbc0"/></to>
    </wire>
    <wire loc="61:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771f09e6b0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></to>
    </wire>
    <wire loc="72:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f376590"/></to>
    </wire>
    <wire loc="62:TestAdcAppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771f09ec80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771eede1d0"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771eede1d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:TestAdcAppC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f771f09d970"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771eedede0"/></to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771eedede0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:TestAdcAppC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Notify" scoped="" ref="0x7f771f09aca0"/></to>
    </wire>
    <wire loc="70:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771eed6250"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></to>
    </wire>
    <wire loc="71:TestAdcAppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771eed6820"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771ec397a0"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771ec397a0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f771eebea10"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:TestAdcAppC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f771eed55d0"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ec38400"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ec38400"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:TestAdcAppC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Notify" scoped="" ref="0x7f771eed2900"/></to>
    </wire>
    <wire loc="74:TestAdcAppC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ec36660"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f771eed4790"/></to>
    </wire>
    <wire loc="80:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771ec2e020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></to>
    </wire>
    <wire loc="81:TestAdcAppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771ec2e5f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771ea51360"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771ea51360"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:TestAdcAppC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f771ec2d2b0"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ea50020"/></to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ea50020"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771eaa2b70"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:TestAdcAppC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Notify" scoped="" ref="0x7f771ec2b5e0"/></to>
    </wire>
    <wire loc="89:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771ea4a990"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></to>
    </wire>
    <wire loc="90:TestAdcAppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771ea49020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771ea2d670"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771ea2d670"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f771eebea10"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:TestAdcAppC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f771ea49c70"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ea2c400"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ea2c400"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771eaa2b70"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:TestAdcAppC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Notify" scoped="" ref="0x7f771ea45020"/></to>
    </wire>
    <wire loc="93:TestAdcAppC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ea2ad40"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ea48dd0"/></to>
    </wire>
    <wire loc="100:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771e9fa990"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></to>
    </wire>
    <wire loc="101:TestAdcAppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771e9f9020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771e9f0a50"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771e9f0a50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="102:TestAdcAppC.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7f771e9f9c70"/></from>
      <to><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771e9ee720"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771e9ee720"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f771f0814d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="103:TestAdcAppC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Notify" scoped="" ref="0x7f771e9f7710"/></to>
    </wire>
    <wire loc="110:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f771e9e7530"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></to>
    </wire>
    <wire loc="111:TestAdcAppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771e9e7b00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771e9dd4b0"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771e9dd4b0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f771eebea10"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="112:TestAdcAppC.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7f771e9e5770"/></from>
      <to><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771e9db060"/></to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771e9db060"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f771f0814d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="113:TestAdcAppC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Notify" scoped="" ref="0x7f771e9e4220"/></to>
    </wire>
    <wire loc="114:TestAdcAppC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f771e9da2c0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f771e9e3d60"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f53fa10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771ee02e50"/></to>
    </wire>
    <wire loc="96:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f53fa10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771e4d6b40"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f53fa10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f07a660"/></to>
    </wire>
    <wire loc="67:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f771f376c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f771fbb93a0"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f771fbb93a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f771f591c30"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f771f3756c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f5429e0"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f771f5429e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f53d810"/></to>
    </wire>
    <wire loc="71:../../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f375dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f53fa10"/></to>
    </wire>
    <wire loc="47:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f771f53a020"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f771f53b910"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f771f53b910"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f50d850"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f771f53a700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f53c640"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f771f53ade0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f332600"/></to>
    </wire>
    <wire loc="46:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f771f50d850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f4f53c0"/></to>
    </wire>
    <wire loc="47:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f771f505de0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f771f4f5a70"/></to>
    </wire>
    <wire loc="48:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f771f83a4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f771f4f3cc0"/></to>
    </wire>
    <wire loc="113:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f771f4b0a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3ed6d0"/></to>
    </wire>
    <wire loc="126:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f771f49d410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3e5b30"/></to>
    </wire>
    <wire loc="108:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f771f4a7d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3f2160"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f771f489020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3cccb0"/></to>
    </wire>
    <wire loc="107:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f771f4ac020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3f3480"/></to>
    </wire>
    <wire loc="148:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f771f491570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3cc020"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f771f486020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3b5cb0"/></to>
    </wire>
    <wire loc="154:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f771f498a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3c6220"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f771f4b8020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f4439d0"/></to>
    </wire>
    <wire loc="135:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f771f48c020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3db2f0"/></to>
    </wire>
    <wire loc="134:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f771f493890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3dc610"/></to>
    </wire>
    <wire loc="133:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f771f49c8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3dd220"/></to>
    </wire>
    <wire loc="115:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f771f4a5c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3eb7a0"/></to>
    </wire>
    <wire loc="156:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f771f488020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3c32f0"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f771f49a020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3d66d0"/></to>
    </wire>
    <wire loc="114:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f771f4acda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3ecac0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f771f4b97b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f450540"/></to>
    </wire>
    <wire loc="155:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f771f4903e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3c4610"/></to>
    </wire>
    <wire loc="106:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f771f4b75a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3f4020"/></to>
    </wire>
    <wire loc="161:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f771f496020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3be6d0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f771f4a1dc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3fba90"/></to>
    </wire>
    <wire loc="142:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f771f48b020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3d37a0"/></to>
    </wire>
    <wire loc="100:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f771f4ad140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3fcde0"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f771f492700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3d4ac0"/></to>
    </wire>
    <wire loc="163:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f771f487020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3bc7a0"/></to>
    </wire>
    <wire loc="147:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f771f4995a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3ceb30"/></to>
    </wire>
    <wire loc="120:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="162:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f771f48f1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3bdac0"/></to>
    </wire>
    <wire loc="128:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f771f48d020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f771f3e3cb0"/></to>
    </wire>
    <wire loc="169:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f771f48e020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3b5020"/></to>
    </wire>
    <wire loc="127:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f771f494a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f771f3e3020"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f771f4955a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771f3b7b30"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f771f44e450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f44fd80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f771f44eaa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f771f3afa90"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f771f44d120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f771f3ac260"/></to>
    </wire>
    <wire loc="102:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3fa930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f450540"/></to>
    </wire>
    <wire loc="103:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3f8020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f44fd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3f1020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f450540"/></to>
    </wire>
    <wire loc="110:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3f07a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f44fd80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3ea610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f450540"/></to>
    </wire>
    <wire loc="117:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3e9c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f44fd80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f771f4472f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f771f447940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f771f3ac9f0"/></to>
    </wire>
    <wire loc="123:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f771f446020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f771f3ab240"/></to>
    </wire>
    <wire loc="129:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3e2b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="130:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3e02f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3da160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3d97a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3d2610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="144:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3d1c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3cbb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="151:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3c92f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3c2160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="158:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3c17a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3bb610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3bac50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771f3b3b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></to>
    </wire>
    <wire loc="172:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f771f3b12f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771f590b70"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f771f5892c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f771fbab3b0"/></to>
    </wire>
    <wire loc="54:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f771f332600"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771f35b5c0"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f771f3521d0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f771f35cdb0"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f771f35cdb0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f771f124020"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f771f3584d0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f771f334020"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f771f334020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f771f107b90"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f771f3577f0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f771f333380"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f771f333380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f771f102710"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f771f10a2f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f771f2f4810"/></to>
    </wire>
    <wire loc="471:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f771f2f4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1f2e60"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f771f106de0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f771f2f09a0"/></to>
    </wire>
    <wire loc="473:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f771f2f09a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1e7460"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f771f101930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f771f2ee9a0"/></to>
    </wire>
    <wire loc="474:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f771f2ee9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1e3e00"/></to>
    </wire>
    <wire loc="442:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f771f31d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f251740"/></to>
    </wire>
    <wire loc="455:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f771f309810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f221100"/></to>
    </wire>
    <wire loc="531:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f771f2bfca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f213100"/></to>
    </wire>
    <wire loc="551:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f771f29acb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f188740"/></to>
    </wire>
    <wire loc="532:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f771f2bdcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f20ed10"/></to>
    </wire>
    <wire loc="460:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f771f304810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f218740"/></to>
    </wire>
    <wire loc="486:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f771f2dc9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1b8d10"/></to>
    </wire>
    <wire loc="497:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f771f2cb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f191100"/></to>
    </wire>
    <wire loc="535:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f771f2b7cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f204100"/></to>
    </wire>
    <wire loc="545:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f771f2a6cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1a5740"/></to>
    </wire>
    <wire loc="557:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f771f292cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f183100"/></to>
    </wire>
    <wire loc="445:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f771f317810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f243740"/></to>
    </wire>
    <wire loc="536:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f771f2b5cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f200d10"/></to>
    </wire>
    <wire loc="450:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f771f313810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f23ad10"/></to>
    </wire>
    <wire loc="463:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f771f2fe810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f209740"/></to>
    </wire>
    <wire loc="476:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f771f2ea9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1d9100"/></to>
    </wire>
    <wire loc="489:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f771f2d59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1aad10"/></to>
    </wire>
    <wire loc="500:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f771f2c59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f183100"/></to>
    </wire>
    <wire loc="440:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f771f321810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f25b100"/></to>
    </wire>
    <wire loc="453:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f771f30d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f22bd80"/></to>
    </wire>
    <wire loc="466:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f771f2f8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1fb740"/></to>
    </wire>
    <wire loc="530:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f771f2c1cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f213100"/></to>
    </wire>
    <wire loc="548:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f771f2a0cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f196740"/></to>
    </wire>
    <wire loc="555:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f771f294cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f183100"/></to>
    </wire>
    <wire loc="541:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f771f2adcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1bc100"/></to>
    </wire>
    <wire loc="484:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f771f2e09a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1c1740"/></to>
    </wire>
    <wire loc="495:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f771f2cf9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f19bd10"/></to>
    </wire>
    <wire loc="549:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f771f29ecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f191100"/></to>
    </wire>
    <wire loc="538:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f771f2b3cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1cb100"/></to>
    </wire>
    <wire loc="443:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f771f31b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f24c100"/></to>
    </wire>
    <wire loc="456:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f771f307810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f21dd10"/></to>
    </wire>
    <wire loc="493:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f771f2d39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1a5740"/></to>
    </wire>
    <wire loc="461:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f771f302810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f213100"/></to>
    </wire>
    <wire loc="487:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f771f2da9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1b3740"/></to>
    </wire>
    <wire loc="498:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f771f2c99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f18dd10"/></to>
    </wire>
    <wire loc="540:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f771f2afcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1c1740"/></to>
    </wire>
    <wire loc="438:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f771f323870"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f28bd10"/></to>
    </wire>
    <wire loc="451:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f771f311810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f235740"/></to>
    </wire>
    <wire loc="464:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f771f2fc810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f204100"/></to>
    </wire>
    <wire loc="477:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f771f2e89a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1d5d10"/></to>
    </wire>
    <wire loc="542:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f771f2abcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1fb740"/></to>
    </wire>
    <wire loc="546:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f771f2a4cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f19f100"/></to>
    </wire>
    <wire loc="552:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f771f298cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f183100"/></to>
    </wire>
    <wire loc="482:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f771f2e49a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1cb100"/></to>
    </wire>
    <wire loc="543:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f771f2a9cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1f6100"/></to>
    </wire>
    <wire loc="441:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f771f31f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f256d10"/></to>
    </wire>
    <wire loc="454:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f771f30b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f226740"/></to>
    </wire>
    <wire loc="467:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f771f2f6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1f6100"/></to>
    </wire>
    <wire loc="539:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f771f2b1cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1c7d10"/></to>
    </wire>
    <wire loc="550:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f771f29ccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f18dd10"/></to>
    </wire>
    <wire loc="472:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f771f2f29a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1ed9f0"/></to>
    </wire>
    <wire loc="485:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f771f2de9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1bc100"/></to>
    </wire>
    <wire loc="496:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f771f2cd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f196740"/></to>
    </wire>
    <wire loc="444:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f771f319810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f248d10"/></to>
    </wire>
    <wire loc="494:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f771f2d19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f19f100"/></to>
    </wire>
    <wire loc="449:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f771f315810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f23e100"/></to>
    </wire>
    <wire loc="462:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f771f300810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f20ed10"/></to>
    </wire>
    <wire loc="475:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f771f2ec9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1de740"/></to>
    </wire>
    <wire loc="488:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f771f2d89a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1ae100"/></to>
    </wire>
    <wire loc="499:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f771f2c79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f188740"/></to>
    </wire>
    <wire loc="439:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f771f32d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f260740"/></to>
    </wire>
    <wire loc="452:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f771f30f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f22f100"/></to>
    </wire>
    <wire loc="465:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f771f2fa810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f200d10"/></to>
    </wire>
    <wire loc="478:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f771f2e69a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1d0740"/></to>
    </wire>
    <wire loc="534:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f771f2b9ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f209740"/></to>
    </wire>
    <wire loc="547:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f771f2a2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f19bd10"/></to>
    </wire>
    <wire loc="533:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f771f2bbcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f209740"/></to>
    </wire>
    <wire loc="483:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f771f2e29a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1c7d10"/></to>
    </wire>
    <wire loc="554:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f771f296cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f188740"/></to>
    </wire>
    <wire loc="558:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f771f290cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f1aad10"/></to>
    </wire>
    <wire loc="529:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f771f2c39f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f771f218740"/></to>
    </wire>
    <wire loc="70:TestAdcSingleC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7f771f098e80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:TestAdcSingleC.nc">
      <from><interface-ref name="signalFailure" scoped="" ref="0x7f771f0986a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771eeddd30"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f771f0814d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771eedc650"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7f771f0814d0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f771f077af0"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7f771f07e1d0"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7f771f075910"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f076ab0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f078370"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771eefb520"/></to>
    </wire>
    <wire loc="98:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f771eefb520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771e4d3210"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f771f070b30"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f771eefab20"/></to>
    </wire>
    <wire loc="100:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f771eefab20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f771e4d27a0"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f771f064b80"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f771ef91080"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f771f05e860"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7f771f2d39a0"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f771f05c7d0"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7f771f2d19a0"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f771f05a640"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7f771f2cf9a0"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f771f058540"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7f771f2cd9a0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f771f055540"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7f771f2cb9a0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f771f053540"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7f771f2c99a0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f771f051540"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7f771f2c79a0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f771f04f540"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7f771f2c59a0"/></to>
    </wire>
    <wire loc="74:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f771f06faa0"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f771f4b97b0"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f771f062220"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7f771f4b8020"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f771f0616f0"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7f771f4b75a0"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f771f060b70"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7f771f4ad140"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f771f05f9e0"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7f771f4ac020"/></to>
    </wire>
    <wire loc="99:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f771eefa3a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f771e4d2020"/></to>
    </wire>
    <wire loc="101:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f771e4d10d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f771eef8570"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f771e4d1890"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f771e4d52b0"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f771e4d0480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:TestAdcSingleC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7f771eed0b30"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:TestAdcSingleC.nc">
      <from><interface-ref name="signalFailure" scoped="" ref="0x7f771eed0350"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771ec37400"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f771f0814d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771ec37cf0"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f771eebddf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f771e4762a0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ec36660"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f771eeba410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f771e478020"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7f771eebea10"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f771ee496f0"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f771ee48ad0"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7f771eebddf0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f771ee44920"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f771eeba410"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f771ee47860"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f771eeb5160"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f771ee45540"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f771eeb5d20"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f771eeae270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771ec64370"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771ec64370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f771ee07020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f771ee9e680"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771ec5ed10"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771ec5ed10"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f771ee07020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f771ee99c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771ec57750"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f771ec57750"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f771ee07020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f771eeb48c0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f771ef91080"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7f771ee412a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f771ee07020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f771edfec30"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f771edfec30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771ec85150"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f771ee02e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771ed00020"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f771edf4500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f771ec77790"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f771ed00020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771e462020"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f771ec7f640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f771ecd42f0"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f771eccf850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f771ed00870"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f771ed00870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f771e45ca90"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f771ec76a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f771ed79b50"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f771ed79b50"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f771ed5ccf0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f771e462020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f771e443660"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f771e455210"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f771e462870"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f771e462870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f771e442020"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f771e459e10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f771ed79b50"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771e43f190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f771e44c340"/></to>
    </wire>
    <wire loc="49:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771e44c340"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771e43e770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771e448a80"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771e448a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771e43ca80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f771e446da0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771e446da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f771f49d410"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f771f494a20"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f771f49c8c0"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f771f493890"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f771f49a020"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f771f492700"/></to>
    </wire>
    <wire loc="70:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="71:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f771f4995a0"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f771f491570"/></to>
    </wire>
    <wire loc="74:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f771f498a50"/></to>
    </wire>
    <wire loc="76:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f771f4903e0"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="79:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f771f496020"/></to>
    </wire>
    <wire loc="80:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f771f48f1f0"/></to>
    </wire>
    <wire loc="82:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="83:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f771f4955a0"/></to>
    </wire>
    <wire loc="84:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f771f48e020"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f771ed3f0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f771ed77b70"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f771ed77b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f771ed71b80"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f771ed62c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f771eccb9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f771ec7aa00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:TestAdcSingleC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7f771ec28800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:TestAdcSingleC.nc">
      <from><interface-ref name="signalFailure" scoped="" ref="0x7f771ec28020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771ea4f020"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <from><interface-ref name="SubSingleChannel" scoped="" ref="0x7f771ea9fe50"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <from><interface-ref name="AsyncAdcControl" scoped="" ref="0x7f771ea9c4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7f771f07e1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel2" scoped="" ref="0x7f771ebf6020"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7f771eaded80"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel0" scoped="" ref="0x7f771ebf8b70"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7f771eaee020"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7f771ec04ce0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771ead5cd0"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel1" scoped="" ref="0x7f771ec1cd60"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7f771eae67a0"/></to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7f771eaed020"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7f771ebce930"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel0" scoped="" ref="0x7f771ebce930"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7f771eb39c90"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7f771eae57a0"/></from>
      <to><interface-ref name="Channel1" scoped="" ref="0x7f771ebcb280"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel1" scoped="" ref="0x7f771ebcb280"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7f771eb309b0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7f771eadddb0"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7f771ebc7be0"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel2" scoped="" ref="0x7f771ebc7be0"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7f771eb263f0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplControl" scoped="" ref="0x7f771ead2630"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771ebeb4e0"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7f771ebeb4e0"/></from>
      <to><interface-ref name="DmaControl" scoped="" ref="0x7f771ebbf020"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel0" scoped="" ref="0x7f771ead1a60"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7f771ebce930"/></to>
    </wire>
    <wire loc="74:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel1" scoped="" ref="0x7f771eacc420"/></from>
      <to><interface-ref name="Channel1" scoped="" ref="0x7f771ebcb280"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel2" scoped="" ref="0x7f771eac8d80"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7f771ebc7be0"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7f771eb34610"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f771ebbb380"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7f771eb2b2f0"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f771ebbb380"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7f771eb22c50"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f771ebbb380"/></to>
    </wire>
    <wire loc="40:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAWireC.nc">
      <from><interface-ref name="DMAControl" scoped="" ref="0x7f771eaa1db0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f771ec04ce0"/></to>
    </wire>
    <wire loc="41:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAWireC.nc">
      <from><interface-ref name="DMAChannel" scoped="" ref="0x7f771eaa06c0"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7f771ebf6020"/></to>
    </wire>
    <wire loc="70:TestAdcSingleC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7f771ea432f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:TestAdcSingleC.nc">
      <from><interface-ref name="signalFailure" scoped="" ref="0x7f771ea44a10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771ea2a400"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f771eebddf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f771e288630"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ea2ad40"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f771eeba410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f771e2893c0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="SubSingleChannel" scoped="" ref="0x7f771ea9fe50"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <from><interface-ref name="AsyncAdcControl" scoped="" ref="0x7f771ea9c4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7f771f07e1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:TestAdcMultiC.nc">
      <from><interface-ref name="signalSuccess" scoped="" ref="0x7f771e9f4490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:TestAdcMultiC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7f771e9f2480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:TestAdcMultiC.nc">
      <from><interface-ref name="signalFailure" scoped="" ref="0x7f771e9f4c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771e9ef720"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771e9ed060"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:TestAdcMultiC.nc">
      <from><interface-ref name="signalSuccess" scoped="" ref="0x7f771e9e2e30"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:TestAdcMultiC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7f771e9e0e20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:TestAdcMultiC.nc">
      <from><interface-ref name="signalFailure" scoped="" ref="0x7f771e9e0640"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771e9dc0f0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771e9db950"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f771eebddf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f771e245300"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f771e9da2c0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f771eeba410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f771e2460a0"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../../tos/system/MainC.nc">
      <documentation loc="45:../../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="EvaluatorC" loc="44:EvaluatorC.nc">
      <documentation loc="36:EvaluatorC.nc">
        <short>&#10; Checks whether all clients signalled Notify.notify(TRUE) and&#10; only then switches all three LEDs on.</short>
        <long>&#10; Checks whether all clients signalled Notify.notify(TRUE) and&#10; only then switches all three LEDs on. Displays on LEDs (binary)&#10; the ID of the first unsuccessful client otherwise.&#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestAdcAppC.TestSingle0" loc="41(TestAdcAppC.TestSingle0):TestAdcSingleC.nc">
      <documentation loc="36:TestAdcSingleC.nc">
        <short>&#10; Testing SingleChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing SingleChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TestAdcSingleC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Wrapper0" loc="45(TestAdcAppC.Wrapper0):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  &#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.TestSingle1" loc="41(TestAdcAppC.TestSingle1):TestAdcSingleC.nc">
      <documentation loc="36:TestAdcSingleC.nc">
        <short>&#10; Testing SingleChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing SingleChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TestAdcSingleC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Wrapper1" loc="43(TestAdcAppC.Wrapper1):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Wrapper1.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.Wrapper1.Msp430Adc12ConfAlertC):../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.TestSingle2" loc="41(TestAdcAppC.TestSingle2):TestAdcSingleC.nc">
      <documentation loc="36:TestAdcSingleC.nc">
        <short>&#10; Testing SingleChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing SingleChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TestAdcSingleC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Wrapper2" loc="46(TestAdcAppC.Wrapper2):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  ADC&#10; conversion results are copied using DMA.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoDMAC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430DmaC" loc="46:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
        <short>&#10; Implementation of the HAL level component for the MSP430 DMA module.</short>
        <long>&#10; Implementation of the HAL level component for the MSP430 DMA module.&#10; This configuration provides the available DMA channels through the&#10; MSP430DMA parameterized interface.  If more channels are requested&#10; than available through unique(&#34;DMA&#34;), there will be no mapping for&#10; that channel and compilation will fail.&#10;&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaC" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaP" loc="41:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma0" loc="42(HplMsp430DmaC.Dma0):../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:480">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:482">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:484">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:486">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:15">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma1" loc="42(HplMsp430DmaC.Dma1):../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:488">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:490">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:492">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:494">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:240">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma2" loc="42(HplMsp430DmaC.Dma2):../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:496">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:498">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:500">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:502">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3840">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:8">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel0P" loc="42(Msp430DmaC.Channel0P):../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel1P" loc="42(Msp430DmaC.Channel1P):../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel2P" loc="42(Msp430DmaC.Channel2P):../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaControlP" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12DMAP" loc="38:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAP.nc" safe="">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestAdcAppC.TestSingle3" loc="41(TestAdcAppC.TestSingle3):TestAdcSingleC.nc">
      <documentation loc="36:TestAdcSingleC.nc">
        <short>&#10; Testing SingleChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing SingleChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TestAdcSingleC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Wrapper3" loc="45(TestAdcAppC.Wrapper3):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <documentation loc="34:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  ADC&#10; conversion results are copied using DMA and reference voltage is enabled as&#10; required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoDMA_RVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Wrapper3.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.Wrapper3.Msp430Adc12ConfAlertC):../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.TestMulti1" loc="41(TestAdcAppC.TestMulti1):TestAdcMultiC.nc">
      <documentation loc="36:TestAdcMultiC.nc">
        <short>&#10; Testing MultiChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing MultiChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TestAdcMultiC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Wrapper4" loc="45(TestAdcAppC.Wrapper4):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  &#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.TestMulti2" loc="41(TestAdcAppC.TestMulti2):TestAdcMultiC.nc">
      <documentation loc="36:TestAdcMultiC.nc">
        <short>&#10; Testing MultiChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing MultiChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TestAdcMultiC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Wrapper5" loc="43(TestAdcAppC.Wrapper5):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Wrapper5.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.Wrapper5.Msp430Adc12ConfAlertC):../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f771f482970" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f771f482d10" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f771f481110" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f771f481490" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f771f481810" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f771f481b80" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f771f480020" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f771f4803b0" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f771f480780" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f771f445e70" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f771f441270" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f771f28a190" loc="40:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f771f28a540" loc="41:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f771f28a8f0" loc="42:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f771f28aca0" loc="43:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f771f289060" loc="44:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TestAdcSingleC" loc="41:TestAdcSingleC.nc" abstract="" safe="">
      <documentation loc="36:TestAdcSingleC.nc">
        <short>&#10; Testing SingleChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing SingleChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <parameters>
        <constant name="inch" ref="0x7f771f0e24d0" loc="42:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sref" ref="0x7f771f0e2830" loc="43:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="ref2_5v" ref="0x7f771f0e2bb0" loc="44:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="adc12ssel" ref="0x7f771f0df020" loc="45:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="adc12div" ref="0x7f771f0df3b0" loc="46:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sht" ref="0x7f771f0df700" loc="47:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sampcon_ssel" ref="0x7f771f0dfab0" loc="48:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sampcon_id" ref="0x7f771f0dfe70" loc="49:TestAdcSingleC.nc">
          <component-ref qname="TestAdcSingleC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ClientC" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc" abstract="">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  &#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f771ef5a850" loc="83:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f771ef52b40" loc="42:../../../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f771edb13b0" loc="43:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f771edb13b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f771ed72c80" loc="42:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f771ed72c80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f771ed5b570" loc="55:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f771ed5b570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f771ed5bd40" loc="56:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f771ed5bd40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f771ed5a160" loc="57:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f771ed5a160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f771ed5a940" loc="58:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f771ed5a940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f771ed5ad10" loc="59:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f771ed59540" loc="60:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f771ed59540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f771ed7f6d0" loc="52:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f771ed7f6d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f771ed38020" loc="53:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f771ed38020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f771ed38410" loc="54:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f771ed38410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f771ed38bf0" loc="55:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f771ed38bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f771ed36020" loc="56:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771ecfccc0" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771ecfccc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771ecc6230" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771ecc6230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f771ecc6560" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771ec78de0" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771ec78de0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ClientAutoDMAC" loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc" abstract="">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  ADC&#10; conversion results are copied using DMA.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaXP" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="DMAxCTL_addr" ref="0x7f771eba6300" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxSA_addr" ref="0x7f771eba66b0" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxDA_addr" ref="0x7f771eba6a60" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxSZ_addr" ref="0x7f771eba6e10" loc="45:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxTSEL_mask" ref="0x7f771eba5240" loc="46:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxTSEL_shift" ref="0x7f771eba5610" loc="47:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430DmaChannelP" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc" abstract="">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ClientAutoDMA_RVGC" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc" abstract="">
      <documentation loc="34:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.  ADC&#10; conversion results are copied using DMA and reference voltage is enabled as&#10; required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TestAdcMultiC" loc="41:TestAdcMultiC.nc" abstract="" safe="">
      <documentation loc="36:TestAdcMultiC.nc">
        <short>&#10; Testing MultiChannel HAL interface of ADC12 on msp430.</short>
        <long>&#10; Testing MultiChannel HAL interface of ADC12 on msp430. &#10;&#10; Author: Jan Hauer&#10;*</long>
      </documentation>
      <parameters>
        <constant name="inch" ref="0x7f771ea25c10" loc="42:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sref" ref="0x7f771ea22020" loc="43:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="ref2_5v" ref="0x7f771ea223a0" loc="44:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="adc12ssel" ref="0x7f771ea22730" loc="45:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="adc12div" ref="0x7f771ea22ac0" loc="46:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sht" ref="0x7f771ea22e10" loc="47:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sampcon_ssel" ref="0x7f771ea20220" loc="48:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sampcon_id" ref="0x7f771ea205c0" loc="49:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="inch2" ref="0x7f771ea20930" loc="51:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
        <constant name="sref2" ref="0x7f771ea20cc0" loc="52:TestAdcMultiC.nc">
          <component-ref qname="TestAdcMultiC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f771f53fa10" loc="58:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f53fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f53fd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f771f540560" loc="57:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771f540560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771f5408e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f5429e0" loc="40:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f5429e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f542d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f771f53a700" loc="6:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f771f53a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f53aa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f53d810" loc="4:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f53d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f53db90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f771f53a020" loc="5:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f771f53a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f53a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f771f53ade0" loc="7:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f771f53ade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f539180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f53c640" loc="39:../../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f53c640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f53c9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f771f53b910" loc="39:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f771f53b910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f53bc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f771f505de0" loc="40:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f771f505de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f771f509c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f771f509310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f771f5094a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f771f509630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f771f509180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f771f5097c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f771f509950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f771f509ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f50d850" loc="39:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f50d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f50dbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f771f4f5a70" loc="46:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f771f4f5a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f771f4f3980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f771f4f3020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f771f4f31b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f771f4f3340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f771f4f5df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f771f4f34d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f771f4f3660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f771f4f37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f771f4f3cc0" loc="47:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f771f4f3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f771f4f20a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f4f53c0" loc="45:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f4f53c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f4f5740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f771f4b0a50" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f771f4b0a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f4b0dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f4af020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f4af1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f4af340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f4af4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f4af660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f4af7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f4af980"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f4afb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f771f49d410" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f771f49d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f49d790"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f49d920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f49dab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f49dc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f49ddd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f49c020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f49c1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f49c340"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f49c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f771f4a7d10" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f771f4a7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4a50e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f4a5270"/>
        <function-ref name="captured" scoped="" ref="0x7f771f4a5400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f4a5590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4a5720"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f4a58b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f771f489020" loc="68:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f771f489020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4893a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f489530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f4896c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f489850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4899e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f489b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f771f4ac020" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f771f4ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4ac3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f4ac530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f4ac6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f4ac850"/>
        <function-ref name="fired" scoped="" ref="0x7f771f4ac9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f771f491570" loc="61:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f771f491570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4918f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f491a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f491c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f491da0"/>
        <function-ref name="fired" scoped="" ref="0x7f771f490020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f771f486020" loc="71:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f771f486020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4863a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f486530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f4866c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f486850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4869e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f486b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f771f498a50" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f771f498a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f498dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f497020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f4971b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f497340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f4974d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f497660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f4977f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f497980"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f497b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f771f4b8020" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f771f4b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f4b83a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f4b8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f4b86c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f4b8850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f4b89e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f4b8b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f4b8d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f4b7020"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f4b71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f771f48c020" loc="66:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f771f48c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f48c3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f48c530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f48c6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f48c850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f48c9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f48cb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f771f493890" loc="59:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f771f493890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f493c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f493da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f492020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f4921b0"/>
        <function-ref name="fired" scoped="" ref="0x7f771f492340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f771f49c8c0" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f771f49c8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f49cd40"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f49b020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f49b1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f49b340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f49b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f49b660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f49b7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f49b980"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f49bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f771f4a5c70" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f771f4a5c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f49f020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f49f1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f771f49f340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f49f4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f49f660"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f49f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f771f488020" loc="69:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f771f488020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4883a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f488530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f4886c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f488850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4889e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f488b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f771f49a020" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f771f49a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f49a3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f49a530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f49a6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f49a850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f49a9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f49ab70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f49ad00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f499020"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f4991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f771f4acda0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f771f4acda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4a8180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f4a8310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f4a84a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f4a8630"/>
        <function-ref name="fired" scoped="" ref="0x7f771f4a87c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f771f4b97b0" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f771f4b97b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f4b9b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f4b9cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f4b9e50"/>
        <function-ref name="get" scoped="" ref="0x7f771f4c1020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f4c11b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f4c1340"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f4c14d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4c1660"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f4c17f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f4c1980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f4c1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f771f4903e0" loc="62:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f771f4903e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f490760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f4908f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f490a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f490c10"/>
        <function-ref name="fired" scoped="" ref="0x7f771f490da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f771f4b75a0" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f771f4b75a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f4b7920"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f4b7ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f4b7c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f4b7dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f4b0020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f4b01b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f4b0340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f4b04d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f4b0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f771f496020" loc="56:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f771f496020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f4963a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f496530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f4966c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f496850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f4969e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f496b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f496d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f495020"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f4951b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f771f4a1dc0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f771f4a1dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4a7180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f4a7310"/>
        <function-ref name="captured" scoped="" ref="0x7f771f4a74a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f4a7630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4a77c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f4a7950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f771f48b020" loc="67:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f771f48b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f48b3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f48b530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f48b6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f48b850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f48b9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f48bb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f771f4ad140" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f771f4ad140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4ad4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f4ad650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f4ad7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f4ad970"/>
        <function-ref name="fired" scoped="" ref="0x7f771f4adb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f771f492700" loc="60:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f771f492700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f492a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f492c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f492da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f491020"/>
        <function-ref name="fired" scoped="" ref="0x7f771f4911b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f771f487020" loc="70:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f771f487020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f4873a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f487530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f4876c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f487850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f4879e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f487b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f771f4995a0" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f771f4995a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f499920"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f499ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f499c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f499dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f498020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f4981b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f498340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f4984d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f498660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f771f49fb70" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f771f49fb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f49e020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f49e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f49e340"/>
        <function-ref name="get" scoped="" ref="0x7f771f49e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f49e660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f49e7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f49e980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f49eb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f49eca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f49ee30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f49d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f771f48f1f0" loc="63:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f771f48f1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f48f570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f48f700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f48f890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f48fa20"/>
        <function-ref name="fired" scoped="" ref="0x7f771f48fbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f771f48d020" loc="65:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f771f48d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f48d3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f48d530"/>
        <function-ref name="captured" scoped="" ref="0x7f771f48d6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f48d850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f48d9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f48db70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f771f48e020" loc="64:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f771f48e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f48e5a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f48e730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f48e8c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f48ea50"/>
        <function-ref name="fired" scoped="" ref="0x7f771f48ebe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f771f494a20" loc="58:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f771f494a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f494da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f493020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f4931b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f493340"/>
        <function-ref name="fired" scoped="" ref="0x7f771f4934d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f771f4955a0" loc="57:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f771f4955a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f495920"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f495ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f495c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f495dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f494020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f4941b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f494340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f4944d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f494660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f771f44eaa0" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f771f44eaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f44ee20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f771f44e450" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f771f44e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f44e7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f771f44d120" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f771f44d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f44d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f771f44fd80" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f44fd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f44e180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771f450540" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f450540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f4508c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f450a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f450be0"/>
        <function-ref name="get" scoped="" ref="0x7f771f450d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f44f020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f44f1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f44f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f44f4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f44f660"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f44f7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f44f980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f771f447940" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f771f447940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f447cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f771f4472f0" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f771f4472f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f447670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f771f446020" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f771f446020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f4463a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f771f448bf0" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f448bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f447020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771f4493e0" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f4493e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f449760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f4498f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f449a80"/>
        <function-ref name="get" scoped="" ref="0x7f771f449c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f449da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f448020"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f4481b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f448340"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f4484d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f448660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f4487f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3fba90" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3fba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3fbe10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3fa020"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3fa1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3fa340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3fa4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3fa660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f4439d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f4439d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f443d50"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3fc020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3fc1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3fc340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3fc4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3fc660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3fc7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3fc980"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3fcb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3f8020" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3f8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3f83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3fcde0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3fcde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3fb180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3fb310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3fb4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3fb630"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3fb7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3fa930" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3fa930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3facb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3fae40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3f9020"/>
        <function-ref name="get" scoped="" ref="0x7f771f3f91b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3f9340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3f94d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3f9660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3f97f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3f9980"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3f9b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3f9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3f2160" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3f2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3f24e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3f2670"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3f2800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3f2990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3f2b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3f2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3f4020" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3f4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3f43a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3f4530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3f46c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3f4850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3f49e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3f4b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3f4d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3f3020"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3f31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3f07a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3f07a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3f0b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3f3480" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3f3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3f3800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3f3990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3f3b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3f3cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3f3e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3f1020" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3f13a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3f1530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3f16c0"/>
        <function-ref name="get" scoped="" ref="0x7f771f3f1850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3f19e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3f1b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3f1d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3f0020"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3f01b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3f0340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3f04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3eb7a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3eb7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3ebb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3ebcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3ebe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3ea020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3ea1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3ea340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3ed6d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3ed6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3eda50"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3edbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3edd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3ec020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3ec1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3ec340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3ec4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3ec660"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3ec7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3e9c50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3e9c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3ecac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3ecac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3ece40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3eb020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3eb1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3eb340"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3eb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3ea610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3ea610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3ea990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3eab20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3eacb0"/>
        <function-ref name="get" scoped="" ref="0x7f771f3eae40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3e9020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3e91b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3e9340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3e94d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3e9660"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3e97f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3e9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3e3cb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3e3cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3e20a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3e2230"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3e23c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3e2550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3e26e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3e2870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3e5b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3e5b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3e4020"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3e41b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3e4340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3e44d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3e4660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3e47f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3e4980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3e4b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3e4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3e02f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3e02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3e0670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3e3020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3e33a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3e3530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3e36c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3e3850"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3e39e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3e2b40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3e2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3e1020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3e11b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3e1340"/>
        <function-ref name="get" scoped="" ref="0x7f771f3e14d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3e1660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3e17f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3e1980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3e1b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3e1ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3e1e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3db2f0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3db2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3db670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3db800"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3db990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3dbb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3dbcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3dbe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3dd220" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3dd220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3dd5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3dd730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3dd8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3dda50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3ddbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3ddd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3dc020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3dc1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3dc340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3d97a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3d97a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3d9b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3dc610" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3dc610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3dc990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3dcb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3dccb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3dce40"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3db020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3da160" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3da160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3da4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3da670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3da800"/>
        <function-ref name="get" scoped="" ref="0x7f771f3da990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3dab20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3dacb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3dae40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3d9020"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3d91b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3d9340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3d94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3d37a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3d37a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3d3b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3d3cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3d3e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3d2020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3d21b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3d2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3d66d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3d66d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3d6a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3d6be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3d6d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3d4020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3d41b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3d4340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3d44d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3d4660"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3d47f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3d1c50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3d1c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3d0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3d4ac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3d4ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3d4e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3d3020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3d31b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3d3340"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3d34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3d2610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3d2610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3d2990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3d2b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3d2cb0"/>
        <function-ref name="get" scoped="" ref="0x7f771f3d2e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3d1020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3d11b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3d1340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3d14d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3d1660"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3d17f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3d1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3cccb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3cccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3cb0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3cb230"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3cb3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3cb550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3cb6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3cb870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3ceb30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3ceb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3cd020"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3cd1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3cd340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3cd4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3cd660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3cd7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3cd980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3cdb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3cdca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3c92f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3c92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3c9670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3cc020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3cc3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3cc530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3cc6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3cc850"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3cc9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3cbb40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3cbb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3ca020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3ca1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3ca340"/>
        <function-ref name="get" scoped="" ref="0x7f771f3ca4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3ca660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3ca7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3ca980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3cab10"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3caca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3cae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3c9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3c32f0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3c32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3c3670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3c3800"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3c3990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3c3b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3c3cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3c3e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3c6220" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3c6220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3c65a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3c6730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3c68c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3c6a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3c6be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3c6d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3c4020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3c41b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3c4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3c17a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3c17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3c1b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3c4610" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3c4610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3c4990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3c4b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3c4cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3c4e40"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3c3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3c2160" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3c2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3c24e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3c2670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3c2800"/>
        <function-ref name="get" scoped="" ref="0x7f771f3c2990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3c2b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3c2cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3c2e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3c1020"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3c11b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3c1340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3c14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3bc7a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3bc7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3bcb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3bccb0"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3bce40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3bb020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3bb1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3bb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3be6d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3be6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3bea50"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3bebe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3bed70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3bd020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3bd1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3bd340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3bd4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3bd660"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3bd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3bac50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3bac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3bdac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3bdac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3bde40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3bc020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3bc1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3bc340"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3bc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3bb610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3bb610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3bb990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3bbb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3bbcb0"/>
        <function-ref name="get" scoped="" ref="0x7f771f3bbe40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3ba020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3ba1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3ba340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3ba4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3ba660"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3ba7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3ba980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f771f3b5cb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f771f3b5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3b30a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f771f3b3230"/>
        <function-ref name="captured" scoped="" ref="0x7f771f3b33c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3b3550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3b36e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f771f3b3870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771f3b7b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771f3b7b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f3b6020"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f3b61b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3b6340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f3b64d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f3b6660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3b67f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f3b6980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f3b6b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f3b6ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f771f3b12f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f771f3b12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3b1670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f771f3b5020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f771f3b5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f3b53a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f3b5530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f3b56c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f3b5850"/>
        <function-ref name="fired" scoped="" ref="0x7f771f3b59e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f771f3b3b40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771f3b3b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f3b2020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f3b21b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f3b2340"/>
        <function-ref name="get" scoped="" ref="0x7f771f3b24d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f3b2660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f3b27f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f3b2980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f3b2b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f3b2ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f3b2e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f3b1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f771f3ab240" loc="7:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f771f3ab240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3ab5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f771f3afa90" loc="4:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f771f3afa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3afe10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f771f3ac260" loc="5:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f771f3ac260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3ac5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f771f3ac9f0" loc="6:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f771f3ac9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771f3acd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f771f83a4c0" loc="55:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f771f83a4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f771f83a840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f771fbab3b0" loc="51:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f771fbab3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f771fbab730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f771fbab8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f771fbaba50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f771fa14bc0" loc="52:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f771fa14bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f771fb50020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f771f375dc0" loc="60:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f771f375dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f373180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f771f376590" loc="57:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771f376590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771f376910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f771f3756c0" loc="59:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f771f3756c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f375a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f771f376c00" loc="58:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f771f376c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f375020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f771f3751b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f771f375340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f771fc28410" loc="48:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f771fc28410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771fc28790"/>
        <function-ref name="runTask" scoped="" ref="0x7f771fc28920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f771fbb93a0" loc="47:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f771fbb93a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771fbb9720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f771fbb98b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f771fbb9a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f771f590b70" loc="56:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f771f590b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771f58f020"/>
        <function-ref name="runTask" scoped="" ref="0x7f771f58f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f771f5892c0" loc="57:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f771f5892c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f771f589640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f771f5897d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f771f589960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f771f591c30" loc="55:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f771f591c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f590020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f771f5901b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f771f590340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f771f35d330" loc="47:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f771f35d330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f771f35d6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f771f35d840"/>
        <function-ref name="led1On" scoped="" ref="0x7f771f35d9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f771f35db60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f771f35dcf0"/>
        <function-ref name="get" scoped="" ref="0x7f771f35de80"/>
        <function-ref name="led1Off" scoped="" ref="0x7f771f369030"/>
        <function-ref name="led2Off" scoped="" ref="0x7f771f369670"/>
        <function-ref name="set" scoped="" ref="0x7f771f3691c0"/>
        <function-ref name="led0On" scoped="" ref="0x7f771f369350"/>
        <function-ref name="led2On" scoped="" ref="0x7f771f3694e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f771f3521d0" loc="51:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f771f3521d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f352550"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f3526e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f352870"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f352a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f352b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f352d20"/>
        <function-ref name="set" scoped="" ref="0x7f771f358020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f3581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f35b5c0" loc="47:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f35b5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f35b940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f771f3584d0" loc="52:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f771f3584d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f358850"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f3589e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f358b70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f358d00"/>
        <function-ref name="get" scoped="" ref="0x7f771f357020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f3571b0"/>
        <function-ref name="set" scoped="" ref="0x7f771f357340"/>
        <function-ref name="clr" scoped="" ref="0x7f771f3574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f771f35bbc0" loc="48:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f771f35bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f771f35a020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f771f35a1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f771f35a340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f771f35a4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f771f35a660"/>
        <function-ref name="get" scoped="" ref="0x7f771f35a7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f771f35a980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f771f359020"/>
        <function-ref name="set" scoped="" ref="0x7f771f35ab10"/>
        <function-ref name="led0On" scoped="" ref="0x7f771f35aca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f771f35ae30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f771f3577f0" loc="53:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f771f3577f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f357b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f357d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f351020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f3511b0"/>
        <function-ref name="get" scoped="" ref="0x7f771f351340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f3514d0"/>
        <function-ref name="set" scoped="" ref="0x7f771f351660"/>
        <function-ref name="clr" scoped="" ref="0x7f771f3517f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f771f35cdb0" loc="42:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f771f35cdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f335180"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f335310"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3354a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f335630"/>
        <function-ref name="get" scoped="" ref="0x7f771f3357c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f335950"/>
        <function-ref name="set" scoped="" ref="0x7f771f335ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f335c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f771f334020" loc="43:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f771f334020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f3343a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f334530"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3346c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f334850"/>
        <function-ref name="get" scoped="" ref="0x7f771f3349e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f334b70"/>
        <function-ref name="set" scoped="" ref="0x7f771f334d00"/>
        <function-ref name="clr" scoped="" ref="0x7f771f333020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f771f332600" loc="45:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f332600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f332980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f771f333380" loc="44:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f771f333380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f333700"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f333890"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f333a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f333bb0"/>
        <function-ref name="get" scoped="" ref="0x7f771f333d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f332020"/>
        <function-ref name="set" scoped="" ref="0x7f771f3321b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f332340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f771f31d810" loc="53:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f771f31d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f31db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f31dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f31c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f31c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f31c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f31c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f31c660"/>
        <function-ref name="get" scoped="" ref="0x7f771f31c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f31c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f31cb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f31cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f31ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f31b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f31b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f31b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f771f309810" loc="66:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f771f309810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f309b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f309d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f308020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3081b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f308340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3084d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f308660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3087f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f308980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f308b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f308ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f308e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f307020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3072b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f307440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f771f2bfca0" loc="145:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f771f2bfca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2be0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2be230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2be3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2be550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2be6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2be870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2bea00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2beb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2bed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2bd020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2bd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2bd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2bd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2bd760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2bd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f771f29acb0" loc="165:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f771f29acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2990a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f299230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2993c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f299550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2996e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f299870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f299a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f299b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f299d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f298020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2981b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f298340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2984d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f298760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2988f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f771f2bdcc0" loc="146:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f771f2bdcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2bc0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2bc230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2bc3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2bc550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2bc6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2bc870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2bca00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2bcb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2bcd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2bb020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2bb1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2bb340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2bb4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2bb760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2bb8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f771f304810" loc="71:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f771f304810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f304b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f304d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f303020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3031b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f303340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3034d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f303660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3037f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f303980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f303b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f303ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f303e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f302020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3022b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f302440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f771f2f09a0" loc="84:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f771f2f09a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2f0d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ef020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ef1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ef340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ef4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ef660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2ef7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2ef980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2efb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2efca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2efe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2ee020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2ee1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2ee440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2ee5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f771f2dc9a0" loc="97:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f771f2dc9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2dcd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2db020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2db1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2db340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2db4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2db660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2db7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2db980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2dbb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2dbca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2dbe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2da020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2da1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2da440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2da5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f771f2cb9a0" loc="108:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f771f2cb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2cbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ca020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ca1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ca340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ca4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ca660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2ca7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2ca980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2cab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2caca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2cae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2c9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2c91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2c9440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2c95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f771f2b7cc0" loc="149:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f771f2b7cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2b60a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2b6230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2b63c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2b6550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2b66e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2b6870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2b6a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2b6b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2b6d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2b5020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2b51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2b5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2b54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2b5760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2b58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f771f2a6cb0" loc="159:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f771f2a6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2a50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2a5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2a53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2a5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2a56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2a5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2a5a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2a5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2a5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2a4020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2a41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2a4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2a44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2a4760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2a48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f771f292cc0" loc="171:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f771f292cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2910a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f291230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2913c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f291550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2916e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f291870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f291a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f291b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f291d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f290020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2901b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f290340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2904d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f290760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2908f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f771f317810" loc="56:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f771f317810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f317b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f317d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f316020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3161b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f316340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3164d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f316660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3167f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f316980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f316b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f316ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f316e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f315020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3152b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f315440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f771f2b5cc0" loc="150:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f771f2b5cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2b40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2b4230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2b43c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2b4550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2b46e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2b4870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2b4a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2b4b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2b4d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2b3020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2b31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2b3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2b34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2b3760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2b38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f771f313810" loc="61:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f771f313810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f313b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f313d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f312020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3121b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f312340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3124d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f312660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3127f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f312980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f312b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f312ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f312e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f311020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3112b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f311440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f771f2fe810" loc="74:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f771f2fe810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2feb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2fed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2fd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2fd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2fd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2fd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2fd660"/>
        <function-ref name="get" scoped="" ref="0x7f771f2fd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2fd980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2fdb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f2fdca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2fde30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2fc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2fc2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2fc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f771f2ea9a0" loc="87:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f771f2ea9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2ead20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2e9020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2e91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2e9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2e94d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2e9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2e97f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2e9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2e9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2e9ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2e9e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2e8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2e81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2e8440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2e85d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f771f2d59a0" loc="100:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f771f2d59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2d5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2d4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2d41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2d4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2d44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2d4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2d47f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2d4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2d4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2d4ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2d4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2d3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2d31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2d3440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2d35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f771f2c59a0" loc="111:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f771f2c59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2c5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2c4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2c41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2c4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2c44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2c4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2c47f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2c4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2c4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2c4ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2c4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2c3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2c31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2c3440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2c35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f771f321810" loc="51:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f771f321810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f321b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f321d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f320020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3201b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f320340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3204d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f320660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3207f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f320980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f320b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f320ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f320e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f31f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f31f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f31f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f771f30d810" loc="64:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f771f30d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f30dc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f30de20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f30c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f30c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f30c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f30c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f30c660"/>
        <function-ref name="get" scoped="" ref="0x7f771f30c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f30c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f30cb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f30cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f30ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f30b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f30b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f30b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f771f2f8810" loc="77:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f771f2f8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2f8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2f8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2f7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2f71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2f7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2f74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2f7660"/>
        <function-ref name="get" scoped="" ref="0x7f771f2f77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2f7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2f7b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f2f7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2f7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2f6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2f62b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2f6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f771f2c1cc0" loc="144:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f771f2c1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2c00a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2c0230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2c03c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2c0550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2c06e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2c0870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2c0a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2c0b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2c0d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2bf020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2bf1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2bf340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2bf4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2bf760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2bf8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f771f2a0cb0" loc="162:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f771f2a0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f29f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f29f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f29f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f29f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f29f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f29f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f29fa00"/>
        <function-ref name="get" scoped="" ref="0x7f771f29fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f29fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f29e020"/>
        <function-ref name="set" scoped="" ref="0x7f771f29e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f29e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f29e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f29e760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f29e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f771f294cb0" loc="169:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f771f294cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2930a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f293230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2933c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f293550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2936e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f293870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f293a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f293b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f293d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f292020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2921b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f292340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2924d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f292760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2928f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f771f2adcc0" loc="155:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f771f2adcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2ac0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ac230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ac3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ac550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ac6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ac870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2aca00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2acb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2acd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ab020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2ab1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2ab340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2ab4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2ab760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2ab8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f771f2f4810" loc="82:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f771f2f4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2f4d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2f3020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2f31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2f3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2f34d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2f3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2f37f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2f3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2f3b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2f3ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2f3e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2f2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2f21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2f2440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2f25d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f771f2e09a0" loc="95:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f771f2e09a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2e0d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2df020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2df1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2df340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2df4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2df660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2df7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2df980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2dfb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2dfca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2dfe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2de020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2de1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2de440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2de5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f771f2cf9a0" loc="106:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f771f2cf9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2cfd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ce020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ce1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ce340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ce4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ce660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2ce7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2ce980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2ceb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ceca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2cee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2cd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2cd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2cd440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2cd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f771f29ecb0" loc="163:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f771f29ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f29d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f29d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f29d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f29d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f29d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f29d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f29da00"/>
        <function-ref name="get" scoped="" ref="0x7f771f29db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f29dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f29c020"/>
        <function-ref name="set" scoped="" ref="0x7f771f29c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f29c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f29c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f29c760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f29c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f771f2b3cb0" loc="152:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f771f2b3cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2b20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2b2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2b23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2b2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2b26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2b2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2b2a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2b2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2b2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2b1020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2b11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2b1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2b14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2b1760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2b18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f771f31b810" loc="54:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f771f31b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f31bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f31bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f31a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f31a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f31a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f31a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f31a660"/>
        <function-ref name="get" scoped="" ref="0x7f771f31a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f31a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f31ab10"/>
        <function-ref name="set" scoped="" ref="0x7f771f31aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f31ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f319020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3192b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f319440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f771f307810" loc="67:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f771f307810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f307b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f307d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f305020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3051b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f305340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3054d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f305660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3057f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f305980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f305b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f305ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f305e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f304020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3042b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f304440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f771f2d39a0" loc="104:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f771f2d39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2d3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2d2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2d21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2d2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2d24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2d2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2d27f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2d2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2d2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2d2ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2d2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2d1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2d11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2d1440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2d15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f771f302810" loc="72:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f771f302810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f302b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f302d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f301020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3011b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f301340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3014d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f301660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3017f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f301980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f301b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f301ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f301e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f300020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3002b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f300440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f771f2ee9a0" loc="85:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f771f2ee9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2eed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ed020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ed1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ed340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ed4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ed660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2ed7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2ed980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2edb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2edca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2ede30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2ec020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2ec1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2ec440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2ec5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f771f2da9a0" loc="98:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f771f2da9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2dad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2d9020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2d91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2d9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2d94d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2d9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2d97f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2d9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2d9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2d9ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2d9e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2d8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2d81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2d8440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2d85d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f771f2c99a0" loc="109:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f771f2c99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2c9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2c8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2c81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2c8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2c84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2c8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2c87f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2c8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2c8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2c8ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2c8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2c7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2c71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2c7440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2c75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f771f2afcc0" loc="154:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f771f2afcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2ae0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ae230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ae3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ae550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ae6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ae870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2aea00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2aeb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2aed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ad020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2ad1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2ad340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2ad4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2ad760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2ad8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f771f323870" loc="49:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f771f323870"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f323bf0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f323d80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f32e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f32e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f32e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f32e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f32e660"/>
        <function-ref name="get" scoped="" ref="0x7f771f32e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f32e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f32eb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f32eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f32ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f32d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f32d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f32d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f771f311810" loc="62:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f771f311810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f311b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f311d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f310020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3101b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f310340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3104d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f310660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3107f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f310980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f310b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f310ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f310e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f30f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f30f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f30f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f771f2fc810" loc="75:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f771f2fc810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2fcb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2fcd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2fb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2fb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2fb340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2fb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2fb660"/>
        <function-ref name="get" scoped="" ref="0x7f771f2fb7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2fb980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2fbb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f2fbca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2fbe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2fa020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2fa2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2fa440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f771f2e89a0" loc="88:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f771f2e89a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2e8d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2e7020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2e71b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2e7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2e74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2e7660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2e77f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2e7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2e7b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2e7ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2e7e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2e6020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2e61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2e6440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2e65d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f771f2abcc0" loc="156:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f771f2abcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2aa0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2aa230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2aa3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2aa550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2aa6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2aa870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2aaa00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2aab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2aad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2a9020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2a91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2a9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2a94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2a9760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2a98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f771f2a4cb0" loc="160:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f771f2a4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2a30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2a3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2a33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2a3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2a36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2a3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2a3a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2a3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2a3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2a2020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2a21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2a2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2a24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2a2760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2a28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f771f298cb0" loc="166:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f771f298cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2970a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f297230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2973c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f297550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2976e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f297870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f297a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f297b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f297d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f296020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2961b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f296340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2964d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f296760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2968f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f771f2e49a0" loc="93:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f771f2e49a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2e4d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2e3020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2e31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2e3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2e34d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2e3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2e37f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2e3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2e3b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2e3ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2e3e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2e2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2e21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2e2440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2e25d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f771f2a9cc0" loc="157:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f771f2a9cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2a70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2a7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2a73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2a7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2a76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2a7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2a7a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2a7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2a7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2a6020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2a61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2a6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2a64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2a6760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2a68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f771f31f810" loc="52:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f771f31f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f31fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f31fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f31e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f31e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f31e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f31e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f31e660"/>
        <function-ref name="get" scoped="" ref="0x7f771f31e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f31e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f31eb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f31eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f31ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f31d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f31d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f31d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f771f30b810" loc="65:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f771f30b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f30bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f30bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f30a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f30a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f30a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f30a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f30a660"/>
        <function-ref name="get" scoped="" ref="0x7f771f30a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f30a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f30ab10"/>
        <function-ref name="set" scoped="" ref="0x7f771f30aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f30ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f309020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3092b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f309440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f771f2f6810" loc="78:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f771f2f6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2f6b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2f6d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2f5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2f51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2f5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2f54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2f5660"/>
        <function-ref name="get" scoped="" ref="0x7f771f2f57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2f5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2f5b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f2f5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2f5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2f4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2f42b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2f4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f771f2b1cc0" loc="153:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f771f2b1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2b00a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2b0230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2b03c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2b0550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2b06e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2b0870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2b0a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2b0b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2b0d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2af020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2af1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2af340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2af4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2af760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2af8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f771f29ccb0" loc="164:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f771f29ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f29b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f29b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f29b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f29b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f29b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f29b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f29ba00"/>
        <function-ref name="get" scoped="" ref="0x7f771f29bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f29bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f29a020"/>
        <function-ref name="set" scoped="" ref="0x7f771f29a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f29a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f29a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f29a760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f29a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f771f2f29a0" loc="83:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f771f2f29a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2f2d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2f1020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2f11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2f1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2f14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2f1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2f17f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2f1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2f1b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2f1ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2f1e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2f0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2f01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2f0440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2f05d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f771f2de9a0" loc="96:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f771f2de9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2ded20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2dd020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2dd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2dd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2dd4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2dd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2dd7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2dd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2ddb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ddca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2dde30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2dc020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2dc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2dc440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2dc5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f771f2cd9a0" loc="107:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f771f2cd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2cdd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2cc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2cc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2cc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2cc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2cc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2cc7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2cc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2ccb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ccca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2cce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2cb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2cb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2cb440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2cb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f771f319810" loc="55:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f771f319810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f319b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f319d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f318020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3181b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f318340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f318660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3187f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f318980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f318b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f318ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f318e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f317020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3172b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f317440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f771f2d19a0" loc="105:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f771f2d19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2d1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2d0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2d01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2d0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2d04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2d0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2d07f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2d0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2d0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2d0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2d0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2cf020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2cf1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2cf440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2cf5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f771f315810" loc="60:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f771f315810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f315b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f315d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f314020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3141b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f314340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f314660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3147f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f314980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f314b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f314ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f314e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f313020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3132b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f313440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f771f300810" loc="73:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f771f300810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f300b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f300d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ff020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ff1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ff340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ff4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2ff660"/>
        <function-ref name="get" scoped="" ref="0x7f771f2ff7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2ff980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ffb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f2ffca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2ffe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2fe020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2fe2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2fe440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f771f2ec9a0" loc="86:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f771f2ec9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2ecd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2eb020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2eb1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2eb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2eb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2eb660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2eb7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2eb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2ebb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2ebca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2ebe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2ea020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2ea1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2ea440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2ea5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f771f2d89a0" loc="99:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f771f2d89a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2d8d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2d6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2d61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2d6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2d64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2d6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2d67f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2d6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2d6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2d6ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2d6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2d5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2d51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2d5440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2d55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f771f2c79a0" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f771f2c79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2c7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2c6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2c61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2c6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2c64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2c6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2c67f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2c6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2c6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2c6ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2c6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2c5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2c51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2c5440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2c55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f771f32d810" loc="50:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f771f32d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f32db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f32dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f322020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f3221b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f322340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f3224d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f322660"/>
        <function-ref name="get" scoped="" ref="0x7f771f3227f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f322980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f322b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f322ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f322e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f321020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f3212b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f321440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f771f30f810" loc="63:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f771f30f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f30fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f30fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f30e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f30e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f30e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f30e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f30e660"/>
        <function-ref name="get" scoped="" ref="0x7f771f30e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f30e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f30eb10"/>
        <function-ref name="set" scoped="" ref="0x7f771f30eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f30ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f30d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f30d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f30d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f771f2fa810" loc="76:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f771f2fa810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2fab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2fad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2f9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2f91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2f9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2f94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2f9660"/>
        <function-ref name="get" scoped="" ref="0x7f771f2f97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2f9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2f9b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f2f9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2f9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2f8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2f82b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2f8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f771f2e69a0" loc="89:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f771f2e69a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2e6d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2e5020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2e51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2e5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2e54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2e5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2e57f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2e5980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2e5b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2e5ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2e5e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2e4020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2e41b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2e4440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2e45d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f771f2b9ca0" loc="148:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f771f2b9ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2b80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2b8230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2b83c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2b8550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2b86e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2b8870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2b8a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2b8b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2b8d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2b7020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2b71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2b7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2b74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2b7760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2b78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f771f2a2cb0" loc="161:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f771f2a2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2a10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2a1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2a13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2a1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2a16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2a1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2a1a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2a1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2a1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2a0020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2a01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2a0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2a04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2a0760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2a08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f771f2bbcc0" loc="147:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f771f2bbcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2ba0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2ba230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2ba3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2ba550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2ba6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2ba870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2baa00"/>
        <function-ref name="get" scoped="" ref="0x7f771f2bab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2bad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2b9020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2b91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2b9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2b94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2b9760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2b98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f771f2e29a0" loc="94:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f771f2e29a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2e2d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2e1020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2e11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2e1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2e14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2e1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2e17f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f2e1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2e1b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2e1ca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f2e1e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2e0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2e01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2e0440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2e05d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f771f296cb0" loc="168:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f771f296cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2950a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f295230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2953c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f295550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2956e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f295870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f295a00"/>
        <function-ref name="get" scoped="" ref="0x7f771f295b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f295d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f294020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2941b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f294340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2944d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f294760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2948f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f771f290cc0" loc="172:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f771f290cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f28f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f28f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f28f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f28f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f28f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f28f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f28fa00"/>
        <function-ref name="get" scoped="" ref="0x7f771f28fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f28fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f28e020"/>
        <function-ref name="set" scoped="" ref="0x7f771f28e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f28e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f28e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f28e760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f28e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f771f2c39f0" loc="143:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f771f2c39f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2c21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f2c2350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2c24e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f2c2670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2c2800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2c2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2c2b20"/>
        <function-ref name="get" scoped="" ref="0x7f771f2c2cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2c2e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f2c1020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2c11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f2c1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2c14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f2c1760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2c18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f28bd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f28bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2640e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f264270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f264400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f264590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f264720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2648b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f264a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f264bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f264d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f263020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2631b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f263340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2634d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f263760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2638f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f260740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f260740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f260ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f260c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f260de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f25f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f25f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f25f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f25f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f25f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f25f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f25f980"/>
        <function-ref name="set" scoped="" ref="0x7f771f25fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f25fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f25fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f25e120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f25e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f25b100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f25b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f25b480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f25b610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f25b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f25b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f25bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f25bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f25bde0"/>
        <function-ref name="get" scoped="" ref="0x7f771f259020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2591b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f259340"/>
        <function-ref name="set" scoped="" ref="0x7f771f2594d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f259660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2597f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f259a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f259c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f256d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f256d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2550e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f255270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f255400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f255590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f255720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2558b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f255a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f255bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f255d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f254020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2541b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f254340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2544d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f254760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2548f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f251740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f251740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f251ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f251c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f251de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f250020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2501b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f250340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2504d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f250660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2507f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f250980"/>
        <function-ref name="set" scoped="" ref="0x7f771f250b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f250ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f250e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f24f120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f24f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f24c100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f24c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f24c480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f24c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f24c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f24c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f24cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f24cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f24cde0"/>
        <function-ref name="get" scoped="" ref="0x7f771f24b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f24b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f24b340"/>
        <function-ref name="set" scoped="" ref="0x7f771f24b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f24b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f24b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f24ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f24bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f248d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f248d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2470e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f247270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f247400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f247590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f247720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2478b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f247a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f247bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f247d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f246020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2461b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f246340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2464d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f246760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2468f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f243740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f243740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f243ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f243c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f243de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f242020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2421b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f242340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2424d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f242660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2427f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f242980"/>
        <function-ref name="set" scoped="" ref="0x7f771f242b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f242ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f242e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f241120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2412b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f23e100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f23e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f23e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f23e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f23e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f23e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f23eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f23ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f23ede0"/>
        <function-ref name="get" scoped="" ref="0x7f771f23d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f23d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f23d340"/>
        <function-ref name="set" scoped="" ref="0x7f771f23d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f23d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f23d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f23da80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f23dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f23ad10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f23ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f2390e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f239270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f239400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f239590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f239720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f2398b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f239a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f239bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f239d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f238020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2381b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f238340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2384d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f238760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2388f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f235740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f235740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f235ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f235c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f235de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f233020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2331b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f233340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2334d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f233660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2337f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f233980"/>
        <function-ref name="set" scoped="" ref="0x7f771f233b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f233ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f233e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f232120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2322b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f22f100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f22f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f22f480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f22f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f22f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f22f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f22fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f22fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f22fde0"/>
        <function-ref name="get" scoped="" ref="0x7f771f22e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f22e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f22e340"/>
        <function-ref name="set" scoped="" ref="0x7f771f22e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f22e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f22e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f22ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f22ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f22bd80" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f22bd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f22a180"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f22a310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f22a4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f22a630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f22a7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f22a950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f22aae0"/>
        <function-ref name="get" scoped="" ref="0x7f771f22ac70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f22ae00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f229020"/>
        <function-ref name="set" scoped="" ref="0x7f771f2291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f229340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f229760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f226740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f226740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f226ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f226c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f226de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f225020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2251b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f225340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2254d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f225660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2257f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f225980"/>
        <function-ref name="set" scoped="" ref="0x7f771f225b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f225ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f225e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f224120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2242b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f221100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f221100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f221480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f221610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2217a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f221930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f221ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f221c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f221de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f220020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2201b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f220340"/>
        <function-ref name="set" scoped="" ref="0x7f771f2204d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f220660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2207f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f220a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f220c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f21dd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f21dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f21c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f21c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f21c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f21c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f21c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f21c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f21ca40"/>
        <function-ref name="get" scoped="" ref="0x7f771f21cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f21cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f21b020"/>
        <function-ref name="set" scoped="" ref="0x7f771f21b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f21b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f21b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f21b760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f21b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f218740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f218740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f218ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f218c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f218de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f217020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2171b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f217340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2174d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f217660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2177f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f217980"/>
        <function-ref name="set" scoped="" ref="0x7f771f217b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f217ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f217e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f216120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2162b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f213100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f213100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f213480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f213610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2137a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f213930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f213ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f213c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f213de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f212020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2121b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f212340"/>
        <function-ref name="set" scoped="" ref="0x7f771f2124d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f212660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2127f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f212a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f212c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f20ed10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f20ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f20d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f20d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f20d400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f20d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f20d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f20d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f20da40"/>
        <function-ref name="get" scoped="" ref="0x7f771f20dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f20dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f20c020"/>
        <function-ref name="set" scoped="" ref="0x7f771f20c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f20c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f20c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f20c760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f20c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f209740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f209740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f209ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f209c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f209de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f208020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f2081b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f208340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f2084d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f208660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2087f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f208980"/>
        <function-ref name="set" scoped="" ref="0x7f771f208b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f208ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f208e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f207120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f2072b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f204100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f204100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f204480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f204610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f2047a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f204930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f204ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f204c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f204de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f203020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f2031b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f203340"/>
        <function-ref name="set" scoped="" ref="0x7f771f2034d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f203660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f2037f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f203a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f203c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f200d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f200d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1ff0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1ff270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1ff400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1ff590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1ff720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1ff8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1ffa40"/>
        <function-ref name="get" scoped="" ref="0x7f771f1ffbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1ffd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1fe020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1fe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1fe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1fe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1fe760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1fe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1fb740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1fb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1fbac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1fbc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1fbde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1fa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1fa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1fa340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1fa4d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1fa660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1fa7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1fa980"/>
        <function-ref name="set" scoped="" ref="0x7f771f1fab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1faca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1fae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1f9120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1f92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1f6100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1f6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1f6480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1f6610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1f67a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1f6930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1f6ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1f6c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1f6de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1f5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1f51b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1f5340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1f54d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1f5660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1f57f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1f5a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1f5c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1f2e60" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1f2e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1f1210"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1f13a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1f1530"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1f16c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1f1850"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1f19e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1f1b70"/>
        <function-ref name="get" scoped="" ref="0x7f771f1f1d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1f0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1f01b0"/>
        <function-ref name="set" scoped="" ref="0x7f771f1f0340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1f04d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1f0660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1f08f0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1f0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1ed9f0" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1ed9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1edd70"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1eb020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1eb1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1eb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1eb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1eb660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1eb7f0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1eb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1ebb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1ebca0"/>
        <function-ref name="set" scoped="" ref="0x7f771f1ebe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1ea020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1ea1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1ea440"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1ea5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1e7460" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1e7460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1e77e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1e7970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1e7b00"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1e7c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1e7e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1e6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1e61b0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1e6340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1e64d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1e6660"/>
        <function-ref name="set" scoped="" ref="0x7f771f1e67f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1e6980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1e6b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1e6da0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1e3e00" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1e3e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1e21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1e2350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1e24e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1e2670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1e2800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1e2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1e2b20"/>
        <function-ref name="get" scoped="" ref="0x7f771f1e2cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1e2e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1e1020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1e11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1e1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1e14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1e1760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1e18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1de740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1de740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1deac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1dec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1dede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1dd020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1dd1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1dd340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1dd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1dd660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1dd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1dd980"/>
        <function-ref name="set" scoped="" ref="0x7f771f1ddb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1ddca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1dde30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1dc120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1dc2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1d9100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1d9100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1d9480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1d9610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1d97a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1d9930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1d9ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1d9c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1d9de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1d8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1d81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1d8340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1d84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1d8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1d87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1d8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1d8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1d5d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1d5d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1d40e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1d4270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1d4400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1d4590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1d4720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1d48b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1d4a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f1d4bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1d4d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1d3020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1d31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1d3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1d34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1d3760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1d38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1d0740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1d0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1d0ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1d0c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1d0de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1cf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1cf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1cf340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1cf4d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1cf660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1cf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1cf980"/>
        <function-ref name="set" scoped="" ref="0x7f771f1cfb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1cfca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1cfe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1ce120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1ce2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1cb100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1cb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1cb480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1cb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1cb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1cb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1cbac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1cbc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1cbde0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1ca020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1ca1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1ca340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1ca4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1ca660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1ca7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1caa80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1cac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1c7d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1c7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1c50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1c5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1c5400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1c5590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1c5720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1c58b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1c5a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f1c5bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1c5d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1c4020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1c41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1c4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1c44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1c4760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1c48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1c1740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1c1740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1c1ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1c1c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1c1de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1c0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1c01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1c0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1c04d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1c0660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1c07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1c0980"/>
        <function-ref name="set" scoped="" ref="0x7f771f1c0b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1c0ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1c0e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1bf120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1bf2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1bc100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1bc100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1bc480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1bc610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1bc7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1bc930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1bcac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1bcc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1bcde0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1bb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1bb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1bb340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1bb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1bb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1bb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1bba80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1bbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1b8d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1b8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1b70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1b7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1b7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1b7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1b7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1b78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1b7a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f1b7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1b7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1b6020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1b61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1b6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1b64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1b6760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1b68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1b3740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1b3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1b3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1b3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1b3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1b2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1b21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1b2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1b24d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1b2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1b27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1b2980"/>
        <function-ref name="set" scoped="" ref="0x7f771f1b2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1b2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1b2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1b1120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1b12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1ae100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1ae100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1ae480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1ae610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1ae7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1ae930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1aeac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1aec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1aede0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1ad020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1ad1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1ad340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1ad4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1ad660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1ad7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1ada80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1adc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1aad10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1aad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1a90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1a9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1a9400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1a9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1a9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1a98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1a9a40"/>
        <function-ref name="get" scoped="" ref="0x7f771f1a9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1a9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1a8020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1a81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1a8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1a84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1a8760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1a88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f1a5740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f1a5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1a5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1a5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1a5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1a4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1a41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1a4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1a44d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f1a4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1a47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1a4980"/>
        <function-ref name="set" scoped="" ref="0x7f771f1a4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1a4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1a4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f1a3120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1a32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f19f100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f19f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f19f480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f19f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f19f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f19f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f19fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f19fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f19fde0"/>
        <function-ref name="get" scoped="" ref="0x7f771f19e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f19e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f19e340"/>
        <function-ref name="set" scoped="" ref="0x7f771f19e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f19e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f19e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f19ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f19ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f19bd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f19bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f19a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f19a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f19a400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f19a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f19a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f19a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f19aa40"/>
        <function-ref name="get" scoped="" ref="0x7f771f19abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f19ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f199020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1991b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f199340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1994d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f199760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f196740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f196740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f196ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f196c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f196de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f195020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1951b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f195340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1954d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f195660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1957f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f195980"/>
        <function-ref name="set" scoped="" ref="0x7f771f195b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f195ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f195e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f194120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1942b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f191100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f191100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f191480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f191610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1917a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f191930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f191ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f191c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f191de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f190020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1901b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f190340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1904d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f190660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1907f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f190a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f190c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f18dd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f18dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f18c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f18c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f18c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f18c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f18c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f18c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f18ca40"/>
        <function-ref name="get" scoped="" ref="0x7f771f18cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f18cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f18b020"/>
        <function-ref name="set" scoped="" ref="0x7f771f18b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f18b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f18b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f18b760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f18b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f188740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f188740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f188ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f188c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f188de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f187020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1871b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f187340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1874d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f187660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1877f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f187980"/>
        <function-ref name="set" scoped="" ref="0x7f771f187b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f187ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f187e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f186120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1862b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f771f183100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f771f183100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f183480"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f183610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1837a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f183930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f183ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f183c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f183de0"/>
        <function-ref name="get" scoped="" ref="0x7f771f182020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f1821b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f182340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1824d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f182660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1827f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f182a80"/>
        <function-ref name="clr" scoped="" ref="0x7f771f182c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f771f10a2f0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f771f10a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f10a670"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f10a800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f10a990"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f10ab20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f10acb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f10ae40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f109020"/>
        <function-ref name="get" scoped="" ref="0x7f771f1091b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f109340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f1094d0"/>
        <function-ref name="set" scoped="" ref="0x7f771f109660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f1097f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f109980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f109c10"/>
        <function-ref name="clr" scoped="" ref="0x7f771f109da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f771f124020" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f771f124020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f1243a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f124530"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1246c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f124850"/>
        <function-ref name="get" scoped="" ref="0x7f771f1249e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f124b70"/>
        <function-ref name="set" scoped="" ref="0x7f771f124d00"/>
        <function-ref name="clr" scoped="" ref="0x7f771f10a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f771f106de0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f771f106de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f105180"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f105310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f1054a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f105630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1057c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f105950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f105ae0"/>
        <function-ref name="get" scoped="" ref="0x7f771f105c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f105e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f104020"/>
        <function-ref name="set" scoped="" ref="0x7f771f1041b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f104340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f1044d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f104760"/>
        <function-ref name="clr" scoped="" ref="0x7f771f1048f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f771f107b90" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f771f107b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f106020"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f1061b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f106340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f1064d0"/>
        <function-ref name="get" scoped="" ref="0x7f771f106660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f1067f0"/>
        <function-ref name="set" scoped="" ref="0x7f771f106980"/>
        <function-ref name="clr" scoped="" ref="0x7f771f106b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f771f101930" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f771f101930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f101cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f101e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f100020"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f1001b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f100340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f1004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f100660"/>
        <function-ref name="get" scoped="" ref="0x7f771f1007f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f100980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f100b10"/>
        <function-ref name="set" scoped="" ref="0x7f771f100ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f100e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f0ff020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f0ff2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f0ff440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f771f102710" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f771f102710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f102a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f102c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f102db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f101020"/>
        <function-ref name="get" scoped="" ref="0x7f771f1011b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f101340"/>
        <function-ref name="set" scoped="" ref="0x7f771f1014d0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f101660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Notify" ref="0x7f771f0f01d0" loc="48:EvaluatorC.nc">
      <component-ref qname="EvaluatorC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771f0f01d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771f0ef2a0"/>
        <function-ref name="enable" scoped="" ref="0x7f771f0f0dc0"/>
        <function-ref name="notify" scoped="" ref="0x7f771f0ef720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f771f0f5b10" loc="47:EvaluatorC.nc">
      <component-ref qname="EvaluatorC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f771f0f5b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f771f0f2020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f771f0f21b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f771f0f2340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f771f0f24d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f771f0f2660"/>
        <function-ref name="get" scoped="" ref="0x7f771f0f27f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f771f0f2980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f771f0f1020"/>
        <function-ref name="set" scoped="" ref="0x7f771f0f2b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f771f0f2ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f771f0f2e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f771f09e6b0" loc="53:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771f09e6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771f09ea30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7f771f098e80" loc="70:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7f771f098e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771f097220"/>
        <function-ref name="runTask" scoped="" ref="0x7f771f0973b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f771f09bac0" loc="58:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771f09bac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771f09a790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7f771f09aca0" loc="59:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771f09aca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771f099d40"/>
        <function-ref name="enable" scoped="" ref="0x7f771f0998c0"/>
        <function-ref name="notify" scoped="" ref="0x7f771f0981e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f771f09d970" loc="55:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771f09d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771f09dcf0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771f09de80"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771f09b030"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771f09b1c0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771f09b350"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771f09b4e0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771f09b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f771f09ec80" loc="54:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771f09ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771f09d0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771f09d230"/>
        <function-ref name="request" scoped="" ref="0x7f771f09d3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f771f09d550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771f09d6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalFailure" ref="0x7f771f0986a0" loc="79:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalFailure" scoped="" ref="0x7f771f0986a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771f098a20"/>
        <function-ref name="runTask" scoped="" ref="0x7f771f098bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f771eeddd30" loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771eeddd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771eedc0e0"/>
        <function-ref name="configure" scoped="" ref="0x7f771eedc270"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771eedc400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f771eedede0" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771eedede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771eedd180"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771eedd310"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771eedd4a0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771eedd630"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771eedd7c0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771eedd950"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771eeddae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f771eedc650" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771eedc650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771eedc9d0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771eedcb60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771eede1d0" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771eede1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771eede550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771eede6e0"/>
        <function-ref name="request" scoped="" ref="0x7f771eede870"/>
        <function-ref name="granted" scoped="" ref="0x7f771eedea00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771eedeb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f771f0814d0" loc="42:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f771f0814d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771f081850"/>
        <function-ref name="configure" scoped="" ref="0x7f771f0819e0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771f081b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f771f07e1d0" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f771f07e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f771f07e550"/>
        <function-ref name="stop" scoped="" ref="0x7f771f07e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f771f0804d0" loc="43:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f771f0804d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771f080850"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771f0809e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f771f084e30" loc="41:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771f084e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771f0831e0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771f083370"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771f083500"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771f083690"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771f083820"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771f0839b0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771f083b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771f08e990" loc="40:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771f08e990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771f08ed10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771f084020"/>
        <function-ref name="request" scoped="" ref="0x7f771f0841b0"/>
        <function-ref name="granted" scoped="" ref="0x7f771f084340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771f0844d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f771f077af0" loc="42:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f771f077af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771f077e70"/>
        <function-ref name="configure" scoped="" ref="0x7f771f076030"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771f0761c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f771f064b80" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f771f064b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f771f071020"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f771f0711b0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f771f071340"/>
        <function-ref name="isBusy" scoped="" ref="0x7f771f0714d0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f771f071660"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f771f0717f0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f771f071980"/>
        <function-ref name="startConversion" scoped="" ref="0x7f771f071b10"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f771f071ca0"/>
        <function-ref name="getMem" scoped="" ref="0x7f771f071e30"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f771f06f020"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f771f06f1b0"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f771f06f340"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f771f06f5d0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f771f06f760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7f771f055540" loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f771f055540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f0558c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f055a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f055be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f055d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f054020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f0541b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f054340"/>
        <function-ref name="get" scoped="" ref="0x7f771f0544d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f054660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f0547f0"/>
        <function-ref name="set" scoped="" ref="0x7f771f054980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f054b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f054ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f053020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f0531b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7f771f05f9e0" loc="53:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f771f05f9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f05fd60"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f05e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f05e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f05e340"/>
        <function-ref name="fired" scoped="" ref="0x7f771f05e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7f771f062220" loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f771f062220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f0625a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f062730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f0628c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f062a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f062be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f062d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f061020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f0611b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f061340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f771f075910" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f771f075910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f771f075c90"/>
        <function-ref name="stop" scoped="" ref="0x7f771f075e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7f771f05a640" loc="56:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f771f05a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f05a9c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f05ab50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f05ace0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f05ae70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f059030"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f0591c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f059350"/>
        <function-ref name="get" scoped="" ref="0x7f771f0594e0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f059670"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f059800"/>
        <function-ref name="set" scoped="" ref="0x7f771f059990"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f059b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f059cb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f058020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f0581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f771f076ab0" loc="43:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f771f076ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771f076e30"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771f075020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7f771f04f540" loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f771f04f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f04f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f04fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f04fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f04fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f04e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f04e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f04e340"/>
        <function-ref name="get" scoped="" ref="0x7f771f04e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f04e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f04e7f0"/>
        <function-ref name="set" scoped="" ref="0x7f771f04e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f04eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f04eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f04d020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f04d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7f771f05e860" loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f771f05e860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f05ece0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f05ee70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f05d030"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f05d1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f05d350"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f05d4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f05d670"/>
        <function-ref name="get" scoped="" ref="0x7f771f05d800"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f05d990"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f05db20"/>
        <function-ref name="set" scoped="" ref="0x7f771f05dcb0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f05de40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f05c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f05c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f771f05c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771f07a660" loc="40:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771f07a660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771f07a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7f771f053540" loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f771f053540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f0538c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f053a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f053be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f053d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f052020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f0521b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f052340"/>
        <function-ref name="get" scoped="" ref="0x7f771f0524d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f052660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f0527f0"/>
        <function-ref name="set" scoped="" ref="0x7f771f052980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f052b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f052ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f051020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f0511b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7f771f06faa0" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f771f06faa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771f06fe20"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771f063020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f0631b0"/>
        <function-ref name="get" scoped="" ref="0x7f771f063340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f0634d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771f063660"/>
        <function-ref name="getMode" scoped="" ref="0x7f771f0637f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771f063980"/>
        <function-ref name="overflow" scoped="" ref="0x7f771f063b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f771f063ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771f063e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7f771f070b30" loc="47:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f771f070b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f771f072020"/>
        <function-ref name="userId" scoped="" ref="0x7f771f0721b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7f771f0616f0" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f771f0616f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771f061a70"/>
        <function-ref name="getControl" scoped="" ref="0x7f771f061c00"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771f061d90"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771f060020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771f0601b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771f060340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771f0604d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771f060660"/>
        <function-ref name="setControl" scoped="" ref="0x7f771f0607f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f771f078370" loc="41:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771f078370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771f0786f0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771f078880"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771f078a10"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771f078ba0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771f078d30"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771f077020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771f0771b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7f771f058540" loc="57:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f771f058540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f0588c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f058a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f058be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f058d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f056020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f0561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f056340"/>
        <function-ref name="get" scoped="" ref="0x7f771f0564d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f056660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f0567f0"/>
        <function-ref name="set" scoped="" ref="0x7f771f056980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f056b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f056ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f055020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f0551b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7f771f060b70" loc="52:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f771f060b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771f05f020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771f05f1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771f05f340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771f05f4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f771f05f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7f771f05c7d0" loc="55:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f771f05c7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f05cb50"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f05cce0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f05ce70"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f05b030"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f05b1c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f05b350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f05b4e0"/>
        <function-ref name="get" scoped="" ref="0x7f771f05b670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f05b800"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f05b990"/>
        <function-ref name="set" scoped="" ref="0x7f771f05bb20"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f05bcb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f05be40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f05a120"/>
        <function-ref name="clr" scoped="" ref="0x7f771f05a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7f771f051540" loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f771f051540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f771f0518c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f771f051a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f771f051be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f771f051d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f771f050020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f771f0501b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f771f050340"/>
        <function-ref name="get" scoped="" ref="0x7f771f0504d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f771f050660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f771f0507f0"/>
        <function-ref name="set" scoped="" ref="0x7f771f050980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f771f050b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f771f050ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f771f04f020"/>
        <function-ref name="clr" scoped="" ref="0x7f771f04f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7f771ef91080" loc="46:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f771ef91080"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f771ef91400"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f771ef91590"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f771ef91720"/>
        <function-ref name="isBusy" scoped="" ref="0x7f771ef918b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f771ef91a40"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f771ef91bd0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f771ef91d60"/>
        <function-ref name="startConversion" scoped="" ref="0x7f771ef90020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f771ef901b0"/>
        <function-ref name="getMem" scoped="" ref="0x7f771ef90340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f771ef904d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f771ef90660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f771ef907f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f771ef90a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f771ef90c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f771eefa3a0" loc="86:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f771eefa3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f771eefa740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f771eefa8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f771eef8570" loc="89:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f771eef8570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f771eef8910"/>
        <function-ref name="configure" scoped="" ref="0x7f771eef8aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771eefb520" loc="85:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771eefb520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771eefb8c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771eefba50"/>
        <function-ref name="request" scoped="" ref="0x7f771eefbbe0"/>
        <function-ref name="granted" scoped="" ref="0x7f771eefbd70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771eefa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f771eefab20" loc="87:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f771eefab20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f771eef8020"/>
        <function-ref name="userId" scoped="" ref="0x7f771eef81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771e4d6b40" loc="44:../../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771e4d6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771e4d5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7f771e4d52b0" loc="45:../../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f771e4d52b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f771e4d5630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f771e4d57c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f771e4d5950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f771e4d5ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f771e4d2020" loc="52:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f771e4d2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f771e4d23c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f771e4d2550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f771e4d10d0" loc="56:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f771e4d10d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f771e4d1470"/>
        <function-ref name="configure" scoped="" ref="0x7f771e4d1600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f771e4d1890" loc="57:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f771e4d1890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f771e4d1c10"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f771e4d1da0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f771e4d0020"/>
        <function-ref name="dequeue" scoped="" ref="0x7f771e4d01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771e4d3210" loc="51:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771e4d3210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771e4d35b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771e4d3740"/>
        <function-ref name="request" scoped="" ref="0x7f771e4d38d0"/>
        <function-ref name="granted" scoped="" ref="0x7f771e4d3a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771e4d3bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f771e4d27a0" loc="53:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f771e4d27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f771e4d2b20"/>
        <function-ref name="userId" scoped="" ref="0x7f771e4d2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f771e4d0480" loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f771e4d0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e4d0800"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e4d0990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f771eed6250" loc="53:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771eed6250"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771eed65d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7f771eed0b30" loc="70:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7f771eed0b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771eecf020"/>
        <function-ref name="runTask" scoped="" ref="0x7f771eecf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f771eed4790" loc="58:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771eed4790"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771eed23f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7f771eed2900" loc="59:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771eed2900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771eed19e0"/>
        <function-ref name="enable" scoped="" ref="0x7f771eed1560"/>
        <function-ref name="notify" scoped="" ref="0x7f771eed1e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f771eed55d0" loc="55:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771eed55d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771eed5950"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771eed5ae0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771eed5c70"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771eed5e00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771eed4020"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771eed41b0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771eed4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f771eed6820" loc="54:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771eed6820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771eed6ba0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771eed6d30"/>
        <function-ref name="request" scoped="" ref="0x7f771eed5020"/>
        <function-ref name="granted" scoped="" ref="0x7f771eed51b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771eed5340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalFailure" ref="0x7f771eed0350" loc="79:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalFailure" scoped="" ref="0x7f771eed0350"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771eed06d0"/>
        <function-ref name="runTask" scoped="" ref="0x7f771eed0860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f771ec37400" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771ec37400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ec37780"/>
        <function-ref name="configure" scoped="" ref="0x7f771ec37910"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771ec37aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f771ec38400" loc="47:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ec38400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ec38780"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771ec38910"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771ec38aa0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771ec38c30"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771ec38dc0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771ec37020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771ec371b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f771ec37cf0" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771ec37cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771ec360a0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771ec36230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f771ec36660" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ec36660"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771ec353d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771ec397a0" loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771ec397a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ec39b20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ec39cb0"/>
        <function-ref name="request" scoped="" ref="0x7f771ec39e40"/>
        <function-ref name="granted" scoped="" ref="0x7f771ec38020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ec381b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f771eeba410" loc="55:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f771eeba410"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771eeb9090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f771eebddf0" loc="54:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f771eebddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771eebc1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771eebc350"/>
        <function-ref name="request" scoped="" ref="0x7f771eebc4e0"/>
        <function-ref name="granted" scoped="" ref="0x7f771eebc670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771eebc800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f771eebea10" loc="52:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f771eebea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771eebed90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771eebd020"/>
        <function-ref name="request" scoped="" ref="0x7f771eebd1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f771eebd340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771eebd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f771eeb48c0" loc="43:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f771eeb48c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f771eeb4c40"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f771eeb4dd0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f771eeb0020"/>
        <function-ref name="isBusy" scoped="" ref="0x7f771eeb01b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f771eeb0340"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f771eeb04d0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f771eeb0660"/>
        <function-ref name="startConversion" scoped="" ref="0x7f771eeb07f0"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f771eeb0980"/>
        <function-ref name="getMem" scoped="" ref="0x7f771eeb0b10"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f771eeb0ca0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f771eeb0e30"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f771eeaf020"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f771eeaf2b0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f771eeaf440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7f771ee9e680" loc="45:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f771ee9e680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ee9ac40"/>
        <function-ref name="fired" scoped="" ref="0x7f771ee9b1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ee9a020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ee9bae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ee99590"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ee99110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ee9b660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ee9d390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ee9a630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ee9d860"/>
        <function-ref name="stop" scoped="" ref="0x7f771ee9dd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7f771eeb5d20" loc="39:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f771eeb5d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f771eeb40e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f771eeb4270"/>
        <function-ref name="start" scoped="" ref="0x7f771eeb4400"/>
        <function-ref name="stop" scoped="" ref="0x7f771eeb4590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7f771ee99c30" loc="46:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f771ee99c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ee94110"/>
        <function-ref name="fired" scoped="" ref="0x7f771ee966a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ee954a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ee95020"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ee94a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ee94590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ee96b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ee98860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ee95ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ee98d30"/>
        <function-ref name="stop" scoped="" ref="0x7f771ee96220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7f771eeb5160" loc="38:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f771eeb5160"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f771eeb54e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f771eeb5670"/>
        <function-ref name="start" scoped="" ref="0x7f771eeb5800"/>
        <function-ref name="stop" scoped="" ref="0x7f771eeb5990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7f771eeae270" loc="44:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f771eeae270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ee9f6e0"/>
        <function-ref name="fired" scoped="" ref="0x7f771eeadcb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771eea0a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771eea05f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ee9e020"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ee9fb60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771eea0170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771eeaee60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ee9f0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771eead360"/>
        <function-ref name="stop" scoped="" ref="0x7f771eead830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f771ee44920" loc="43:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f771ee44920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771ee435a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7f771ee45540" loc="42:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f771ee45540"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f771ee458c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f771ee45a50"/>
        <function-ref name="start" scoped="" ref="0x7f771ee45be0"/>
        <function-ref name="stop" scoped="" ref="0x7f771ee45d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f771ee48ad0" loc="40:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f771ee48ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ee48e50"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ee47020"/>
        <function-ref name="request" scoped="" ref="0x7f771ee471b0"/>
        <function-ref name="granted" scoped="" ref="0x7f771ee47340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ee474d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f771ee496f0" loc="38:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f771ee496f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ee49a70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ee49c00"/>
        <function-ref name="request" scoped="" ref="0x7f771ee49d90"/>
        <function-ref name="granted" scoped="" ref="0x7f771ee48020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ee481b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7f771ee412a0" loc="52:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7f771ee412a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771ee41620"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ee417b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7f771ee47860" loc="41:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f771ee47860"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f771ee47be0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f771ee47d70"/>
        <function-ref name="start" scoped="" ref="0x7f771ee45020"/>
        <function-ref name="stop" scoped="" ref="0x7f771ee451b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771ec64370" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771ec64370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ec61870"/>
        <function-ref name="fired" scoped="" ref="0x7f771ec63e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ec62c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ec62780"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ec5f1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ec61cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ec62300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ec63020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ec61260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ec634f0"/>
        <function-ref name="stop" scoped="" ref="0x7f771ec639c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f771ee07020" loc="49:../../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f771ee07020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ee03630"/>
        <function-ref name="fired" scoped="" ref="0x7f771ee05a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ee04920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ee044a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ee02020"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ee03ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ee04020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ee07c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ee03020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ee05110"/>
        <function-ref name="stop" scoped="" ref="0x7f771ee055e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f771edfec30" loc="46:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f771edfec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771edf9110"/>
        <function-ref name="fired" scoped="" ref="0x7f771edfc6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771edfa4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771edfa020"/>
        <function-ref name="getdt" scoped="" ref="0x7f771edf9a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f771edf9590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771edfcb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771edfd860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771edfaab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771edfdd30"/>
        <function-ref name="stop" scoped="" ref="0x7f771edfc220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f771edf4500" loc="47:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f771edf4500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771edf6170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771ee02e50" loc="45:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771ee02e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771edfe210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f771ed00870" loc="44:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f771ed00870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ecfd090"/>
        <function-ref name="fired" scoped="" ref="0x7f771ecfe090"/>
        <function-ref name="startAt" scoped="" ref="0x7f771ecfea10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ecfe550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f771ecfd550"/>
        <function-ref name="start" scoped="" ref="0x7f771ecff6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f771ecffbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771ed00020" loc="43:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771ed00020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771ed003a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f771e462870" loc="44:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f771e462870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771e45e090"/>
        <function-ref name="fired" scoped="" ref="0x7f771e460090"/>
        <function-ref name="startAt" scoped="" ref="0x7f771e460a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771e460550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f771e45e550"/>
        <function-ref name="start" scoped="" ref="0x7f771e4616a0"/>
        <function-ref name="stop" scoped="" ref="0x7f771e461bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771e462020" loc="43:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771e462020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771e4623a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f771e446da0" loc="41:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f771e446da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771e445180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771e445310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771e4454a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771e445630"/>
        <function-ref name="fired" scoped="" ref="0x7f771e4457c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f771e44c340" loc="39:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f771e44c340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771e44c6c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771e44c850"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771e44c9e0"/>
        <function-ref name="get" scoped="" ref="0x7f771e44cb70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771e44cd00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771e448020"/>
        <function-ref name="getMode" scoped="" ref="0x7f771e4481b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771e448340"/>
        <function-ref name="overflow" scoped="" ref="0x7f771e4484d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771e448660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771e4487f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f771e448a80" loc="40:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771e448a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771e448e00"/>
        <function-ref name="getControl" scoped="" ref="0x7f771e446020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771e4461b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771e446340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771e4464d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771e446660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771e4467f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771e446980"/>
        <function-ref name="setControl" scoped="" ref="0x7f771e446b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f771edd23f0" loc="52:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f771edd23f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771edd2770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771edd2900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771edd2a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771edd2c20"/>
        <function-ref name="fired" scoped="" ref="0x7f771edd2db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f771edd9cd0" loc="50:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f771edd9cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771edd60a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771edd6230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771edd63c0"/>
        <function-ref name="get" scoped="" ref="0x7f771edd6550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771edd66e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771edd6870"/>
        <function-ref name="getMode" scoped="" ref="0x7f771edd6a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771edd6b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f771edd6d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f771edd5020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771edd51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f771edd5a40" loc="51:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771edd5a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771edd5dc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771edd3020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771edd31b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771edd3340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771edd34d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771edd3660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771edd37f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771edd3980"/>
        <function-ref name="setControl" scoped="" ref="0x7f771edd3b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f771e43ca80" loc="49:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f771e43ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f771e43ce00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f771e43b020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f771e43b1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f771e43b340"/>
        <function-ref name="fired" scoped="" ref="0x7f771e43b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f771e43f190" loc="47:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f771e43f190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771e43f510"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771e43f6a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771e43f830"/>
        <function-ref name="get" scoped="" ref="0x7f771e43f9c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771e43fb50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771e43fce0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771e43fe70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771e43e030"/>
        <function-ref name="overflow" scoped="" ref="0x7f771e43e1c0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771e43e350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771e43e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f771e442020" loc="46:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f771e442020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771e440870"/>
        <function-ref name="fired" scoped="" ref="0x7f771e441840"/>
        <function-ref name="startAt" scoped="" ref="0x7f771e440220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771e441d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f771e440d30"/>
        <function-ref name="start" scoped="" ref="0x7f771e442e30"/>
        <function-ref name="stop" scoped="" ref="0x7f771e441380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f771e443660" loc="45:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f771e443660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f771e4439e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f771e43e770" loc="48:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f771e43e770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f771e43eaf0"/>
        <function-ref name="getControl" scoped="" ref="0x7f771e43ec80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771e43ee10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f771e43c020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f771e43c1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771e43c340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f771e43c4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f771e43c660"/>
        <function-ref name="setControl" scoped="" ref="0x7f771e43c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f771ed79b50" loc="43:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f771ed79b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ed7e9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ed7d360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ed7ee70"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ed7d820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f771ed77b70" loc="43:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f771ed77b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ed749b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ed73360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ed74e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ed73820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f771ed62c50" loc="45:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f771ed62c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f771ed61020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f771ed611b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f771ed61340"/>
        <function-ref name="get" scoped="" ref="0x7f771ed614d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f771ed61660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ed617f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f771ed61980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ed61b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ed61ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f771ed61e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f771ed60020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f771ed71b80" loc="44:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f771ed71b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ed709b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ed62360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ed70e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ed62820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f771ed3f0f0" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f771ed3f0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ed3d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ed3d9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ed3d4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ed3de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f771ed5ccf0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f771ed5ccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ed41b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ed40550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ed40090"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ed40a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f771e45ca90" loc="61:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f771e45ca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771e4592e0"/>
        <function-ref name="fired" scoped="" ref="0x7f771e45a2e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f771e45ac60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771e45a7a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f771e4597a0"/>
        <function-ref name="start" scoped="" ref="0x7f771e45b8d0"/>
        <function-ref name="stop" scoped="" ref="0x7f771e45bde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f771e455210" loc="73:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f771e455210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeacc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f771eeab020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771e453b30"/>
        <function-ref name="fired" scoped="" ref="0x7f771e454a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f771e4534e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771e453020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f771e451020"/>
        <function-ref name="start" scoped="" ref="0x7f771e454090"/>
        <function-ref name="stop" scoped="" ref="0x7f771e4545a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f771e459e10" loc="68:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f771e459e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771e457ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771e456670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771e4561b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f771e456b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f771eccb9c0" loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f771eccb9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771eccbd40"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ecca020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f771eccf850" loc="49:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f771eccf850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771eccb090"/>
        <function-ref name="fired" scoped="" ref="0x7f771eccd090"/>
        <function-ref name="startAt" scoped="" ref="0x7f771eccda10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771eccd550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f771eccb550"/>
        <function-ref name="start" scoped="" ref="0x7f771ecce6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f771eccebb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771ecd42f0" loc="48:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771ecd42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ecd0870"/>
        <function-ref name="fired" scoped="" ref="0x7f771ecd3e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ecd2c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ecd2780"/>
        <function-ref name="getdt" scoped="" ref="0x7f771eccf1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ecd0cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ecd2300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ecd3020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ecd0260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ecd34f0"/>
        <function-ref name="stop" scoped="" ref="0x7f771ecd39c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f771ec7aa00" loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f771ec7aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771ec7ad80"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ec79020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f771ec7f640" loc="49:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f771ec7f640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ec7bc40"/>
        <function-ref name="fired" scoped="" ref="0x7f771ec7c1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ec7b020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ec7cae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ec7a590"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ec7a110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ec7c660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ec7e390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ec7b630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ec7e860"/>
        <function-ref name="stop" scoped="" ref="0x7f771ec7ed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771ec85150" loc="48:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771ec85150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ec81700"/>
        <function-ref name="fired" scoped="" ref="0x7f771ec84c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ec82a50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ec825b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ec7f090"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ec81ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ec82110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ec85d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ec810d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ec842a0"/>
        <function-ref name="stop" scoped="" ref="0x7f771ec84790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f771ec77790" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f771ec77790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ec763f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f771ec76a60" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f771ec76a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f771ec6b890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f771ec6a260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f771ec6bd50"/>
        <function-ref name="overflow" scoped="" ref="0x7f771ec6a720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771ec5ed10" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771ec5ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ec59220"/>
        <function-ref name="fired" scoped="" ref="0x7f771ec5c7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ec5b590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ec5b110"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ec59b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ec596a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ec5cc40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ec5d940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ec5bba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ec5de10"/>
        <function-ref name="stop" scoped="" ref="0x7f771ec5c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f771ec57750" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f771ec57750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771eeac4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f771eeac840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f771ec54c40"/>
        <function-ref name="fired" scoped="" ref="0x7f771ec551e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f771ec54020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f771ec55ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f771ec52590"/>
        <function-ref name="gett0" scoped="" ref="0x7f771ec52110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f771ec55660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f771ec56390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f771ec54630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f771ec56860"/>
        <function-ref name="stop" scoped="" ref="0x7f771ec56d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f771e478020" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f771e478020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e478c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f771e4762a0" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Wrapper1.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f771e4762a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e475020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f771ec2e020" loc="53:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771ec2e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771ec2e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7f771ec28800" loc="70:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7f771ec28800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771ec28b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ec28d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f771ec2c470" loc="58:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ec2c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771ec2b0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7f771ec2b5e0" loc="59:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771ec2b5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771ec29680"/>
        <function-ref name="enable" scoped="" ref="0x7f771ec29200"/>
        <function-ref name="notify" scoped="" ref="0x7f771ec29b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f771ec2d2b0" loc="55:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771ec2d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ec2d630"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771ec2d7c0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771ec2d950"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771ec2dae0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771ec2dc70"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771ec2de00"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771ec2c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f771ec2e5f0" loc="54:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771ec2e5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ec2e970"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ec2eb00"/>
        <function-ref name="request" scoped="" ref="0x7f771ec2ec90"/>
        <function-ref name="granted" scoped="" ref="0x7f771ec2ee20"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ec2d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalFailure" ref="0x7f771ec28020" loc="79:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalFailure" scoped="" ref="0x7f771ec28020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771ec283a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ec28530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f771ea50020" loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <component-ref qname="TestAdcAppC.Wrapper2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ea50020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ea503a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771ea50530"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771ea506c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771ea50850"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771ea509e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771ea50b70"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771ea50d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f771ea4f020" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <component-ref qname="TestAdcAppC.Wrapper2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771ea4f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771ea4f3a0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771ea4f530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771ea51360" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMAC.nc">
      <component-ref qname="TestAdcAppC.Wrapper2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771ea51360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ea516e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ea51870"/>
        <function-ref name="request" scoped="" ref="0x7f771ea51a00"/>
        <function-ref name="granted" scoped="" ref="0x7f771ea51b90"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ea51d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel2" ref="0x7f771ebf6020" loc="51:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel2" scoped="" ref="0x7f771ebf6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771ebf63a0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771ebf6530"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771ebf66c0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771ebf6850"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771ebf69e0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ebf6b70"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771ebf6d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel0" ref="0x7f771ebf8b70" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel0" scoped="" ref="0x7f771ebf8b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771ec1c020"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771ec1c1b0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771ec1c340"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771ec1c4d0"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771ec1c660"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ec1c7f0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771ec1c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771ec04ce0" loc="48:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771ec04ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7f771ec1d0a0"/>
        <function-ref name="init" scoped="" ref="0x7f771ec1d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel1" ref="0x7f771ec1cd60" loc="50:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel1" scoped="" ref="0x7f771ec1cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771ec01180"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771ec01310"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771ec014a0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771ec01630"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771ec017c0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ec01950"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771ec01ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel2" ref="0x7f771ebc7be0" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel2" scoped="" ref="0x7f771ebc7be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771ebc6020"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771ebc61b0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771ebc6340"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771ebc64d0"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771ebc6660"/>
        <function-ref name="getState" scoped="" ref="0x7f771ebc67f0"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771ebc6980"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771ebc6b10"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771ebc6ca0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771ebc6e30"/>
        <function-ref name="aborted" scoped="" ref="0x7f771ebc5020"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771ebc51b0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771ebc5340"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771ebc55d0"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771ebc5760"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771ebc58f0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771ebc5a80"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771ebc5c10"/>
        <function-ref name="reset" scoped="" ref="0x7f771ebc5da0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771ebc4020"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771ebc41b0"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771ebc4340"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771ebc44d0"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771ebc4660"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771ebc47f0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771ebc4b80"/>
        <function-ref name="getSource" scoped="" ref="0x7f771ebc4d10"/>
        <function-ref name="getSize" scoped="" ref="0x7f771ebc3020"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771ebc31b0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ebc3340"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771ebc34d0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771ebc3660"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771ebc37f0"/>
        <function-ref name="setSize" scoped="" ref="0x7f771ebc3980"/>
        <function-ref name="setState" scoped="" ref="0x7f771ebc3b10"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771ebc3ca0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771ebc3e30"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771ebc2020"/>
        <function-ref name="setDst" scoped="" ref="0x7f771ebc21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel0" ref="0x7f771ebce930" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel0" scoped="" ref="0x7f771ebce930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771ebcecb0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771ebcee40"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771ebf1020"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771ebf11b0"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771ebf1340"/>
        <function-ref name="getState" scoped="" ref="0x7f771ebf14d0"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771ebf1660"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771ebf17f0"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771ebf1980"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771ebf1b10"/>
        <function-ref name="aborted" scoped="" ref="0x7f771ebf1ca0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771ebf1e30"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771ebea020"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771ebea2b0"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771ebea440"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771ebea5d0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771ebea760"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771ebea8f0"/>
        <function-ref name="reset" scoped="" ref="0x7f771ebeaa80"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771ebeac10"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771ebeada0"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771ebcd020"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771ebcd1b0"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771ebcd340"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771ebcd4d0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771ebcd860"/>
        <function-ref name="getSource" scoped="" ref="0x7f771ebcd9f0"/>
        <function-ref name="getSize" scoped="" ref="0x7f771ebcdb80"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771ebcdd10"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ebcc020"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771ebcc1b0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771ebcc340"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771ebcc4d0"/>
        <function-ref name="setSize" scoped="" ref="0x7f771ebcc660"/>
        <function-ref name="setState" scoped="" ref="0x7f771ebcc7f0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771ebcc980"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771ebccb10"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771ebccca0"/>
        <function-ref name="setDst" scoped="" ref="0x7f771ebcce30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771ebeb4e0" loc="41:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771ebeb4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7f771ebf2660"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7f771ebeb9f0"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7f771ebebb80"/>
        <function-ref name="setENNMI" scoped="" ref="0x7f771ebebd10"/>
        <function-ref name="getState" scoped="" ref="0x7f771ebf2020"/>
        <function-ref name="reset" scoped="" ref="0x7f771ebf21b0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7f771ebf2340"/>
        <function-ref name="setState" scoped="" ref="0x7f771ebf24d0"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7f771ebeb860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel1" ref="0x7f771ebcb280" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel1" scoped="" ref="0x7f771ebcb280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771ebcb600"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771ebcb790"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771ebcb920"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771ebcbab0"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771ebcbc40"/>
        <function-ref name="getState" scoped="" ref="0x7f771ebcbdd0"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771ebca020"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771ebca1b0"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771ebca340"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771ebca4d0"/>
        <function-ref name="aborted" scoped="" ref="0x7f771ebca660"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771ebca7f0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771ebca980"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771ebcac10"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771ebcada0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771ebc9020"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771ebc91b0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771ebc9340"/>
        <function-ref name="reset" scoped="" ref="0x7f771ebc94d0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771ebc9660"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771ebc97f0"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771ebc9980"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771ebc9b10"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771ebc9ca0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771ebc9e30"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771ebc8220"/>
        <function-ref name="getSource" scoped="" ref="0x7f771ebc83b0"/>
        <function-ref name="getSize" scoped="" ref="0x7f771ebc8540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771ebc86d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ebc8860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771ebc89f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771ebc8b80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771ebc8d10"/>
        <function-ref name="setSize" scoped="" ref="0x7f771ebc7020"/>
        <function-ref name="setState" scoped="" ref="0x7f771ebc71b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771ebc7340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771ebc74d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771ebc7660"/>
        <function-ref name="setDst" scoped="" ref="0x7f771ebc77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DmaControl" ref="0x7f771ebbf020" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <component-ref qname="HplMsp430DmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DmaControl" scoped="" ref="0x7f771ebbf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7f771ebbe1b0"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7f771ebbf530"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7f771ebbf6c0"/>
        <function-ref name="setENNMI" scoped="" ref="0x7f771ebbf850"/>
        <function-ref name="getState" scoped="" ref="0x7f771ebbf9e0"/>
        <function-ref name="reset" scoped="" ref="0x7f771ebbfb70"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7f771ebbfd00"/>
        <function-ref name="setState" scoped="" ref="0x7f771ebbe020"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7f771ebbf3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f771ebbb380" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <component-ref qname="HplMsp430DmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f771ebbb380"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771ebbb700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7f771eb39c90" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7f771eb39c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eb380a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eb38230"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eb383c0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eb38550"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eb386e0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eb38870"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eb38a00"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eb38b90"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eb38d20"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eb37020"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eb371b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eb37340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eb374d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eb37760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eb378f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eb37a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eb37c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eb37da0"/>
        <function-ref name="reset" scoped="" ref="0x7f771eb36020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eb361b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eb36340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eb364d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eb36660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eb367f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eb36980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eb36d10"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eb35020"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eb351b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eb35340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eb354d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eb35660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eb357f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eb35980"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eb35b10"/>
        <function-ref name="setState" scoped="" ref="0x7f771eb35ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eb35e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eb34020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eb341b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eb34340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7f771eb34610" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f771eb34610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771eb34990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7f771eb309b0" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7f771eb309b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eb30d30"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eb2f020"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eb2f1b0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eb2f340"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eb2f4d0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eb2f660"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eb2f7f0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eb2f980"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eb2fb10"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eb2fca0"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eb2fe30"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eb2e020"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eb2e1b0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eb2e440"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eb2e5d0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eb2e760"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eb2e8f0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eb2ea80"/>
        <function-ref name="reset" scoped="" ref="0x7f771eb2ec10"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eb2eda0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eb2d020"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eb2d1b0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eb2d340"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eb2d4d0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eb2d660"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eb2d9f0"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eb2db80"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eb2dd10"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eb2c020"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eb2c1b0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eb2c340"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eb2c4d0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eb2c660"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eb2c7f0"/>
        <function-ref name="setState" scoped="" ref="0x7f771eb2c980"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eb2cb10"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eb2cca0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eb2ce30"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eb2b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7f771eb2b2f0" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f771eb2b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771eb2b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7f771eb263f0" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7f771eb263f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eb26770"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eb26900"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eb26a90"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eb26c20"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eb26db0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eb25020"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eb251b0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eb25340"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eb254d0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eb25660"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eb257f0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eb25980"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eb25b10"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eb25da0"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eb24020"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eb241b0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eb24340"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eb244d0"/>
        <function-ref name="reset" scoped="" ref="0x7f771eb24660"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eb247f0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eb24980"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eb24b10"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eb24ca0"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eb24e30"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eb23020"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eb233b0"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eb23540"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eb236d0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eb23860"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eb239f0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eb23b80"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eb23d10"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eb22020"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eb221b0"/>
        <function-ref name="setState" scoped="" ref="0x7f771eb22340"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eb224d0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eb22660"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eb227f0"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eb22980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7f771eb22c50" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f771eb22c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f771eb21020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7f771eaed020" loc="45:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7f771eaed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eaed3a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eaed530"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eaed6c0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eaed850"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eaed9e0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eaedb70"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eaedd00"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eaec020"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eaec1b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eaec340"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eaec4d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eaec660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eaec7f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eaeca80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eaecc10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eaecda0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eaeb020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eaeb1b0"/>
        <function-ref name="reset" scoped="" ref="0x7f771eaeb340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eaeb4d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eaeb660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eaeb7f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eaeb980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eaebb10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eaebca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eaea220"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eaea3b0"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eaea540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eaea6d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eaea860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eaea9f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eaeab80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eaead10"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eae9020"/>
        <function-ref name="setState" scoped="" ref="0x7f771eae91b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eae9340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eae94d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eae9660"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eae97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7f771eaee020" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7f771eaee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771eaee3a0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771eaee530"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771eaee6c0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771eaee850"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771eaee9e0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eaeeb70"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771eaeed00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7f771eae57a0" loc="45:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7f771eae57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eae5b20"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eae5cb0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eae5e40"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eae4020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eae41b0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eae4340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eae44d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eae4660"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eae47f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eae4980"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eae4b10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eae4ca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eae4e30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eae3120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eae32b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eae3440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eae35d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eae3760"/>
        <function-ref name="reset" scoped="" ref="0x7f771eae38f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eae3a80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eae3c10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eae3da0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eae2020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eae21b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eae2340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eae26d0"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eae2860"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eae29f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eae2b80"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eae2d10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eae1020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eae11b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eae1340"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eae14d0"/>
        <function-ref name="setState" scoped="" ref="0x7f771eae1660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eae17f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eae1980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eae1b10"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eae1ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7f771eae67a0" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7f771eae67a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771eae6b20"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771eae6cb0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771eae6e40"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771eae5020"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771eae51b0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eae5340"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771eae54d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7f771eadddb0" loc="45:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel2P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7f771eadddb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eadc180"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eadc310"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eadc4a0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eadc630"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eadc7c0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eadc950"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eadcae0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eadcc70"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eadce00"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eadb020"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eadb1b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eadb340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eadb4d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eadb760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eadb8f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eadba80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eadbc10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eadbda0"/>
        <function-ref name="reset" scoped="" ref="0x7f771eada020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eada1b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eada340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eada4d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eada660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eada7f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eada980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eadad10"/>
        <function-ref name="getSource" scoped="" ref="0x7f771ead9020"/>
        <function-ref name="getSize" scoped="" ref="0x7f771ead91b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771ead9340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ead94d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771ead9660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771ead97f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771ead9980"/>
        <function-ref name="setSize" scoped="" ref="0x7f771ead9b10"/>
        <function-ref name="setState" scoped="" ref="0x7f771ead9ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771ead9e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771ead8020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771ead81b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f771ead8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7f771eaded80" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel2P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7f771eaded80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771eadd180"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771eadd310"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771eadd4a0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771eadd630"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771eadd7c0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eadd950"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771eaddae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel1" ref="0x7f771eacc420" loc="48:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel1" scoped="" ref="0x7f771eacc420"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eacc7a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eacc930"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eaccac0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eaccc50"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eaccde0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eacb020"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eacb1b0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eacb340"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eacb4d0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eacb660"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eacb7f0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eacb980"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eacbb10"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eacbda0"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eaca020"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eaca1b0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eaca340"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eaca4d0"/>
        <function-ref name="reset" scoped="" ref="0x7f771eaca660"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eaca7f0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eaca980"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eacab10"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eacaca0"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eacae30"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eac9020"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eac93b0"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eac9540"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eac96d0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eac9860"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eac99f0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eac9b80"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eac9d10"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eac8020"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eac81b0"/>
        <function-ref name="setState" scoped="" ref="0x7f771eac8340"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eac84d0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eac8660"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eac87f0"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eac8980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplControl" ref="0x7f771ead2630" loc="46:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplControl" scoped="" ref="0x7f771ead2630"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7f771ead1660"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7f771ead2b40"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7f771ead2cd0"/>
        <function-ref name="setENNMI" scoped="" ref="0x7f771ead2e60"/>
        <function-ref name="getState" scoped="" ref="0x7f771ead1020"/>
        <function-ref name="reset" scoped="" ref="0x7f771ead11b0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7f771ead1340"/>
        <function-ref name="setState" scoped="" ref="0x7f771ead14d0"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7f771ead29b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel2" ref="0x7f771eac8d80" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel2" scoped="" ref="0x7f771eac8d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771eac7180"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771eac7310"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771eac74a0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771eac7630"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771eac77c0"/>
        <function-ref name="getState" scoped="" ref="0x7f771eac7950"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771eac7ae0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771eac7c70"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771eac7e00"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771eac6020"/>
        <function-ref name="aborted" scoped="" ref="0x7f771eac61b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eac6340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eac64d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eac6760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eac68f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eac6a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eac6c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eac6da0"/>
        <function-ref name="reset" scoped="" ref="0x7f771eac5020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eac51b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eac5340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eac54d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eac5660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eac57f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eac5980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eac5d10"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eac4020"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eac41b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eac4340"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eac44d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eac4660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eac47f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eac4980"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eac4b10"/>
        <function-ref name="setState" scoped="" ref="0x7f771eac4ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eac4e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eac3020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eac31b0"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eac3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f771ead5cd0" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f771ead5cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7f771ead20a0"/>
        <function-ref name="init" scoped="" ref="0x7f771ead2230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel0" ref="0x7f771ead1a60" loc="47:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel0" scoped="" ref="0x7f771ead1a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7f771ead1de0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7f771ead0020"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7f771ead01b0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7f771ead0340"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7f771ead04d0"/>
        <function-ref name="getState" scoped="" ref="0x7f771ead0660"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7f771ead07f0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7f771ead0980"/>
        <function-ref name="getDestination" scoped="" ref="0x7f771ead0b10"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7f771ead0ca0"/>
        <function-ref name="aborted" scoped="" ref="0x7f771ead0e30"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7f771eacf020"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f771eacf1b0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7f771eacf440"/>
        <function-ref name="interruptPending" scoped="" ref="0x7f771eacf5d0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7f771eacf760"/>
        <function-ref name="getTrigger" scoped="" ref="0x7f771eacf8f0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7f771eacfa80"/>
        <function-ref name="reset" scoped="" ref="0x7f771eacfc10"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7f771eacfda0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7f771eace020"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7f771eace1b0"/>
        <function-ref name="setSrc" scoped="" ref="0x7f771eace340"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7f771eace4d0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7f771eace660"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7f771eace9f0"/>
        <function-ref name="getSource" scoped="" ref="0x7f771eaceb80"/>
        <function-ref name="getSize" scoped="" ref="0x7f771eaced10"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7f771eacd020"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771eacd1b0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7f771eacd340"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7f771eacd4d0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7f771eacd660"/>
        <function-ref name="setSize" scoped="" ref="0x7f771eacd7f0"/>
        <function-ref name="setState" scoped="" ref="0x7f771eacd980"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7f771eacdb10"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7f771eacdca0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7f771eacde30"/>
        <function-ref name="setDst" scoped="" ref="0x7f771eacc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSingleChannel" ref="0x7f771ea9fe50" loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAP.nc">
      <component-ref qname="Msp430Adc12DMAP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSingleChannel" scoped="" ref="0x7f771ea9fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ea9e210"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771ea9e3a0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771ea9e530"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771ea9e6c0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771ea9e850"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771ea9e9e0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771ea9eb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f771eaa2b70" loc="41:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAP.nc">
      <component-ref qname="Msp430Adc12DMAP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771eaa2b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771eaa1020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771eaa11b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771eaa1340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771eaa14d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771eaa1660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771eaa17f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771eaa1980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DMAControl" ref="0x7f771eaa1db0" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAP.nc">
      <component-ref qname="Msp430Adc12DMAP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAControl" scoped="" ref="0x7f771eaa1db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7f771eaa0180"/>
        <function-ref name="init" scoped="" ref="0x7f771eaa0310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DMAChannel" ref="0x7f771eaa06c0" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAP.nc">
      <component-ref qname="Msp430Adc12DMAP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAChannel" scoped="" ref="0x7f771eaa06c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7f771eaa0a40"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7f771eaa0bd0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7f771eaa0d60"/>
        <function-ref name="startTransfer" scoped="" ref="0x7f771ea9f020"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7f771ea9f1b0"/>
        <function-ref name="transferDone" scoped="" ref="0x7f771ea9f340"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7f771ea9f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncAdcControl" ref="0x7f771ea9c4d0" loc="47:../../../../tos/chips/msp430/adc12/Msp430Adc12DMAP.nc">
      <component-ref qname="Msp430Adc12DMAP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncAdcControl" scoped="" ref="0x7f771ea9c4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f771ea9c850"/>
        <function-ref name="stop" scoped="" ref="0x7f771ea9c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f771ea4a990" loc="53:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771ea4a990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771ea4ad10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7f771ea432f0" loc="70:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7f771ea432f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771ea43670"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ea43800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f771ea48dd0" loc="58:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ea48dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771ea46ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7f771ea45020" loc="59:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771ea45020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771ea440d0"/>
        <function-ref name="enable" scoped="" ref="0x7f771ea45c10"/>
        <function-ref name="notify" scoped="" ref="0x7f771ea44550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f771ea49c70" loc="55:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f771ea49c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ea48020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771ea481b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771ea48340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771ea484d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771ea48660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771ea487f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771ea48980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f771ea49020" loc="54:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771ea49020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ea493a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ea49530"/>
        <function-ref name="request" scoped="" ref="0x7f771ea496c0"/>
        <function-ref name="granted" scoped="" ref="0x7f771ea49850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ea499e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalFailure" ref="0x7f771ea44a10" loc="79:TestAdcSingleC.nc">
      <component-ref qname="TestAdcAppC.TestSingle3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalFailure" scoped="" ref="0x7f771ea44a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771ea44d90"/>
        <function-ref name="runTask" scoped="" ref="0x7f771ea43020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f771ea2c400" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771ea2c400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771ea2c780"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771ea2c910"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771ea2caa0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771ea2cc30"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771ea2cdc0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771ea2a020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771ea2a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f771ea2a400" loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771ea2a400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771ea2a780"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771ea2a910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f771ea2ad40" loc="52:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771ea2ad40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771ea299c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771ea2d670" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoDMA_RVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771ea2d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771ea2d9f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771ea2db80"/>
        <function-ref name="request" scoped="" ref="0x7f771ea2dd10"/>
        <function-ref name="granted" scoped="" ref="0x7f771ea2c020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771ea2c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f771e2893c0" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Wrapper3.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f771e2893c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e288020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f771e288630" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Wrapper3.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f771e288630"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e2863d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MultiChannel" ref="0x7f771e9f9c70" loc="58:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f771e9f9c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771e9f7020"/>
        <function-ref name="configure" scoped="" ref="0x7f771e9f71b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771e9f7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f771e9fa990" loc="56:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771e9fa990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771e9fad10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSuccess" ref="0x7f771e9f4490" loc="82:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSuccess" scoped="" ref="0x7f771e9f4490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e9f4810"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e9f49a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7f771e9f2480" loc="75:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7f771e9f2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e9f2800"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e9f2990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7f771e9f7710" loc="61:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771e9f7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771e9f6810"/>
        <function-ref name="enable" scoped="" ref="0x7f771e9f6390"/>
        <function-ref name="notify" scoped="" ref="0x7f771e9f6c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f771e9f52c0" loc="62:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771e9f52c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e9f4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f771e9f9020" loc="57:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771e9f9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771e9f93a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771e9f9530"/>
        <function-ref name="request" scoped="" ref="0x7f771e9f96c0"/>
        <function-ref name="granted" scoped="" ref="0x7f771e9f9850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771e9f99e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalFailure" ref="0x7f771e9f4c70" loc="77:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalFailure" scoped="" ref="0x7f771e9f4c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e9f2020"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e9f21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f771e9ee720" loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771e9ee720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771e9eeaa0"/>
        <function-ref name="configure" scoped="" ref="0x7f771e9eec30"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771e9eedc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f771e9ef720" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771e9ef720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771e9efaa0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771e9efc30"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771e9efdc0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771e9ee020"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771e9ee1b0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771e9ee340"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771e9ee4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f771e9ed060" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771e9ed060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771e9ed3e0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771e9ed570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771e9f0a50" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientC.nc">
      <component-ref qname="TestAdcAppC.Wrapper4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771e9f0a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771e9f0dd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771e9ef020"/>
        <function-ref name="request" scoped="" ref="0x7f771e9ef1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f771e9ef340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771e9ef4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MultiChannel" ref="0x7f771e9e5770" loc="58:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f771e9e5770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771e9e5af0"/>
        <function-ref name="configure" scoped="" ref="0x7f771e9e5c80"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771e9e5e10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f771e9e7530" loc="56:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f771e9e7530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f771e9e78b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSuccess" ref="0x7f771e9e2e30" loc="82:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSuccess" scoped="" ref="0x7f771e9e2e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e9e01e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e9e0370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7f771e9e0e20" loc="75:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7f771e9e0e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e9df1c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e9df350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7f771e9e4220" loc="61:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7f771e9e4220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7f771e9e3300"/>
        <function-ref name="enable" scoped="" ref="0x7f771e9e4e10"/>
        <function-ref name="notify" scoped="" ref="0x7f771e9e3780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f771e9e3d60" loc="62:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771e9e3d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e9e29c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f771e9e7b00" loc="57:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771e9e7b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771e9e7e80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771e9e5030"/>
        <function-ref name="request" scoped="" ref="0x7f771e9e51c0"/>
        <function-ref name="granted" scoped="" ref="0x7f771e9e5350"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771e9e54e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalFailure" ref="0x7f771e9e0640" loc="77:TestAdcMultiC.nc">
      <component-ref qname="TestAdcAppC.TestMulti2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalFailure" scoped="" ref="0x7f771e9e0640"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f771e9e09c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f771e9e0b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f771e9db060" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f771e9db060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771e9db3e0"/>
        <function-ref name="configure" scoped="" ref="0x7f771e9db570"/>
        <function-ref name="dataReady" scoped="" ref="0x7f771e9db700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f771e9dc0f0" loc="47:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f771e9dc0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f771e9dc470"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f771e9dc600"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f771e9dc790"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f771e9dc920"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f771e9dcab0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f771e9dcc40"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f771e9dcdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f771e9db950" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f771e9db950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f771e9dbcd0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f771e9dbe60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f771e9da2c0" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f771e9da2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e9d9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f771e9dd4b0" loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f771e9dd4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f771e9dd830"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f771e9dd9c0"/>
        <function-ref name="request" scoped="" ref="0x7f771e9ddb50"/>
        <function-ref name="granted" scoped="" ref="0x7f771e9ddce0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f771e9dde70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f771e2460a0" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f771e2460a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e246cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f771e245300" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Wrapper5.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f771e245300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f771e244020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f771f53f560" loc="62:../../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f771f540190" loc="60:../../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f771f505b40" loc="48:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f771f507de0" loc="43:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f771f505420" loc="47:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f771f507700" loc="42:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f771f5065a0" loc="45:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f771f50a900" loc="40:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f771f507020" loc="41:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f771f506cc0" loc="46:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f771f83a020" loc="62:../../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f771fafb3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f771f4b3500" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f771f4b3280" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f771f4c09c0" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f771f4fc5a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f771f4fb020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f771f4b3d70" loc="57:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f771f4b2c80" loc="59:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f771f4b4b00" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f771f4b24f0" loc="58:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f771f4b5190" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f771f4b5920" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f771f4b4390" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f771f4fc5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f771f4fb020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f771f4b4110" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f771f4fc5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f771f4fb020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f771f4a4560" loc="44:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f771f4a2ca0" loc="84:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f771f4a2a20" loc="84:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f771f4a19d0" loc="91:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f771f4a1750" loc="91:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f771f4a2270" loc="73:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f771f4a3940" loc="68:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f771f4a3020" loc="56:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f771f4a4c90" loc="56:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f771f4ae890" loc="40:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f771f4ab2a0" loc="41:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f771f4ab020" loc="41:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f771f4abc80" loc="42:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f771f4aba00" loc="42:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f771f4aa6a0" loc="43:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f771f4aa420" loc="43:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f771f4aad90" loc="45:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f771f4bb120" loc="52:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f771f4baa10" loc="55:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f771f4ba790" loc="55:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f771f4bb850" loc="53:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f771f4bf350" loc="45:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f771f4ba020" loc="54:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f771f4be270" loc="47:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f771f4bd9e0" loc="51:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f771f4bfae0" loc="46:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f771f4be980" loc="48:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f771f4bd2e0" loc="50:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f771f4bd060" loc="50:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f771f4b9450" loc="56:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f771f4b91d0" loc="56:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f771f47b1f0" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f771f58c7f0" loc="85:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f771f589020" loc="86:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f771f58c020" loc="79:../../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f771fa14810" loc="52:../../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f771fbba020" loc="57:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f771fbb9020" loc="72:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f771fbba790" loc="65:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f771fbae270" loc="67:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f771fbaeac0" loc="75:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f771f364190" loc="62:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f771f364940" loc="68:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f771f362190" loc="73:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f771f361120" loc="84:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f771f360890" loc="101:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f771f35e0e0" loc="117:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f771f362920" loc="78:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f771f35ec50" loc="134:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f771f35e9d0" loc="134:../../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f771f3659d0" loc="57:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f771f361900" loc="90:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f771f3600e0" loc="95:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f771f3558a0" loc="44:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f771f353020" loc="45:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f771f356a40" loc="42:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f771f353e80" loc="47:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f771f355190" loc="43:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f771f353740" loc="46:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f771f359c40" loc="40:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f771f356350" loc="41:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f771f32a880" loc="78:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f771f328020" loc="80:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f771f324b10" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f771f324890" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f771f32b120" loc="58:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f771f327020" loc="87:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f771f323490" loc="117:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f771f328760" loc="85:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f771f32a0e0" loc="73:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f771f326770" loc="99:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f771f32b8c0" loc="66:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f771f32c270" loc="48:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f771f3277a0" loc="92:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f771f324020" loc="101:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f771f326020" loc="94:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f771f32c9a0" loc="53:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Notify" loc="52:../../../../tos/interfaces/Notify.nc">
      <documentation loc="33:../../../../tos/interfaces/Notify.nc">
        <short>&#10; The Notify interface is intended for delivery of values from&#10; self-triggered devices, at relatively low rates.</short>
        <long>&#10; The Notify interface is intended for delivery of values from&#10; self-triggered devices, at relatively low rates. For example, a&#10; driver for a motion detector or a switch might provide this&#10; interface. The type of the value is given as a template&#10; argument. Generally, these values are backed by memory or&#10; computation. Because no error code is included, both calls must be&#10; guaranteed to succeed. This interface should be used when a single&#10; logical unit supports both getting and setting.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be stored&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f771f0f1a00" loc="52:../../../../tos/interfaces/Notify.nc">
          <interfacedef-ref qname="Notify"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f771f0f1a00"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="disable" ref="0x7f771f0eeb70" loc="67:../../../../tos/interfaces/Notify.nc">
        <documentation loc="61:../../../../tos/interfaces/Notify.nc">
          <short>&#10; Disables delivery of notifications from the device to the calling&#10; generic client component.</short>
          <long>&#10; Disables delivery of notifications from the device to the calling&#10; generic client component.&#10;&#10; @return SUCCESS if notifications were disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Notify"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f771f0ee350" loc="59:../../../../tos/interfaces/Notify.nc">
        <documentation loc="53:../../../../tos/interfaces/Notify.nc">
          <short>&#10; Enables delivery of notifications from the device to the calling&#10; generic client component.</short>
          <long>&#10; Enables delivery of notifications from the device to the calling&#10; generic client component.&#10;&#10; @return SUCCESS if notifications were enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Notify"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="notify" ref="0x7f771f0ec5d0" loc="74:../../../../tos/interfaces/Notify.nc">
        <documentation loc="69:../../../../tos/interfaces/Notify.nc">
          <short>&#10; Signals the arrival of a new value from the device.</short>
          <long>&#10; Signals the arrival of a new value from the device.&#10;&#10; @param val the value arriving from the device&#10;</long>
        </documentation>
        <interfacedef-ref qname="Notify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f771f0f1a00"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f771f0ec350" loc="74:../../../../tos/interfaces/Notify.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f771f0f1a00"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7f771f0d6690" loc="45:../../../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f771f0d6690"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7f771f0c50e0" loc="58:../../../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f771f0d6690"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f771f0ccdf0" loc="189:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7f771f0d58c0" loc="84:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f771f0d5640" loc="84:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7f771f0d4de0" loc="106:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f771f0d47e0" loc="106:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7f771f0d4b50" loc="106:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7f771f0cd9c0" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f771f0cf700" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f771f0cd020" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f771f0cd3a0" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f771f0cd710" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7f771f0c9770" loc="227:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f771f0c90d0" loc="227:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f771f0c9460" loc="227:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7f771f0d02d0" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f771f0d1020" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f771f0d18c0" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f771f0d1c50" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f771f0d0020" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7f771f0cbad0" loc="206:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f771f0cb850" loc="206:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f771f0d8350" loc="120:../../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f771f0da350" loc="97:../../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f771f0db940" loc="88:../../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f771f0dab40" loc="102:../../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f771f0d8db0" loc="128:../../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f771f08a0e0" loc="97:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f771f08b3e0" loc="86:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f771f55b020"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f771f55b4f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f771f090e60" loc="86:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f771f55c430"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f771f55db00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7f771f08c280" loc="87:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f771f55b020"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f771f55b4f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7f771f08c5f0" loc="87:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7f771f08c990" loc="87:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f771f08cd40" loc="88:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f771f08b110" loc="88:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f771f088040" loc="107:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f771f08a9f0" loc="107:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f771f08ad80" loc="107:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7f771f08f8d0" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7f771f0860e0" loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f771f07fe10" loc="95:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f771f07c6a0" loc="105:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7f771f06d560" loc="63:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771f54a0f0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7f771f54ab30"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7f771f06a6c0" loc="82:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f771f55b020"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7f771f55b4f0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f771f06a440" loc="82:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7f771f068d90" loc="106:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7f771f065020" loc="118:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7f771f0677d0" loc="112:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7f771f067550" loc="112:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7f771f06dd80" loc="68:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771f5471d0"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7f771f547ab0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7f771f06cb70" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f771f55b020"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f771f55b4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f771f06c520" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7f771f06c8e0" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f771f55b020"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f771f55b4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7f771f0640e0" loc="128:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7f771f06e2a0" loc="51:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771f54a0f0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f771f54ab30"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7f771f06e020" loc="51:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771f54a0f0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f771f54ab30"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7f771f0692a0" loc="89:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f771f069020" loc="89:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7f771f069d20" loc="95:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f771f069aa0" loc="95:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7f771f0685d0" loc="101:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7f771f0657e0" loc="123:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7f771f064880" loc="133:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7f771f06ed00" loc="57:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771f5471d0"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f771f547ab0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7f771f06ea80" loc="57:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f771f5471d0"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f771f547ab0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f771f073da0" loc="90:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f771f0706b0" loc="98:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f7720615160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f771ef58b20" loc="53:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f771ef544e0" loc="61:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f771ef51550" loc="65:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f771ef56cf0" loc="59:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f771ef48580" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f771ef525e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f771ef48300" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f771ef525e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f771ef4a5a0" loc="53:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f771ef49110" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f771ef525e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f771ef4ae20" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f771ef525e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f771ef49a20" loc="70:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f771ef525e0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771eeabdd0" loc="53:../../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771eeabdd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f771eea3c10" loc="136:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f771eea7420" loc="83:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f771eea52b0" loc="114:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f771eea6bd0" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f771eea5020" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f771eea6420" loc="98:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f771eea2c60" loc="151:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f771eea23e0" loc="144:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f771eea7c00" loc="92:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f771eeaa970" loc="64:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f771eeaa6f0" loc="64:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f771eea32b0" loc="129:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f771eea5c50" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f771eea3020" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f771eea84d0" loc="73:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f771eea8250" loc="73:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f771eea8cd0" loc="78:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f771eeb3730" loc="113:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f771eeb34b0" loc="113:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f771eeb2c80" loc="138:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f771eeb2a00" loc="138:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f771eeb6a80" loc="104:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f771eeb2020" loc="130:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771edf76d0" loc="53:../../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771edf76d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f771edf4020" loc="61:../../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f7720615920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771edef070" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771edef070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f771edef2b0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f771edebe00" loc="109:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f771edeee40" loc="78:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f771edeb460" loc="103:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f771edece60" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f771edeb1d0" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f771edec640" loc="88:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f771edea620" loc="116:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f771edefe10" loc="66:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f771edefb90" loc="66:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771edef2b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f771edee680" loc="73:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f771ed7c100" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f771ed7c100"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f771ed7c340" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771ed7c340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f771ed7cc60" loc="64:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f771ed7c340"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f771ed7ad70" loc="76:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f771ed7a510" loc="71:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f771ed79500" loc="82:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430DmaChannel" loc="41:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="stopTransfer" ref="0x7f771ebf9da0" loc="102:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="99:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Stop a DMA transfer in progress&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="repeatTransfer" ref="0x7f771ebfacc0" loc="91:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="86:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Repeat a DMA transfer using previous settings but new pointers&#10; and transfer size.</short>
          <long>&#10; Repeat a DMA transfer using previous settings but new pointers&#10; and transfer size.  Automatically starts the transfer (sets the&#10; enable bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src_addr" ref="0x7f771ebfa350" loc="91:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dst_addr" ref="0x7f771ebfa6b0" loc="91:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f771ebfaa20" loc="92:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setupTransfer" ref="0x7f771ebfe6e0" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="43:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Setup a transfer using explicit argument (most robust and simple&#10; mechanism and recommended for novice users)&#10;&#10; See MSP430DMA.h for parameter options&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0f6b0"/>
              <typename><typedef-ref name="dma_transfer_mode_t" ref="0x7f771ec0d4a0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec19e90"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f771ec15a60"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0a2d0"/>
              <typename><typedef-ref name="dma_level_t" ref="0x7f771ec0ad00"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0b620"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f771ec0a020"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0b620"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f771ec0a020"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0c4c0"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f771ec0b390"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0c4c0"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f771ec0b390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="transfer_mode" ref="0x7f771ec001a0" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0f6b0"/>
              <typename><typedef-ref name="dma_transfer_mode_t" ref="0x7f771ec0d4a0"/></typename>
            </type-tag>
          </variable>
          <variable name="trigger" ref="0x7f771ec00560" loc="50:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec19e90"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f771ec15a60"/></typename>
            </type-tag>
          </variable>
          <variable name="level" ref="0x7f771ec008f0" loc="51:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0a2d0"/>
              <typename><typedef-ref name="dma_level_t" ref="0x7f771ec0ad00"/></typename>
            </type-tag>
          </variable>
          <variable name="src_addr" ref="0x7f771ec00c70" loc="52:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dst_addr" ref="0x7f771ebff020" loc="53:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f771ebff390" loc="54:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="src_byte" ref="0x7f771ebff740" loc="55:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0b620"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f771ec0a020"/></typename>
            </type-tag>
          </variable>
          <variable name="dst_byte" ref="0x7f771ebffaf0" loc="56:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0b620"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7f771ec0a020"/></typename>
            </type-tag>
          </variable>
          <variable name="src_incr" ref="0x7f771ebfe020" loc="57:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0c4c0"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f771ec0b390"/></typename>
            </type-tag>
          </variable>
          <variable name="dst_incr" ref="0x7f771ebfe3d0" loc="58:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec0c4c0"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7f771ec0b390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startTransfer" ref="0x7f771ebfbad0" loc="84:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="80:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Enable the DMA module.</short>
          <long>&#10; Enable the DMA module.  Equivalent to setting the DMA enable bit.&#10; This function does not force a transfer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setupTransferRaw" ref="0x7f771ebfb020" loc="77:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="60:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Raw interface for setting up a DMA transfer.</short>
          <long>&#10; Raw interface for setting up a DMA transfer.  This function is&#10; intended to provide as much raw performance as possible but&#10; sacrifices type checking in the process.  Recommended ONLY for&#10; advanced users that have very intricate knowledge of the MSP430&#10; DMA module described in the user's guide.&#10;&#10; @param state The control register value, as specified by &#10;              dma_control_state_t in MSP430DMA.h&#10; @param trigger The trigger for the DMA transfer.  Should be one&#10;                of the options from dma_trigger_t in MSP430DMA.h&#10; @param src Pointer to the source address&#10; @param dest Pointer to the destination address&#10; @param size Size of the DMA transfer&#10;&#10; See MSP430DMA.h for parameter options&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x7f771ebfd020" loc="77:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="trigger" ref="0x7f771ebfd390" loc="77:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="src" ref="0x7f771ebfd6d0" loc="78:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7f771ebfda00" loc="78:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f771ebfdcf0" loc="78:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="transferDone" ref="0x7f771ebf87e0" loc="107:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="104:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Notification that the transfer has completed&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7f771ebf8560" loc="107:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="softwareTrigger" ref="0x7f771ebf95d0" loc="97:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="94:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Trigger a DMA transfer using software&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430DmaControl" loc="40:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
      <function command="" provided="0" name="setFlags" ref="0x7f771ec04990" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
        <interfacedef-ref qname="Msp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enable_nmi" ref="0x7f771ec04020" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
          </variable>
          <variable name="round_robin" ref="0x7f771ec04380" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
          </variable>
          <variable name="on_fetch" ref="0x7f771ec046f0" loc="43:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x7f771ec05810" loc="41:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
        <interfacedef-ref qname="Msp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaChannel" loc="38:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableDMA" ref="0x7f771ebdc740" loc="61:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearTrigger" ref="0x7f771ebe9e10" loc="40:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstDecrement" ref="0x7f771ebe1070" loc="51:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLevelSensitive" ref="0x7f771ebdd780" loc="58:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcIncrement" ref="0x7f771ebe3190" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getState" ref="0x7f771ebd2580" loc="77:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7f771ec080c0"/>
            <typename><typedef-ref name="dma_channel_state_t" ref="0x7f771ec05020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordToWord" ref="0x7f771ebe0030" loc="53:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTrigger" ref="0x7f771ebe96e0" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec19e90"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f771ec15a60"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="trigger" ref="0x7f771ebe9460" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f771ec19e90"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7f771ec15a60"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestination" ref="0x7f771ebd14f0" loc="79:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedBlockMode" ref="0x7f771ebe5350" loc="45:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="aborted" ref="0x7f771ebda950" loc="68:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setByteToByte" ref="0x7f771ebdf760" loc="56:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f771ebdb020" loc="63:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterrupt" ref="0x7f771ebdb780" loc="64:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="interruptPending" ref="0x7f771ebda020" loc="66:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f771fbbe090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStateRaw" ref="0x7f771ebd3d70" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x7f771ebd5d50" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="trigger" ref="0x7f771ebd3110" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
          <variable name="src" ref="0x7f771ebd3430" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7f771ebd3760" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f771ebd3ab0" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTrigger" ref="0x7f771ebcf490" loc="81:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7f771ec15e20"/>
            <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7f771ec139a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstIncrement" ref="0x7f771ebe18c0" loc="52:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f771ebcfb80" loc="83:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSingleMode" ref="0x7f771ebe8590" loc="41:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerDMA" ref="0x7f771ebd80e0" loc="69:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setByteToWord" ref="0x7f771ebe0770" loc="54:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrc" ref="0x7f771ebd8a30" loc="71:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="saddr" ref="0x7f771ebd87b0" loc="71:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedSingleMode" ref="0x7f771ebe6bb0" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcNoIncrement" ref="0x7f771ebe4270" loc="47:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBurstMode" ref="0x7f771ebe6420" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSource" ref="0x7f771ebd2cd0" loc="78:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSize" ref="0x7f771ebd1c50" loc="80:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcDecrement" ref="0x7f771ebe49c0" loc="48:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="transferDone" ref="0x7f771ebce5d0" loc="85:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7f771ebce350" loc="85:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f771fbb5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableDMA" ref="0x7f771ebdc020" loc="60:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedBurstMode" ref="0x7f771ebe5ad0" loc="46:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBlockMode" ref="0x7f771ebe8cc0" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSize" ref="0x7f771ebd7d30" loc="73:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sz" ref="0x7f771ebd7ab0" loc="73:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setState" ref="0x7f771ebd5630" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7f771ec080c0"/>
              <typename><typedef-ref name="dma_channel_state_t" ref="0x7f771ec05020"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7f771ec15e20"/>
              <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7f771ec139a0"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7f771ebd64b0" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7f771ec080c0"/>
              <typename><typedef-ref name="dma_channel_state_t" ref="0x7f771ec05020"/></typename>
            </type-tag>
          </variable>
          <variable name="t" ref="0x7f771ebd6860" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7f771ec15e20"/>
              <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7f771ec139a0"/></typename>
            </type-tag>
          </variable>
          <variable name="src" ref="0x7f771ebd6b80" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7f771ebd5020" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7f771ebd5370" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f7720615520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstNoIncrement" ref="0x7f771ebe38f0" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdgeSensitive" ref="0x7f771ebdd020" loc="57:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordToByte" ref="0x7f771ebdf020" loc="55:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDst" ref="0x7f771ebd73d0" loc="72:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="daddr" ref="0x7f771ebd7150" loc="72:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaControl" loc="40:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearENNMI" ref="0x7f771ebee910" loc="47:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoundRobin" ref="0x7f771ebef350" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOnFetch" ref="0x7f771ebf0bc0" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setENNMI" ref="0x7f771ebee1f0" loc="46:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getState" ref="0x7f771ebeca60" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7f771ec11890"/>
            <typename><typedef-ref name="dma_state_t" ref="0x7f771ec10a90"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f771ebeb190" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOnFetch" ref="0x7f771ebf0490" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setState" ref="0x7f771ebec2e0" loc="48:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7f771ec11890"/>
              <typename><typedef-ref name="dma_state_t" ref="0x7f771ec10a90"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7f771ebec060" loc="48:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7f771ec11890"/>
              <typename><typedef-ref name="dma_state_t" ref="0x7f771ec10a90"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearRoundRobin" ref="0x7f771ebefaa0" loc="45:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaInterrupt" loc="38:../../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f771ebbb020" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
