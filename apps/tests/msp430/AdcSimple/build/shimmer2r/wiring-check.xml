<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="48:AdcSimpleAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fd82f4da5b0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fd82f6cc870"/></to>
    </wire>
    <wire loc="72:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fd82f6cc870"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fd82f504590"/></to>
    </wire>
    <wire loc="49:AdcSimpleAppC.nc">
      <from><interface-ref name="VoltageRead" scoped="" ref="0x7fd82f4d7020"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fd82edf1b10"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fd82edf1b10"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fd82f4b77d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:AdcSimpleAppC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82edee370"/></from>
      <to><interface-ref name="VoltageConfigure" scoped="" ref="0x7fd82f4d84a0"/></to>
    </wire>
    <wire loc="51:AdcSimpleAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fd82f4c7500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fd82edea1a0"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fd82edea1a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fd82ede6a70"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f6ced80"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82efc3e50"/></to>
    </wire>
    <wire loc="96:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f6ced80"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82ebe9620"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f6ced80"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82f434660"/></to>
    </wire>
    <wire loc="67:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fd82f504c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fd82fd2b3a0"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fd82fd2b3a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fd82f703c30"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fd82f4ff6c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82f6cdda0"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fd82f6cdda0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82f6c8bf0"/></to>
    </wire>
    <wire loc="71:../../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f4ffdc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f6ced80"/></to>
    </wire>
    <wire loc="47:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fd82f6c53b0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7fd82f6c6910"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fd82f6c6910"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82f698850"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fd82f6c5a90"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82f6c79b0"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7fd82f6c41b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82edbd2e0"/></to>
    </wire>
    <wire loc="46:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fd82f698850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82f6807e0"/></to>
    </wire>
    <wire loc="47:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fd82f68fde0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fd82f67e020"/></to>
    </wire>
    <wire loc="48:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fd82f9ac4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fd82f67d360"/></to>
    </wire>
    <wire loc="113:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7fd82f63a5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f5786d0"/></to>
    </wire>
    <wire loc="126:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7fd82f628020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f570b30"/></to>
    </wire>
    <wire loc="108:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7fd82f631700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f57d160"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7fd82f615a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f557cb0"/></to>
    </wire>
    <wire loc="107:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fd82f638aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f57e480"/></to>
    </wire>
    <wire loc="148:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7fd82f61c020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f557020"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7fd82f612a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f53fcb0"/></to>
    </wire>
    <wire loc="154:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7fd82f6235a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f550220"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fd82f63bb10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f5cd9d0"/></to>
    </wire>
    <wire loc="135:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7fd82f618a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f5662f0"/></to>
    </wire>
    <wire loc="134:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7fd82f61e3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f567610"/></to>
    </wire>
    <wire loc="133:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7fd82f6275a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f568220"/></to>
    </wire>
    <wire loc="115:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7fd82f630700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f5767a0"/></to>
    </wire>
    <wire loc="156:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7fd82f614a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f54e2f0"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7fd82f626be0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f5606d0"/></to>
    </wire>
    <wire loc="114:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7fd82f637890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f577ac0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fd82f64b060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5db540"/></to>
    </wire>
    <wire loc="155:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7fd82f61cda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f54f610"/></to>
    </wire>
    <wire loc="106:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fd82f6420c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f57f020"/></to>
    </wire>
    <wire loc="161:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7fd82f622a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f5496d0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7fd82f62b6d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f586a90"/></to>
    </wire>
    <wire loc="142:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7fd82f616a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f55e7a0"/></to>
    </wire>
    <wire loc="100:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fd82f634cf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f587de0"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7fd82f61d1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f55fac0"/></to>
    </wire>
    <wire loc="163:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7fd82f613a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f5477a0"/></to>
    </wire>
    <wire loc="147:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7fd82f6240c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f559b30"/></to>
    </wire>
    <wire loc="120:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="162:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7fd82f61bb80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f548ac0"/></to>
    </wire>
    <wire loc="128:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7fd82f619a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fd82f56ecb0"/></to>
    </wire>
    <wire loc="169:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7fd82f61aa20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f53f020"/></to>
    </wire>
    <wire loc="127:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7fd82f61f570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fd82f56e020"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7fd82f620020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fd82f542b30"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fd82f5d9450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5dad80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fd82f5d9aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7fd82f53aa90"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fd82f5d8120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7fd82f537260"/></to>
    </wire>
    <wire loc="102:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f585930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5db540"/></to>
    </wire>
    <wire loc="103:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f582020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5dad80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f57c020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5db540"/></to>
    </wire>
    <wire loc="110:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f57b7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5dad80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f575610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5db540"/></to>
    </wire>
    <wire loc="117:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f574c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5dad80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fd82f5d22f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fd82f5d2940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7fd82f5379f0"/></to>
    </wire>
    <wire loc="123:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fd82f5d1020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7fd82f536240"/></to>
    </wire>
    <wire loc="129:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f56db40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="130:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f56b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f565160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f5647a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f55d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="144:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f55cc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f556b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="151:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f5542f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f54d160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="158:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f54c7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f546610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f545c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82f53eb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></to>
    </wire>
    <wire loc="172:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fd82f53c2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fd82f702b70"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fd82f6fb2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fd82fd1d3b0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fd82f4a7740"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82edee370"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f495b10"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fd82ec13020"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fd82ec13020"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f43d1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7fd82f4aee40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fd82ec14360"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fd82ec14360"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7fd82f084750"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82ec11280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82edee370"/></to>
    </wire>
    <wire loc="136:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x7fd82f4785c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fd82ec12020"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7fd82f43c960"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fd82ec12910"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7fd82f43b920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7fd82f083ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fd82f44acd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7fd82ec02cc0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82ec11280"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fd82f07b1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7fd82ec03a40"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7fd82f43c960"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7fd82f432af0"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7fd82f4391d0"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7fd82f42f910"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fd82f43b920"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7fd82f431ab0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f43d1d0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f433370"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fd82f44acd0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fd82f2a9520"/></to>
    </wire>
    <wire loc="98:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fd82f2a9520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fd82ebe7b90"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7fd82f42bb30"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fd82f2a8b20"/></to>
    </wire>
    <wire loc="100:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fd82f2a8b20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fd82ebe5270"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f41eb80"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f341080"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fd82f40b870"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7fd82f24f200"/></to>
    </wire>
    <wire loc="493:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fd82f24f200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f120100"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fd82f4157d0"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7fd82f24d200"/></to>
    </wire>
    <wire loc="494:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fd82f24d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f11cd10"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fd82f409640"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7fd82f24b200"/></to>
    </wire>
    <wire loc="495:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fd82f24b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f117740"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fd82f407540"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7fd82f249200"/></to>
    </wire>
    <wire loc="496:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fd82f249200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f112100"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fd82f405540"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7fd82f247200"/></to>
    </wire>
    <wire loc="497:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fd82f247200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f10ed10"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fd82f403540"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7fd82f245200"/></to>
    </wire>
    <wire loc="498:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fd82f245200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f109740"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fd82f401540"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7fd82f243200"/></to>
    </wire>
    <wire loc="499:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fd82f243200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f104100"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fd82f3ff540"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7fd82f241200"/></to>
    </wire>
    <wire loc="500:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fd82f241200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f100d10"/></to>
    </wire>
    <wire loc="74:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fd82f429aa0"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7fd82f64b060"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fd82f41b220"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7fd82f63bb10"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fd82f41a6f0"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7fd82f6420c0"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fd82f419b70"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7fd82f634cf0"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fd82f4189e0"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7fd82f638aa0"/></to>
    </wire>
    <wire loc="99:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fd82f2a83a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fd82ebe69e0"/></to>
    </wire>
    <wire loc="101:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fd82ebe5b60"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fd82f2a7570"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fd82ebe3440"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7fd82ebe9c30"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fd82ebe2020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="442:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fd82f299020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1cd100"/></to>
    </wire>
    <wire loc="455:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fd82f284020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f19ed10"/></to>
    </wire>
    <wire loc="531:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7fd82f23b560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f18fd10"/></to>
    </wire>
    <wire loc="551:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7fd82f216570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f104100"/></to>
    </wire>
    <wire loc="532:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7fd82f239580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f18a740"/></to>
    </wire>
    <wire loc="460:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7fd82f280020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f194100"/></to>
    </wire>
    <wire loc="473:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7fd82f26c200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f164e00"/></to>
    </wire>
    <wire loc="486:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7fd82f257200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f134740"/></to>
    </wire>
    <wire loc="535:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7fd82f233580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f181d10"/></to>
    </wire>
    <wire loc="545:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7fd82f222570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f120100"/></to>
    </wire>
    <wire loc="557:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7fd82f20e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f100d10"/></to>
    </wire>
    <wire loc="445:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fd82f293020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1bf100"/></to>
    </wire>
    <wire loc="536:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7fd82f231580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f17c740"/></to>
    </wire>
    <wire loc="450:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fd82f28f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1b6740"/></to>
    </wire>
    <wire loc="463:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7fd82f27a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f185100"/></to>
    </wire>
    <wire loc="476:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7fd82f266200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f156d10"/></to>
    </wire>
    <wire loc="489:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7fd82f251200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f126740"/></to>
    </wire>
    <wire loc="440:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fd82f29d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1d7d10"/></to>
    </wire>
    <wire loc="453:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fd82f288020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1a7860"/></to>
    </wire>
    <wire loc="466:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7fd82f274020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f177100"/></to>
    </wire>
    <wire loc="530:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7fd82f23d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f18fd10"/></to>
    </wire>
    <wire loc="548:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7fd82f21c570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f112100"/></to>
    </wire>
    <wire loc="555:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7fd82f210570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f100d10"/></to>
    </wire>
    <wire loc="541:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7fd82f228580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f139d10"/></to>
    </wire>
    <wire loc="471:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7fd82f270020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f16ea60"/></to>
    </wire>
    <wire loc="484:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7fd82f25c200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f13d100"/></to>
    </wire>
    <wire loc="549:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7fd82f21a570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f10ed10"/></to>
    </wire>
    <wire loc="538:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7fd82f22f570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f148d10"/></to>
    </wire>
    <wire loc="443:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fd82f297020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1c9d10"/></to>
    </wire>
    <wire loc="456:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fd82f282020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f199740"/></to>
    </wire>
    <wire loc="461:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7fd82f27e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f18fd10"/></to>
    </wire>
    <wire loc="474:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7fd82f26a200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f15f740"/></to>
    </wire>
    <wire loc="487:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7fd82f255200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f12f100"/></to>
    </wire>
    <wire loc="540:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7fd82f22b580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f13d100"/></to>
    </wire>
    <wire loc="438:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fd82f2a1140"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1e16d0"/></to>
    </wire>
    <wire loc="451:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fd82f28d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1b0100"/></to>
    </wire>
    <wire loc="464:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7fd82f278020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f181d10"/></to>
    </wire>
    <wire loc="477:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7fd82f264200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f151740"/></to>
    </wire>
    <wire loc="542:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7fd82f226580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f177100"/></to>
    </wire>
    <wire loc="546:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7fd82f220570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f11cd10"/></to>
    </wire>
    <wire loc="552:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7fd82f214570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f100d10"/></to>
    </wire>
    <wire loc="482:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7fd82f260200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f148d10"/></to>
    </wire>
    <wire loc="543:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7fd82f224580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f173d10"/></to>
    </wire>
    <wire loc="441:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fd82f29b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1d2740"/></to>
    </wire>
    <wire loc="454:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fd82f286020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1a2270"/></to>
    </wire>
    <wire loc="467:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7fd82f272020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f173d10"/></to>
    </wire>
    <wire loc="539:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7fd82f22d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f142740"/></to>
    </wire>
    <wire loc="550:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7fd82f218570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f109740"/></to>
    </wire>
    <wire loc="472:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7fd82f26e200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f168460"/></to>
    </wire>
    <wire loc="485:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7fd82f259200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f139d10"/></to>
    </wire>
    <wire loc="444:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fd82f295020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1c4740"/></to>
    </wire>
    <wire loc="449:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fd82f291020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1bbd10"/></to>
    </wire>
    <wire loc="462:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7fd82f27c020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f18a740"/></to>
    </wire>
    <wire loc="475:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7fd82f268200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f15a100"/></to>
    </wire>
    <wire loc="488:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7fd82f253200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f12bd10"/></to>
    </wire>
    <wire loc="439:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fd82f29f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1dc100"/></to>
    </wire>
    <wire loc="452:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fd82f28b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f1acd10"/></to>
    </wire>
    <wire loc="465:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7fd82f276020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f17c740"/></to>
    </wire>
    <wire loc="478:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7fd82f262200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f14c100"/></to>
    </wire>
    <wire loc="534:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7fd82f235560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f185100"/></to>
    </wire>
    <wire loc="547:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7fd82f21e570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f117740"/></to>
    </wire>
    <wire loc="533:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7fd82f237580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f185100"/></to>
    </wire>
    <wire loc="483:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7fd82f25e200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f142740"/></to>
    </wire>
    <wire loc="554:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7fd82f212570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f104100"/></to>
    </wire>
    <wire loc="558:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7fd82f20c580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f126740"/></to>
    </wire>
    <wire loc="529:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7fd82f23f1f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fd82f194100"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7fd82f084750"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7fd82f0096f0"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7fd82f008ad0"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7fd82f083ad0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fd82f005920"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fd82f07b1d0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fd82f007860"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fd82f077020"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fd82f006540"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fd82f077be0"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7fd82f06f270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82ee25370"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82ee25370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc8020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7fd82f05e680"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82ee1fd10"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82ee1fd10"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc8020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7fd82f059c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82ee18750"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fd82ee18750"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc8020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f076800"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f341080"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7fd82f0012a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc8020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc0c30"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc0c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82ee45150"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fd82efc3e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82eec1020"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fd82efb6500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fd82ee37790"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fd82eec1020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82e88a720"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fd82ee40640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fd82ee952f0"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fd82ee90850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fd82eec1870"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fd82eec1870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fd82e8831d0"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fd82ee36a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fd82ef3ab50"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fd82ef3ab50"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fd82ef1dcf0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fd82e88a720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82e86ee60"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fd82e87db90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fd82e889020"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fd82e889020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fd82e86d720"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fd82e880690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fd82ef3ab50"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82e86a910"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82e874c50"/></to>
    </wire>
    <wire loc="49:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82e874c50"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82e868020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82e8722b0"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82e8722b0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82e866440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82e8715d0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82e8715d0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7fd82f628020"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7fd82f61f570"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7fd82f6275a0"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7fd82f61e3e0"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7fd82f626be0"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7fd82f61d1f0"/></to>
    </wire>
    <wire loc="70:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="71:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7fd82f6240c0"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7fd82f61c020"/></to>
    </wire>
    <wire loc="74:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7fd82f6235a0"/></to>
    </wire>
    <wire loc="76:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7fd82f61cda0"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="79:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7fd82f622a50"/></to>
    </wire>
    <wire loc="80:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7fd82f61bb80"/></to>
    </wire>
    <wire loc="82:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="83:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7fd82f620020"/></to>
    </wire>
    <wire loc="84:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7fd82f61aa20"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fd82eeff0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fd82ef38b70"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fd82ef38b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fd82ef31b80"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef23c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fd82ee8c9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fd82ee3aa00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fd82edbd2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fd82ede6470"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fd82ede3060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fd82ede7b10"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fd82ede7b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fd82edba020"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fd82ede2340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fd82edc0e70"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fd82edc0e70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fd82eda6b90"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fd82eddd660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fd82edbe0f0"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fd82edbe0f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fd82eda0710"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fd82eda92f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7fd82f270020"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fd82eda5de0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7fd82f26c200"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fd82ed9f930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7fd82f26a200"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../../tos/system/MainC.nc">
      <documentation loc="45:../../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="AdcSimpleC" loc="38:AdcSimpleC.nc">
      <module/>
    </component>
    <component qname="AdcSimpleAppC.AdcReadClientC" loc="47(AdcSimpleAppC.AdcReadClientC):../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcP" loc="36:../../../../tos/chips/msp430/adc12/AdcP.nc" safe="">
      <module/>
    </component>
    <component qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient" loc="43(AdcSimpleAppC.AdcReadClientC.Msp430AdcClient):../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(AdcSimpleAppC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7fd82f60d890" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7fd82f60dc30" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7fd82f60c020" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7fd82f60c3a0" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7fd82f60c720" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7fd82f60ca90" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7fd82f60ce20" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7fd82f60b200" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7fd82f60b5d0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7fd82f5cfe70" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7fd82f5cc270" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="47:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc" abstract="">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fd82f342c90" loc="83:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fd82f2fd020" loc="42:../../../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7fd82f2079f0" loc="40:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7fd82f207da0" loc="41:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7fd82f2061a0" loc="42:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7fd82f206550" loc="43:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7fd82f2068c0" loc="44:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fd82ef6f3b0" loc="43:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fd82ef6f3b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fd82ef32c80" loc="42:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fd82ef32c80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fd82ef1c570" loc="55:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fd82ef1c570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fd82ef1cd40" loc="56:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fd82ef1cd40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fd82ef1b160" loc="57:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fd82ef1b160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fd82ef1b940" loc="58:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fd82ef1b940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fd82ef1bd10" loc="59:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fd82ef1a540" loc="60:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fd82ef1a540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fd82ef3f6d0" loc="52:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fd82ef3f6d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fd82eef8020" loc="53:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fd82eef8020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fd82eef8410" loc="54:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fd82eef8410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fd82eef8bf0" loc="55:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fd82eef8bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fd82eef7020" loc="56:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82eebccc0" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82eebccc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82ee86230" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82ee86230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fd82ee86560" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82ee38de0" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82ee38de0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7fd82f6ced80" loc="58:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f6ced80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6cd180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fd82f6cc870" loc="57:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fd82f6cc870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fd82f6ccbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82f6cdda0" loc="40:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82f6cdda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c8180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fd82f6c5a90" loc="6:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7fd82f6c5a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c5e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82f6c8bf0" loc="4:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82f6c8bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7fd82f6c53b0" loc="5:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fd82f6c53b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c5730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7fd82f6c41b0" loc="7:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7fd82f6c41b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c4530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82f6c79b0" loc="39:../../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82f6c79b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c7d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7fd82f6c6910" loc="39:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fd82f6c6910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f6c6c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fd82f68fde0" loc="40:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fd82f68fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fd82f694c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fd82f694310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fd82f6944a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fd82f694630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fd82f694180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fd82f6947c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fd82f694950"/>
        <function-ref name="initClocks" scoped="" ref="0x7fd82f694ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82f698850" loc="39:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82f698850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f698bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fd82f67e020" loc="46:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fd82f67e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fd82f67d020"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fd82f67e530"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fd82f67e6c0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fd82f67e850"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fd82f67e3a0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fd82f67e9e0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fd82f67eb70"/>
        <function-ref name="initClocks" scoped="" ref="0x7fd82f67ed00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fd82f67d360" loc="47:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fd82f67d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fd82f67d6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82f6807e0" loc="45:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82f6807e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f680b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7fd82f63a5a0" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7fd82f63a5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f63a920"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f63aab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f63ac40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f63add0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f639020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f6391b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f639340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f6394d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f639660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7fd82f628020" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7fd82f628020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f6283a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f628530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f6286c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f628850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f6289e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f628b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f628d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f627020"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f6271b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7fd82f631700" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7fd82f631700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f631a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f631c10"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f631da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f630020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6301b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f630340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7fd82f615a20" loc="68:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7fd82f615a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f615da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f614020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6141b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f614340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6144d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f614660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7fd82f638aa0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fd82f638aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f638e20"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f637020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f6371b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f637340"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f6374d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7fd82f61c020" loc="61:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7fd82f61c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f61c3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f61c530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f61c6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f61c850"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f61c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7fd82f612a20" loc="71:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7fd82f612a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f612da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f611020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6111b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f611340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6114d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f611660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7fd82f6235a0" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7fd82f6235a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f623920"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f623ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f623c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f623dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f622020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f6221b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f622340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f6224d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f622660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7fd82f63bb10" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fd82f63bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f643020"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f6431b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f643340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f6434d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f643660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f6437f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f643980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f643b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f643ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7fd82f618a20" loc="66:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7fd82f618a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f618da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f616020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6161b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f616340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6164d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f616660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7fd82f61e3e0" loc="59:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7fd82f61e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f61e760"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f61e8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f61ea80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f61ec10"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f61eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7fd82f6275a0" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7fd82f6275a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f627a20"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f627bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f627d40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f626020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f6261b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f626340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f6264d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f626660"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f6267f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7fd82f630700" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7fd82f630700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f630a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f630c10"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f630da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f62a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f62a1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f62a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7fd82f614a20" loc="69:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7fd82f614a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f614da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f613020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6131b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f613340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6134d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f613660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7fd82f626be0" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7fd82f626be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f625020"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f6251b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f625340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f6254d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f625660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f6257f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f625980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f625b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f625ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7fd82f637890" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7fd82f637890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f637c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f637da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f632020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f6321b0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f632340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7fd82f64b060" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fd82f64b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f64b3e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f64b570"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f64b700"/>
        <function-ref name="get" scoped="" ref="0x7fd82f64b890"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f64ba20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f64bbb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f64bd40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f64a020"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f64a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f64a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f64a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7fd82f61cda0" loc="62:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7fd82f61cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f61b180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f61b310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f61b4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f61b630"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f61b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7fd82f6420c0" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fd82f6420c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f642440"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f6425d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f642760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f6428f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f642a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f642c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f642da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f63a020"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f63a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7fd82f622a50" loc="56:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7fd82f622a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f622dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f621020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f6211b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f621340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f6214d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f621660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f6217f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f621980"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f621b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7fd82f62b6d0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7fd82f62b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f62ba50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f62bbe0"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f62bd70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f631020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6311b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f631340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7fd82f616a20" loc="67:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7fd82f616a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f616da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f615020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6151b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f615340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6154d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f615660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7fd82f634cf0" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fd82f634cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f6380a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f638230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f6383c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f638550"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f6386e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7fd82f61d1f0" loc="60:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7fd82f61d1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f61d570"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f61d700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f61d890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f61da20"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f61dbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7fd82f613a20" loc="70:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7fd82f613a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f613da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f612020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6121b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f612340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6124d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f612660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7fd82f6240c0" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7fd82f6240c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f624440"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f6245d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f624760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f6248f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f624a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f624c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f624da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f623020"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f6231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7fd82f62a6c0" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7fd82f62a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f62aa40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f62abd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f62ad60"/>
        <function-ref name="get" scoped="" ref="0x7fd82f629020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f6291b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f629340"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f6294d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f629660"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f6297f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f629980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f629b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7fd82f61bb80" loc="63:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7fd82f61bb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f61a020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f61a1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f61a340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f61a4d0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f61a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7fd82f619a20" loc="65:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7fd82f619a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f619da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f618020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f6181b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f618340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f6184d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f618660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7fd82f61aa20" loc="64:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7fd82f61aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f619020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f6191b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f619340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f6194d0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f619660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7fd82f61f570" loc="58:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7fd82f61f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f61f8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f61fa80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f61fc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f61fda0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f61e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7fd82f620020" loc="57:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7fd82f620020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f6203a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f620530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f6206c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f620850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f6209e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f620b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f620d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f61f020"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f61f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fd82f5d9aa0" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fd82f5d9aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d9e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fd82f5d9450" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fd82f5d9450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d97d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fd82f5d8120" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fd82f5d8120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d84a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fd82f5dad80" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f5dad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d9180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82f5db540" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f5db540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f5db8c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f5dba50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f5dbbe0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f5dbd70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f5da020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f5da1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f5da340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5da4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f5da660"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f5da7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f5da980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fd82f5d2940" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fd82f5d2940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fd82f5d22f0" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fd82f5d22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d2670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fd82f5d1020" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fd82f5d1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fd82f5d3bf0" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f5d3bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5d2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82f5d43e0" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f5d43e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f5d4760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f5d48f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f5d4a80"/>
        <function-ref name="get" scoped="" ref="0x7fd82f5d4c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f5d4da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f5d3020"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f5d31b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5d3340"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f5d34d0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f5d3660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f5d37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f586a90" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f586a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f586e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f585020"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f5851b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f585340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5854d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f585660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f5cd9d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f5cd9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f5cdd50"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f587020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f5871b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f587340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f5874d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f587660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f5877f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f587980"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f587b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f582020" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f582020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5823a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f587de0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f587de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f586180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f586310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f5864a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f586630"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f5867c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f585930" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f585930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f585cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f585e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f583020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f5831b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f583340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f5834d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f583660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5837f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f583980"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f583b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f583ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f57d160" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f57d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f57d4e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f57d670"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f57d800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f57d990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f57db20"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f57dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f57f020" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f57f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f57f3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f57f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f57f6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f57f850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f57f9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f57fb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f57fd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f57e020"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f57e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f57b7a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f57b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f57bb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f57e480" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f57e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f57e800"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f57e990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f57eb20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f57ecb0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f57ee40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f57c020" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f57c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f57c3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f57c530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f57c6c0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f57c850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f57c9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f57cb70"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f57cd00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f57b020"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f57b1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f57b340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f57b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f5767a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f5767a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f576b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f576cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f576e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f575020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5751b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f575340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f5786d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f5786d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f578a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f578be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f578d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f577020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f5771b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f577340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f5774d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f577660"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f5777f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f574c50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f574c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f572020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f577ac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f577ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f577e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f576020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f5761b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f576340"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f5764d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f575610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f575610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f575990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f575b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f575cb0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f575e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f574020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f5741b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f574340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5744d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f574660"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f5747f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f574980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f56ecb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f56ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f56d0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f56d230"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f56d3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f56d550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f56d6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f56d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f570b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f570b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f56f020"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f56f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f56f340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f56f4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f56f660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f56f7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f56f980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f56fb10"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f56fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f56b2f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f56b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f56b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f56e020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f56e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f56e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f56e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f56e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f56e850"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f56e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f56db40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f56db40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f56c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f56c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f56c340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f56c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f56c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f56c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f56c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f56cb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f56cca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f56ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f56b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f5662f0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f5662f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f566670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f566800"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f566990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f566b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f566cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f566e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f568220" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f568220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f5685a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f568730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f5688c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f568a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f568be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f568d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f567020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f5671b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f567340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f5647a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f5647a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f564b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f567610" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f567610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f567990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f567b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f567cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f567e40"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f566020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f565160" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f565160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f5654e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f565670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f565800"/>
        <function-ref name="get" scoped="" ref="0x7fd82f565990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f565b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f565cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f565e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f564020"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f5641b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f564340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f5644d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f55e7a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f55e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f55eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f55ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f55ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f55d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f55d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f55d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f5606d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f5606d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f560a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f560be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f560d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f55f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f55f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f55f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f55f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f55f660"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f55f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f55cc50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f55cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f55b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f55fac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f55fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f55fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f55e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f55e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f55e340"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f55e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f55d610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f55d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f55d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f55db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f55dcb0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f55de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f55c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f55c1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f55c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f55c4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f55c660"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f55c7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f55c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f557cb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f557cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f5560a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f556230"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f5563c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f556550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5566e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f556870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f559b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f559b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f558020"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f5581b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f558340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f5584d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f558660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f5587f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f558980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f558b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f558ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f5542f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f5542f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f554670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f557020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f557020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f5573a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f557530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f5576c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f557850"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f5579e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f556b40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f556b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f555020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f5551b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f555340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f5554d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f555660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f5557f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f555980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f555b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f555ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f555e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f554020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f54e2f0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f54e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f54e670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f54e800"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f54e990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f54eb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f54ecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f54ee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f550220" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f550220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f5505a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f550730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f5508c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f550a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f550be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f550d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f54f020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f54f1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f54f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f54c7a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f54c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f54cb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f54f610" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f54f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f54f990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f54fb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f54fcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f54fe40"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f54e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f54d160" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f54d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f54d4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f54d670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f54d800"/>
        <function-ref name="get" scoped="" ref="0x7fd82f54d990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f54db20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f54dcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f54de40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f54c020"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f54c1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f54c340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f54c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f5477a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f5477a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f547b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f547cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f547e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f546020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5461b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f546340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f5496d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f5496d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f549a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f549be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f549d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f548020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f5481b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f548340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f5484d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f548660"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f5487f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f545c50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f545c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f544020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f548ac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f548ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f548e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f547020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f5471b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f547340"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f5474d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f546610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f546610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f546990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f546b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f546cb0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f546e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f545020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f5451b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f545340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f5454d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f545660"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f5457f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f545980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fd82f53fcb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fd82f53fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f53e0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fd82f53e230"/>
        <function-ref name="captured" scoped="" ref="0x7fd82f53e3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f53e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f53e6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fd82f53e870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fd82f542b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fd82f542b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f540020"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f5401b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f540340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f5404d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f540660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f5407f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f540980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f540b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f540ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fd82f53c2f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fd82f53c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f53c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fd82f53f020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fd82f53f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f53f3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f53f530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f53f6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f53f850"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f53f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fd82f53eb40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82f53eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f53d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f53d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f53d340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f53d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f53d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f53d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f53d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f53db10"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f53dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f53de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f53c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7fd82f536240" loc="7:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7fd82f536240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5365c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7fd82f53aa90" loc="4:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7fd82f53aa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f53ae10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7fd82f537260" loc="5:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7fd82f537260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f5375e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7fd82f5379f0" loc="6:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7fd82f5379f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fd82f537d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fd82f9ac4c0" loc="55:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fd82f9ac4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fd82f9ac840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fd82fd1d3b0" loc="51:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fd82fd1d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fd82fd1d730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fd82fd1d8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7fd82fd1da50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fd82fb86bc0" loc="52:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7fd82fb86bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fd82fcc2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fd82f4ffdc0" loc="60:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fd82f4ffdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f4fe180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fd82f504590" loc="57:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fd82f504590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fd82f504910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fd82f4ff6c0" loc="59:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7fd82f4ff6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f4ffa40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fd82f504c00" loc="58:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fd82f504c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f4ff020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fd82f4ff1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fd82f4ff340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fd82fd9a410" loc="48:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fd82fd9a410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82fd9a790"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82fd9a920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fd82fd2b3a0" loc="47:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fd82fd2b3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82fd2b720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fd82fd2b8b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fd82fd2ba40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fd82f702b70" loc="56:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fd82f702b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82f701020"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82f7011b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fd82f6fb2c0" loc="57:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fd82f6fb2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fd82f6fb640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fd82f6fb7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7fd82f6fb960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fd82f703c30" loc="55:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fd82f703c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f702020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fd82f7021b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fd82f702340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fd82f4da5b0" loc="43:AdcSimpleC.nc">
      <component-ref qname="AdcSimpleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fd82f4da5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fd82f4da930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VoltageRead" ref="0x7fd82f4d7020" loc="44:AdcSimpleC.nc">
      <component-ref qname="AdcSimpleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VoltageRead" scoped="" ref="0x7fd82f4d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fd82f4d7c10"/>
        <function-ref name="readDone" scoped="" ref="0x7fd82f4d60d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VoltageConfigure" ref="0x7fd82f4d84a0" loc="40:AdcSimpleC.nc">
      <component-ref qname="AdcSimpleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VoltageConfigure" scoped="" ref="0x7fd82f4d84a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82f4da110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fd82f4c7500" loc="45:AdcSimpleC.nc">
      <component-ref qname="AdcSimpleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fd82f4c7500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fd82f4c7880"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fd82f4c7a10"/>
        <function-ref name="led1On" scoped="" ref="0x7fd82f4c7ba0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fd82f4c7d30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fd82f4d2020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f4d21b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fd82f4d2340"/>
        <function-ref name="led2Off" scoped="" ref="0x7fd82f4d2980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f4d24d0"/>
        <function-ref name="led0On" scoped="" ref="0x7fd82f4d2660"/>
        <function-ref name="led2On" scoped="" ref="0x7fd82f4d27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fd82edf1b10" loc="48:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fd82edf1b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fd82edf0750"/>
        <function-ref name="readDone" scoped="" ref="0x7fd82edf0bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fd82edee370" loc="49:../../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82edee370"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82eded020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResourceReadNow" ref="0x7fd82f4a81d0" loc="46:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubResourceReadNow" scoped="" ref="0x7fd82f4a81d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f4a8550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f4a86e0"/>
        <function-ref name="request" scoped="" ref="0x7fd82f4a8870"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f4a8a00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f4a8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fd82f4b77d0" loc="38:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fd82f4b77d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fd82f4b6400"/>
        <function-ref name="readDone" scoped="" ref="0x7fd82f4b6880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7fd82f4b08c0" loc="39:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7fd82f4b08c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fd82f4b3520"/>
        <function-ref name="readDone" scoped="" ref="0x7fd82f4b39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceReadNow" ref="0x7fd82f4aaae0" loc="40:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceReadNow" scoped="" ref="0x7fd82f4aaae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f4aae60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f4ae020"/>
        <function-ref name="request" scoped="" ref="0x7fd82f4ae1b0"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f4ae340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f4ae4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fd82f4a7740" loc="48:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7fd82f4a7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82f4a63d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7fd82f495b10" loc="49:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f495b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82f4a4020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fd82f4a41b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fd82f4a4340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fd82f4a44d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fd82f4a4660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fd82f4a47f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fd82f4a4980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceRead" ref="0x7fd82f4aee40" loc="44:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRead" scoped="" ref="0x7fd82f4aee40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f4a91e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f4a9370"/>
        <function-ref name="request" scoped="" ref="0x7fd82f4a9500"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f4a9690"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f4a9820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x7fd82f4785c0" loc="136:../../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x7fd82f4785c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82f478940"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82f478ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7fd82ec12020" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fd82ec12020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82ec123a0"/>
        <function-ref name="configure" scoped="" ref="0x7fd82ec12530"/>
        <function-ref name="dataReady" scoped="" ref="0x7fd82ec126c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7fd82ec13020" loc="47:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fd82ec13020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82ec133a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fd82ec13530"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fd82ec136c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fd82ec13850"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fd82ec139e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fd82ec13b70"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fd82ec13d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7fd82ec12910" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fd82ec12910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fd82ec12c90"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fd82ec12e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fd82ec11280" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fd82ec11280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82ec10020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fd82ec14360" loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fd82ec14360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82ec146e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82ec14870"/>
        <function-ref name="request" scoped="" ref="0x7fd82ec14a00"/>
        <function-ref name="granted" scoped="" ref="0x7fd82ec14b90"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82ec14d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7fd82f43c960" loc="42:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7fd82f43c960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82f43cce0"/>
        <function-ref name="configure" scoped="" ref="0x7fd82f43ce70"/>
        <function-ref name="dataReady" scoped="" ref="0x7fd82f43b030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7fd82f4391d0" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7fd82f4391d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fd82f439550"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f4396e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7fd82f43b920" loc="43:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fd82f43b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fd82f43bca0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fd82f43be30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7fd82f43d1d0" loc="41:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f43d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82f43d550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fd82f43d6e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fd82f43d870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fd82f43da00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fd82f43db90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fd82f43dd20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fd82f43c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fd82f44acd0" loc="40:../../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fd82f44acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f43f0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f43f230"/>
        <function-ref name="request" scoped="" ref="0x7fd82f43f3c0"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f43f550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f43f6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7fd82f432af0" loc="42:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7fd82f432af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82f432e70"/>
        <function-ref name="configure" scoped="" ref="0x7fd82f431030"/>
        <function-ref name="dataReady" scoped="" ref="0x7fd82f4311c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7fd82f41eb80" loc="48:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f41eb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fd82f42c020"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fd82f42c1b0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fd82f42c340"/>
        <function-ref name="isBusy" scoped="" ref="0x7fd82f42c4d0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fd82f42c660"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fd82f42c7f0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fd82f42c980"/>
        <function-ref name="startConversion" scoped="" ref="0x7fd82f42cb10"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fd82f42cca0"/>
        <function-ref name="getMem" scoped="" ref="0x7fd82f42ce30"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fd82f429020"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fd82f4291b0"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fd82f429340"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fd82f4295d0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fd82f429760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7fd82f405540" loc="58:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fd82f405540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f4058c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f405a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f405be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f405d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f404020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f4041b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f404340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f4044d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f404660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f4047f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f404980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f404b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f404ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f403020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f4031b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7fd82f4189e0" loc="53:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fd82f4189e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f418d60"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f417020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f4171b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f417340"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f4174d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7fd82f41b220" loc="50:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fd82f41b220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f41b5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f41b730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f41b8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f41ba50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f41bbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f41bd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f41a020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f41a1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f41a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7fd82f42f910" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7fd82f42f910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fd82f42fc90"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f42fe20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7fd82f409640" loc="56:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fd82f409640"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f4099c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f409b50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f409ce0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f409e70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f408030"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f4081c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f408350"/>
        <function-ref name="get" scoped="" ref="0x7fd82f4084e0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f408670"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f408800"/>
        <function-ref name="set" scoped="" ref="0x7fd82f408990"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f408b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f408cb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f407020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f4071b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7fd82f431ab0" loc="43:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fd82f431ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fd82f431e30"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fd82f42f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7fd82f3ff540" loc="61:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fd82f3ff540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f3ff8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f3ffa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f3ffbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f3ffd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f3fe020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f3fe1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f3fe340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f3fe4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f3fe660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f3fe7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f3fe980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f3feb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f3feca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f3fd020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f3fd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7fd82f40b870" loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fd82f40b870"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f40bcf0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f40be80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f416030"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f4161c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f416350"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f4164e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f416670"/>
        <function-ref name="get" scoped="" ref="0x7fd82f416800"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f416990"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f416b20"/>
        <function-ref name="set" scoped="" ref="0x7fd82f416cb0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f416e40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f415020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f4152b0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f415440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82f434660" loc="40:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82f434660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82f4349e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7fd82f403540" loc="59:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fd82f403540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f4038c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f403a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f403be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f403d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f402020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f4021b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f402340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f4024d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f402660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f4027f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f402980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f402b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f402ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f401020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f4011b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7fd82f429aa0" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fd82f429aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82f429e20"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82f41c020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f41c1b0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f41c340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f41c4d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82f41c660"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82f41c7f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82f41c980"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82f41cb10"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82f41cca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82f41ce30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7fd82f42bb30" loc="47:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7fd82f42bb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fd82f42d020"/>
        <function-ref name="userId" scoped="" ref="0x7fd82f42d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7fd82f41a6f0" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fd82f41a6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82f41aa70"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82f41ac00"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82f41ad90"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82f419020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82f4191b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82f419340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82f4194d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82f419660"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82f4197f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7fd82f433370" loc="41:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fd82f433370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fd82f4336f0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fd82f433880"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fd82f433a10"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fd82f433ba0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fd82f433d30"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fd82f432020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fd82f4321b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7fd82f407540" loc="57:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fd82f407540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f4078c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f407a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f407be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f407d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f406020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f4061b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f406340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f4064d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f406660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f4067f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f406980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f406b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f406ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f405020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f4051b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7fd82f419b70" loc="52:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fd82f419b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82f418020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82f4181b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82f418340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82f4184d0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f418660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7fd82f4157d0" loc="55:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fd82f4157d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f415b50"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f415ce0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f415e70"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f40a030"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f40a1c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f40a350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f40a4e0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f40a670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f40a800"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f40a990"/>
        <function-ref name="set" scoped="" ref="0x7fd82f40ab20"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f40acb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f40ae40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f409120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f4092b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7fd82f401540" loc="60:../../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fd82f401540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f4018c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f401a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f401be0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f401d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f400020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f4001b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f400340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f4004d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f400660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f4007f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f400980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f400b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f400ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f3ff020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f3ff1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7fd82f341080" loc="46:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f341080"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fd82f341400"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fd82f341590"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fd82f341720"/>
        <function-ref name="isBusy" scoped="" ref="0x7fd82f3418b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fd82f341a40"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fd82f341bd0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fd82f341d60"/>
        <function-ref name="startConversion" scoped="" ref="0x7fd82f340020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fd82f3401b0"/>
        <function-ref name="getMem" scoped="" ref="0x7fd82f340340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fd82f3404d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fd82f340660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fd82f3407f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fd82f340a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fd82f340c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fd82f2a83a0" loc="86:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fd82f2a83a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fd82f2a8740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fd82f2a88d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fd82f2a7570" loc="89:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fd82f2a7570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fd82f2a7910"/>
        <function-ref name="configure" scoped="" ref="0x7fd82f2a7aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fd82f2a9520" loc="85:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fd82f2a9520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f2a98c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f2a9a50"/>
        <function-ref name="request" scoped="" ref="0x7fd82f2a9be0"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f2a9d70"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f2a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fd82f2a8b20" loc="87:../../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fd82f2a8b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fd82f2a7020"/>
        <function-ref name="userId" scoped="" ref="0x7fd82f2a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82ebe9620" loc="44:../../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82ebe9620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82ebe99a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7fd82ebe9c30" loc="45:../../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7fd82ebe9c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fd82ebe8020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fd82ebe81b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fd82ebe8340"/>
        <function-ref name="dequeue" scoped="" ref="0x7fd82ebe84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fd82ebe69e0" loc="52:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fd82ebe69e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fd82ebe6d80"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fd82ebe5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fd82ebe5b60" loc="56:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fd82ebe5b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fd82ebe3020"/>
        <function-ref name="configure" scoped="" ref="0x7fd82ebe31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fd82ebe3440" loc="57:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fd82ebe3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fd82ebe37c0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fd82ebe3950"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fd82ebe3ae0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fd82ebe3c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fd82ebe7b90" loc="51:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fd82ebe7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82ebe6020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82ebe61b0"/>
        <function-ref name="request" scoped="" ref="0x7fd82ebe6340"/>
        <function-ref name="granted" scoped="" ref="0x7fd82ebe64d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82ebe6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fd82ebe5270" loc="53:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fd82ebe5270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fd82ebe55f0"/>
        <function-ref name="userId" scoped="" ref="0x7fd82ebe5780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fd82ebe2020" loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fd82ebe2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82ebe23a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82ebe2530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fd82f299020" loc="53:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fd82f299020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2993a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f299530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2996c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f299850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2999e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f299b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f299d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f298020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2981b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f298340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2984d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f298660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2987f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f298a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f298c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fd82f284020" loc="66:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fd82f284020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2843a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f284530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2846c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f284850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2849e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f284b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f284d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f283020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2831b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f283340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2834d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f283660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2837f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f283a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f283c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7fd82f23b560" loc="145:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7fd82f23b560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f23b8e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f23ba70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f23bc00"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f23bd90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f23a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f23a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f23a340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f23a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f23a660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f23a7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f23a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f23ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f23aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f239020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2391b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7fd82f216570" loc="165:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7fd82f216570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2168f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f216a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f216c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f216da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f215020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2151b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f215340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2154d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f215660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2157f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f215980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f215b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f215ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f214020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2141b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7fd82f239580" loc="146:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7fd82f239580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f239900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f239a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f239c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f239db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f238020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2381b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f238340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2384d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f238660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2387f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f238980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f238b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f238ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f237020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2371b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7fd82f280020" loc="71:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7fd82f280020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2803a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f280530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2806c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f280850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2809e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f280b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f280d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f27f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f27f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f27f340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f27f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f27f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f27f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f27fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f27fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7fd82f26c200" loc="84:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7fd82f26c200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f26c580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f26c710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f26c8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f26ca30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f26cbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f26cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f26b020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f26b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f26b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f26b4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f26b660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f26b7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f26b980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f26bc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f26bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7fd82f257200" loc="97:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7fd82f257200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f257580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f257710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2578a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f257a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f257bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f257d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f256020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2561b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f256340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2564d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f256660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2567f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f256980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f256c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f256da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7fd82f247200" loc="108:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fd82f247200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f247580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f247710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2478a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f247a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f247bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f247d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f246020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2461b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f246340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2464d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f246660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2467f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f246980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f246c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f246da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7fd82f233580" loc="149:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7fd82f233580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f233900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f233a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f233c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f233db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f232020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2321b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f232340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2324d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f232660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2327f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f232980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f232b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f232ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f231020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2311b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7fd82f222570" loc="159:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7fd82f222570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2228f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f222a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f222c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f222da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f221020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2211b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f221340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2214d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f221660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2217f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f221980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f221b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f221ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f220020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2201b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7fd82f20e580" loc="171:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7fd82f20e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f20e900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f20ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f20ec20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f20edb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f20d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f20d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f20d340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f20d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f20d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f20d7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f20d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f20db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f20dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f20c020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f20c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fd82f293020" loc="56:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fd82f293020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2933a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f293530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2936c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f293850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2939e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f293b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f293d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f292020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2921b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f292340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2924d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f292660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2927f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f292a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f292c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7fd82f231580" loc="150:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7fd82f231580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f231900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f231a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f231c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f231db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f230020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2301b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f230340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2304d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f230660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2307f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f230980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f230b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f230ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f22f020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f22f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fd82f28f020" loc="61:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fd82f28f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f28f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f28f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f28f6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f28f850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f28f9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f28fb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f28fd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f28e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f28e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f28e340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f28e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f28e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f28e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f28ea80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f28ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7fd82f27a020" loc="74:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7fd82f27a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f27a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f27a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f27a6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f27a850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f27a9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f27ab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f27ad00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f279020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2791b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f279340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2794d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f279660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2797f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f279a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f279c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7fd82f266200" loc="87:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7fd82f266200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f266580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f266710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2668a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f266a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f266bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f266d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f265020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2651b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f265340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2654d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f265660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2657f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f265980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f265c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f265da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7fd82f251200" loc="100:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7fd82f251200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f251580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f251710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2518a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f251a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f251bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f251d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f250020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2501b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f250340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2504d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f250660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2507f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f250980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f250c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f250da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7fd82f241200" loc="111:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fd82f241200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f241580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f241710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2418a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f241a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f241bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f241d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f240020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2401b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f240340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2404d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f240660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2407f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f240980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f240c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f240da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fd82f29d020" loc="51:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fd82f29d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f29d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f29d530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f29d6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f29d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f29d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f29db70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f29dd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f29c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f29c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f29c340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f29c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f29c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f29c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f29ca80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f29cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fd82f288020" loc="64:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fd82f288020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2884a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f288630"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2887c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f288950"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f288ae0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f288c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f288e00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f287020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2871b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f287340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2874d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f287660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2877f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f287a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f287c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7fd82f274020" loc="77:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7fd82f274020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2743a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f274530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2746c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f274850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2749e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f274b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f274d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f273020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2731b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f273340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2734d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f273660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2737f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f273a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f273c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7fd82f23d580" loc="144:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7fd82f23d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f23d900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f23da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f23dc20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f23ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f23c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f23c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f23c340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f23c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f23c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f23c7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f23c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f23cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f23cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f23b020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f23b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7fd82f21c570" loc="162:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7fd82f21c570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f21c8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f21ca80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f21cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f21cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f21b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f21b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f21b340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f21b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f21b660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f21b7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f21b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f21bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f21bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f21a020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f21a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7fd82f210570" loc="169:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7fd82f210570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2108f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f210a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f210c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f210da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f20f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f20f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f20f340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f20f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f20f660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f20f7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f20f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f20fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f20fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f20e020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f20e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7fd82f228580" loc="155:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7fd82f228580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f228900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f228a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f228c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f228db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f227020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2271b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f227340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2274d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f227660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2277f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f227980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f227b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f227ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f226020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2261b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7fd82f270020" loc="82:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7fd82f270020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2705a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f270730"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2708c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f270a50"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f270be0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f270d70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f26f020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f26f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f26f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f26f4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f26f660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f26f7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f26f980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f26fc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f26fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7fd82f25c200" loc="95:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7fd82f25c200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f25c580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f25c710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f25c8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f25ca30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f25cbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f25cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f25b020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f25b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f25b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f25b4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f25b660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f25b7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f25b980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f25bc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f25bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7fd82f24b200" loc="106:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fd82f24b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f24b580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f24b710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f24b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f24ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f24bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f24bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f24a020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f24a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f24a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f24a4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f24a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f24a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f24a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f24ac10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f24ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7fd82f21a570" loc="163:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7fd82f21a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f21a8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f21aa80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f21ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f21ada0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f219020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2191b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f219340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2194d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f219660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2197f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f219980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f219b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f219ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f218020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2181b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7fd82f22f570" loc="152:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7fd82f22f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f22f8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f22fa80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f22fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f22fda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f22e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f22e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f22e340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f22e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f22e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f22e7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f22e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f22eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f22eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f22d020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f22d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fd82f297020" loc="54:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fd82f297020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2973a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f297530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2976c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f297850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2979e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f297b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f297d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f296020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2961b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f296340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2964d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f296660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2967f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f296a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f296c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fd82f282020" loc="67:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fd82f282020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2823a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f282530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2826c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f282850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2829e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f282b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f282d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f281020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2811b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f281340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2814d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f281660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2817f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f281a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f281c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7fd82f24f200" loc="104:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fd82f24f200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f24f580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f24f710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f24f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f24fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f24fbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f24fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f24e020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f24e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f24e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f24e4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f24e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f24e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f24e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f24ec10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f24eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7fd82f27e020" loc="72:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7fd82f27e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f27e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f27e530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f27e6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f27e850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f27e9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f27eb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f27ed00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f27d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f27d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f27d340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f27d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f27d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f27d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f27da80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f27dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7fd82f26a200" loc="85:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7fd82f26a200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f26a580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f26a710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f26a8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f26aa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f26abc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f26ad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f269020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2691b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f269340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2694d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f269660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2697f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f269980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f269c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f269da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7fd82f255200" loc="98:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7fd82f255200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f255580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f255710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2558a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f255a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f255bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f255d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f254020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2541b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f254340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2544d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f254660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2547f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f254980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f254c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f254da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7fd82f245200" loc="109:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fd82f245200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f245580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f245710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2458a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f245a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f245bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f245d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f244020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2441b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f244340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2444d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f244660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2447f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f244980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f244c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f244da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7fd82f22b580" loc="154:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7fd82f22b580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f22b900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f22ba90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f22bc20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f22bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f229020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2291b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f229340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2294d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f229660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2297f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f229980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f229b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f229ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f228020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2281b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fd82f2a1140" loc="49:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fd82f2a1140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2a14c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f2a1650"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2a17e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f2a1970"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2a1b00"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2a1c90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f2a1e20"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2a0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2a01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2a0340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2a04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2a0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2a07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f2a0a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2a0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fd82f28d020" loc="62:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fd82f28d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f28d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f28d530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f28d6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f28d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f28d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f28db70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f28dd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f28c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f28c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f28c340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f28c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f28c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f28c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f28ca80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f28cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7fd82f278020" loc="75:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7fd82f278020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2783a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f278530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2786c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f278850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2789e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f278b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f278d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f277020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2771b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f277340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2774d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f277660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2777f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f277a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f277c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7fd82f264200" loc="88:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7fd82f264200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f264580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f264710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2648a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f264a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f264bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f264d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f263020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2631b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f263340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2634d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f263660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2637f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f263980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f263c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f263da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7fd82f226580" loc="156:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7fd82f226580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f226900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f226a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f226c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f226db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f225020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2251b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f225340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2254d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f225660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2257f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f225980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f225b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f225ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f224020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2241b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7fd82f220570" loc="160:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7fd82f220570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2208f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f220a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f220c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f220da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f21f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f21f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f21f340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f21f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f21f660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f21f7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f21f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f21fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f21fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f21e020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f21e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7fd82f214570" loc="166:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7fd82f214570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2148f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f214a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f214c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f214da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f213020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2131b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f213340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2134d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f213660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2137f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f213980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f213b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f213ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f212020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2121b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7fd82f260200" loc="93:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7fd82f260200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f260580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f260710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2608a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f260a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f260bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f260d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f25f020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f25f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f25f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f25f4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f25f660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f25f7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f25f980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f25fc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f25fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7fd82f224580" loc="157:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7fd82f224580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f224900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f224a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f224c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f224db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f223020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2231b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f223340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2234d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f223660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2237f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f223980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f223b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f223ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f222020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2221b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fd82f29b020" loc="52:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fd82f29b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f29b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f29b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f29b6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f29b850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f29b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f29bb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f29bd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f29a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f29a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f29a340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f29a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f29a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f29a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f29aa80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f29ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fd82f286020" loc="65:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fd82f286020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2863a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f286530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2866c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f286850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2869e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f286b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f286d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f285020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2851b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f285340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2854d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f285660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2857f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f285a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f285c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7fd82f272020" loc="78:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7fd82f272020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2723a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f272530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2726c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f272850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2729e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f272b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f272d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f271020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2711b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f271340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2714d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f271660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2717f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f271a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f271c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7fd82f22d580" loc="153:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7fd82f22d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f22d900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f22da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f22dc20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f22ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f22c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f22c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f22c340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f22c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f22c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f22c7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f22c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f22cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f22cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f22b020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f22b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7fd82f218570" loc="164:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7fd82f218570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2188f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f218a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f218c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f218da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f217020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2171b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f217340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2174d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f217660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2177f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f217980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f217b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f217ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f216020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2161b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7fd82f26e200" loc="83:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7fd82f26e200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f26e580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f26e710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f26e8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f26ea30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f26ebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f26ed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f26d020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f26d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f26d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f26d4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f26d660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f26d7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f26d980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f26dc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f26dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7fd82f259200" loc="96:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7fd82f259200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f259580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f259710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2598a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f259a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f259bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f259d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f258020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2581b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f258340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2584d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f258660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2587f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f258980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f258c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f258da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7fd82f249200" loc="107:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fd82f249200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f249580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f249710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2498a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f249a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f249bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f249d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f248020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2481b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f248340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2484d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f248660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2487f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f248980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f248c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f248da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fd82f295020" loc="55:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fd82f295020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2953a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f295530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2956c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f295850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2959e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f295b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f295d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f294020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2941b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f294340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2944d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f294660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2947f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f294a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f294c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7fd82f24d200" loc="105:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fd82f24d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f24d580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f24d710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f24d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f24da30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f24dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f24dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f24c020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f24c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f24c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f24c4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f24c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f24c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f24c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f24cc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f24cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fd82f291020" loc="60:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fd82f291020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2913a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f291530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2916c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f291850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2919e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f291b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f291d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f290020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2901b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f290340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2904d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f290660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2907f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f290a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f290c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7fd82f27c020" loc="73:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7fd82f27c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f27c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f27c530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f27c6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f27c850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f27c9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f27cb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f27cd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f27b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f27b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f27b340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f27b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f27b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f27b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f27ba80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f27bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7fd82f268200" loc="86:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7fd82f268200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f268580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f268710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2688a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f268a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f268bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f268d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f267020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2671b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f267340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2674d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f267660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2677f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f267980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f267c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f267da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7fd82f253200" loc="99:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7fd82f253200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f253580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f253710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2538a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f253a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f253bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f253d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f252020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2521b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f252340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2524d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f252660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2527f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f252980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f252c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f252da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7fd82f243200" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fd82f243200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f243580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f243710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2438a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f243a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f243bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f243d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f242020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2421b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f242340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2424d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f242660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2427f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f242980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f242c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f242da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fd82f29f020" loc="50:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fd82f29f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f29f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f29f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f29f6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f29f850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f29f9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f29fb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f29fd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f29e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f29e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f29e340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f29e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f29e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f29e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f29ea80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f29ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fd82f28b020" loc="63:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fd82f28b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f28b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f28b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f28b6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f28b850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f28b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f28bb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f28bd00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f28a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f28a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f28a340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f28a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f28a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f28a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f28aa80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f28ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7fd82f276020" loc="76:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7fd82f276020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2763a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f276530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2766c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f276850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f2769e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f276b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f276d00"/>
        <function-ref name="get" scoped="" ref="0x7fd82f275020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f2751b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f275340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f2754d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f275660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f2757f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f275a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f275c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7fd82f262200" loc="89:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7fd82f262200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f262580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f262710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f2628a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f262a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f262bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f262d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f261020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2611b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f261340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2614d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f261660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f2617f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f261980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f261c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f261da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7fd82f235560" loc="148:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7fd82f235560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2358e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f235a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f235c00"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f235d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f234020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2341b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f234340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2344d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f234660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2347f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f234980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f234b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f234ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f233020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2331b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7fd82f21e570" loc="161:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7fd82f21e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f21e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f21ea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f21ec10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f21eda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f21d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f21d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f21d340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f21d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f21d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f21d7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f21d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f21db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f21dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f21c020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f21c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7fd82f237580" loc="147:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7fd82f237580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f237900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f237a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f237c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f237db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f236020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2361b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f236340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2364d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f236660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2367f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f236980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f236b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f236ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f235020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2351b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7fd82f25e200" loc="94:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7fd82f25e200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f25e580"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f25e710"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f25e8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f25ea30"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f25ebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f25ed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f25d020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f25d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f25d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f25d4d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f25d660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f25d7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f25d980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f25dc10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f25dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7fd82f212570" loc="168:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7fd82f212570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f2128f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f212a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f212c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f212da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f211020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f2111b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f211340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f2114d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f211660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f2117f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f211980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f211b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f211ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f210020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f2101b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7fd82f20c580" loc="172:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7fd82f20c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f20c900"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f20ca90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f20cc20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f20cdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f20b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f20b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f20b340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f20b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f20b660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f20b7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f20b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f20bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f20bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f20a020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f20a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7fd82f23f1f0" loc="143:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7fd82f23f1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f23f970"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f23fb00"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f23fc90"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f23fe20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f23e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f23e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f23e340"/>
        <function-ref name="get" scoped="" ref="0x7fd82f23e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f23e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f23e7f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f23e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f23eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f23eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f23d020"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f23d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1e16d0" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1e16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1e1a50"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1e1be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1e1d70"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1e0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1e01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1e0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1e04d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1e0660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1e07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1e0980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1e0b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1e0ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1e0e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1df120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1df2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1dc100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1dc100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1dc480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1dc610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1dc7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1dc930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1dcac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1dcc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1dcde0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1da020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1da1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1da340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1da4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1da660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1da7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1daa80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1dac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1d7d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1d7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1d60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1d6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1d6400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1d6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1d6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1d68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1d6a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1d6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1d6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1d5020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1d51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1d5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1d54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1d5760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1d58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1d2740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1d2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1d2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1d2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1d2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1d1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1d11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1d1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1d14d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1d1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1d17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1d1980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1d1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1d1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1d1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1d0120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1d02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1cd100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1cd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1cd480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1cd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1cd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1cd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1cdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1cdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1cdde0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1cc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1cc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1cc340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1cc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1cc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1cc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1cca80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1ccc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1c9d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1c9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1c80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1c8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1c8400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1c8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1c8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1c88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1c8a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1c8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1c8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1c7020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1c71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1c7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1c74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1c7760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1c78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1c4740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1c4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1c4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1c4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1c4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1c3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1c31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1c3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1c34d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1c3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1c37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1c3980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1c3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1c3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1c3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1c2120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1c22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1bf100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1bf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1bf480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1bf610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1bf7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1bf930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1bfac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1bfc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1bfde0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1be020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1be1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1be340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1be4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1be660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1be7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1bea80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1bec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1bbd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1bbd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1ba0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1ba270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1ba400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1ba590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1ba720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1ba8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1baa40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1babd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1bad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1b9020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1b91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1b9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1b94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1b9760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1b98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1b6740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1b6740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1b6ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1b6c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1b6de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1b4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1b41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1b4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1b44d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1b4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1b47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1b4980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1b4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1b4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1b4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1b3120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1b32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1b0100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1b0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1b0480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1b0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1b07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1b0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1b0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1b0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1b0de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1af020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1af1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1af340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1af4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1af660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1af7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1afa80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1afc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1acd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1acd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1ab0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1ab270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1ab400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1ab590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1ab720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1ab8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1aba40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1abbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1abd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1aa020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1aa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1aa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1aa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1aa760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1aa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1a7860" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1a7860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1a7be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1a7d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1a6020"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1a61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1a6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1a64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1a6660"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1a67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1a6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1a6b10"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1a6ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1a6e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1a5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1a52b0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1a5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f1a2270" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f1a2270"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1a25f0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f1a2780"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1a2910"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f1a2aa0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1a2c30"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1a2dc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1a1020"/>
        <function-ref name="get" scoped="" ref="0x7fd82f1a11b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1a1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f1a14d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1a1660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f1a17f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1a1980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f1a1c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1a1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f19ed10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f19ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f19d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f19d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f19d400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f19d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f19d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f19d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f19da40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f19dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f19dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f19c020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f19c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f19c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f19c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f19c760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f19c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f199740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f199740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f199ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f199c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f199de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f198020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1981b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f198340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1984d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f198660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1987f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f198980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f198b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f198ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f198e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f197120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1972b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f194100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f194100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f194480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f194610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1947a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f194930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f194ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f194c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f194de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f193020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1931b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f193340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1934d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f193660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1937f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f193a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f193c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f18fd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f18fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f18e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f18e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f18e400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f18e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f18e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f18e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f18ea40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f18ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f18ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f18d020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f18d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f18d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f18d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f18d760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f18d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f18a740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f18a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f18aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f18ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f18ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f189020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1891b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f189340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1894d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f189660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1897f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f189980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f189b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f189ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f189e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f188120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1882b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f185100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f185100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f185480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f185610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1857a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f185930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f185ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f185c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f185de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f184020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1841b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f184340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1844d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f184660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1847f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f184a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f184c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f181d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f181d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1800e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f180270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f180400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f180590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f180720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1808b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f180a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f180bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f180d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f17f020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f17f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f17f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f17f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f17f760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f17f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f17c740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f17c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f17cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f17cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f17cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f17b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f17b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f17b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f17b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f17b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f17b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f17b980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f17bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f17bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f17be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f17a120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f17a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f177100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f177100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f177480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f177610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1777a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f177930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f177ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f177c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f177de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f176020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1761b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f176340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1764d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f176660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1767f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f176a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f176c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f173d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f173d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1720e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f172270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f172400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f172590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f172720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1728b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f172a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f172bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f172d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f171020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1711b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f171340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1714d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f171760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1718f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f16ea60" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f16ea60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f16ede0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f16c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f16c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f16c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f16c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f16c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f16c7f0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f16c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f16cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f16cca0"/>
        <function-ref name="set" scoped="" ref="0x7fd82f16ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f16b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f16b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f16b440"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f16b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f168460" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f168460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1687e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f168970"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f168b00"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f168c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f168e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f167020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1671b0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f167340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1674d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f167660"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1677f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f167980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f167b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f167da0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f166020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f164e00" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f164e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1631c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f163350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1634e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f163670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f163800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f163990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f163b20"/>
        <function-ref name="get" scoped="" ref="0x7fd82f163cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f163e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f162020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1621b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f162340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1624d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f162760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1628f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f15f740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f15f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f15fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f15fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f15fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f15e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f15e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f15e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f15e4d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f15e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f15e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f15e980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f15eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f15eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f15ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f15d120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f15d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f15a100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f15a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f15a480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f15a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f15a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f15a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f15aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f15ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f15ade0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f159020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1591b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f159340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1594d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f159660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1597f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f159a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f159c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f156d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f156d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1550e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f155270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f155400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f155590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f155720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1558b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f155a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f155bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f155d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f154020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1541b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f154340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1544d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f154760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1548f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f151740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f151740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f151ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f151c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f151de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f150020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1501b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f150340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1504d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f150660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1507f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f150980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f150b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f150ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f150e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f14f120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f14f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f14c100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f14c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f14c480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f14c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f14c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f14c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f14cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f14cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f14cde0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f14b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f14b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f14b340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f14b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f14b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f14b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f14ba80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f14bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f148d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f148d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1460e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f146270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f146400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f146590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f146720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1468b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f146a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f146bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f146d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f145020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1451b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f145340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1454d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f145760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1458f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f142740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f142740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f142ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f142c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f142de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f141020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1411b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f141340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1414d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f141660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1417f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f141980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f141b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f141ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f141e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f140120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1402b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f13d100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f13d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f13d480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f13d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f13d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f13d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f13dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f13dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f13dde0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f13c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f13c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f13c340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f13c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f13c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f13c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f13ca80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f13cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f139d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f139d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f1380e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f138270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f138400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f138590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f138720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f1388b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f138a40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f138bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f138d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f137020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1371b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f137340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1374d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f137760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1378f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f134740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f134740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f134ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f134c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f134de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f133020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1331b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f133340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1334d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f133660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1337f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f133980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f133b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f133ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f133e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f132120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1322b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f12f100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f12f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f12f480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f12f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f12f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f12f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f12fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f12fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f12fde0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f12e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f12e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f12e340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f12e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f12e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f12e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f12ea80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f12ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f12bd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f12bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f12a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f12a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f12a400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f12a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f12a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f12a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f12aa40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f12abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f12ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f129020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f129340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f129760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f126740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f126740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f126ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f126c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f126de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f125020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1251b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f125340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1254d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f125660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1257f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f125980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f125b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f125ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f125e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f124120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1242b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f120100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f120100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f120480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f120610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1207a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f120930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f120ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f120c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f120de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f11f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f11f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f11f340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f11f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f11f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f11f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f11fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f11fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f11cd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f11cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f11b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f11b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f11b400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f11b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f11b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f11b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f11ba40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f11bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f11bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f11a020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f11a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f11a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f11a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f11a760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f11a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f117740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f117740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f117ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f117c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f117de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f116020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1161b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f116340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1164d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f116660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1167f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f116980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f116b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f116ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f116e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f115120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1152b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f112100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f112100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f112480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f112610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1127a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f112930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f112ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f112c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f112de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f111020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1111b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f111340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1114d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f111660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1117f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f111a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f111c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f10ed10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f10ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f10d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f10d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f10d400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f10d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f10d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f10d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f10da40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f10dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f10dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f10c020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f10c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f10c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f10c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f10c760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f10c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f109740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f109740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f109ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f109c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f109de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f108020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f1081b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f108340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f1084d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f108660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1087f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f108980"/>
        <function-ref name="set" scoped="" ref="0x7fd82f108b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f108ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f108e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f107120"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f1072b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f104100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f104100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f104480"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f104610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f1047a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f104930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f104ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f104c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f104de0"/>
        <function-ref name="get" scoped="" ref="0x7fd82f103020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f1031b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f103340"/>
        <function-ref name="set" scoped="" ref="0x7fd82f1034d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f103660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f1037f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f103a80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f103c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fd82f100d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fd82f100d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82f0fe0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82f0fe270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82f0fe400"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82f0fe590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82f0fe720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82f0fe8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82f0fea40"/>
        <function-ref name="get" scoped="" ref="0x7fd82f0febd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82f0fed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82f0fd020"/>
        <function-ref name="set" scoped="" ref="0x7fd82f0fd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82f0fd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82f0fd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82f0fd760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82f0fd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fd82f07b1d0" loc="55:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7fd82f07b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82f07be00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7fd82f083ad0" loc="54:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7fd82f083ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f083e50"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f07c020"/>
        <function-ref name="request" scoped="" ref="0x7fd82f07c1b0"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f07c340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f07c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7fd82f084750" loc="52:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7fd82f084750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f084ad0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f084c60"/>
        <function-ref name="request" scoped="" ref="0x7fd82f084df0"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f083020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f0831b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7fd82f076800" loc="43:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fd82f076800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fd82f076b80"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fd82f076d10"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fd82f071020"/>
        <function-ref name="isBusy" scoped="" ref="0x7fd82f0711b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fd82f071340"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fd82f0714d0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fd82f071660"/>
        <function-ref name="startConversion" scoped="" ref="0x7fd82f0717f0"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fd82f071980"/>
        <function-ref name="getMem" scoped="" ref="0x7fd82f071b10"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fd82f071ca0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fd82f071e30"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fd82f070020"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fd82f0702b0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fd82f070440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7fd82f05e680" loc="45:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7fd82f05e680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82f05bc40"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f05c1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82f05b020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82f05cae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82f059590"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82f059110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82f05c660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82f05d390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82f05b630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82f05d860"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f05dd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7fd82f077be0" loc="39:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fd82f077be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fd82f076020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fd82f0761b0"/>
        <function-ref name="start" scoped="" ref="0x7fd82f076340"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f0764d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7fd82f059c30" loc="46:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7fd82f059c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82f054110"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f0576a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82f0564a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82f056020"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82f054a10"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82f054590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82f057b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82f058860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82f056ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82f058d30"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f057220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7fd82f077020" loc="38:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fd82f077020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fd82f0773a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fd82f077530"/>
        <function-ref name="start" scoped="" ref="0x7fd82f0776c0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f077850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7fd82f06f270" loc="44:../../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7fd82f06f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82f0606e0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82f06ecb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82f061a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82f0615f0"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82f05e020"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82f060b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82f061170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82f06fe60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82f0600d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82f06e360"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f06e830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fd82f005920" loc="43:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7fd82f005920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82f0045a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7fd82f006540" loc="42:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fd82f006540"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fd82f0068c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fd82f006a50"/>
        <function-ref name="start" scoped="" ref="0x7fd82f006be0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f006d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7fd82f008ad0" loc="40:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7fd82f008ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f008e50"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f007020"/>
        <function-ref name="request" scoped="" ref="0x7fd82f0071b0"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f007340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f0074d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7fd82f0096f0" loc="38:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7fd82f0096f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fd82f009a70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fd82f009c00"/>
        <function-ref name="request" scoped="" ref="0x7fd82f009d90"/>
        <function-ref name="granted" scoped="" ref="0x7fd82f008020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fd82f0081b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7fd82f0012a0" loc="52:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7fd82f0012a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82f001620"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82f0017b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7fd82f007860" loc="41:../../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fd82f007860"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fd82f007be0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fd82f007d70"/>
        <function-ref name="start" scoped="" ref="0x7fd82f006020"/>
        <function-ref name="stop" scoped="" ref="0x7fd82f0061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82ee25370" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82ee25370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee21870"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee24e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82ee22c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82ee22780"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82ee201e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82ee21cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee22300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82ee24020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82ee21260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82ee244f0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee249c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fd82efc8020" loc="49:../../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82efc4630"/>
        <function-ref name="fired" scoped="" ref="0x7fd82efc7a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82efc6920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82efc64a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82efc3020"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82efc4ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82efc6020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82efc8c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82efc4020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82efc7110"/>
        <function-ref name="stop" scoped="" ref="0x7fd82efc75e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fd82efc0c30" loc="46:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fd82efc0c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82efbb110"/>
        <function-ref name="fired" scoped="" ref="0x7fd82efbd6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82efbc4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82efbc020"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82efbba10"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82efbb590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82efbdb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82efbe860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82efbcab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82efbed30"/>
        <function-ref name="stop" scoped="" ref="0x7fd82efbd220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fd82efb6500" loc="47:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fd82efb6500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82efb8170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82efc3e50" loc="45:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82efc3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82efc0210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fd82eec1870" loc="44:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fd82eec1870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82eebd090"/>
        <function-ref name="fired" scoped="" ref="0x7fd82eebf090"/>
        <function-ref name="startAt" scoped="" ref="0x7fd82eebfa10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82eebf550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fd82eebd550"/>
        <function-ref name="start" scoped="" ref="0x7fd82eec06a0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82eec0bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82eec1020" loc="43:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82eec1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82eec13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fd82e889020" loc="44:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fd82e889020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82e886870"/>
        <function-ref name="fired" scoped="" ref="0x7fd82e888840"/>
        <function-ref name="startAt" scoped="" ref="0x7fd82e886220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82e888d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fd82e886d30"/>
        <function-ref name="start" scoped="" ref="0x7fd82e889e30"/>
        <function-ref name="stop" scoped="" ref="0x7fd82e888380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82e88a720" loc="43:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82e88a720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82e88aaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fd82e8715d0" loc="41:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82e8715d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82e871950"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82e871ae0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82e871c70"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82e871e00"/>
        <function-ref name="fired" scoped="" ref="0x7fd82e86f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fd82e874c50" loc="39:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82e874c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82e873020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82e8731b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82e873340"/>
        <function-ref name="get" scoped="" ref="0x7fd82e8734d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82e873660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82e8737f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82e873980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82e873b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82e873ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82e873e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82e872020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fd82e8722b0" loc="40:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82e8722b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82e872630"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82e8727c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82e872950"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82e872ae0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82e872c70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82e872e00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82e871020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82e8711b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82e871340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fd82ef923f0" loc="52:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82ef923f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82ef92770"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82ef92900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82ef92a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82ef92c20"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ef92db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fd82ef99cd0" loc="50:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef99cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82ef960a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82ef96230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82ef963c0"/>
        <function-ref name="get" scoped="" ref="0x7fd82ef96550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82ef966e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ef96870"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82ef96a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ef96b90"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ef96d20"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82ef95020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82ef951b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fd82ef95a40" loc="51:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82ef95a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82ef95dc0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82ef94020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82ef941b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82ef94340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82ef944d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82ef94660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82ef947f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82ef94980"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82ef94b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fd82e866440" loc="49:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fd82e866440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fd82e8667c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fd82e866950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fd82e866ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fd82e866c70"/>
        <function-ref name="fired" scoped="" ref="0x7fd82e866e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fd82e86a910" loc="47:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82e86a910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82e86ac90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82e86ae20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82e869020"/>
        <function-ref name="get" scoped="" ref="0x7fd82e8691b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82e869340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82e8694d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82e869660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82e8697f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82e869980"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82e869b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82e869ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fd82e86d720" loc="46:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fd82e86d720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82e86a020"/>
        <function-ref name="fired" scoped="" ref="0x7fd82e86b020"/>
        <function-ref name="startAt" scoped="" ref="0x7fd82e86b9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82e86b4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fd82e86a4e0"/>
        <function-ref name="start" scoped="" ref="0x7fd82e86c5b0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82e86cac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82e86ee60" loc="45:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82e86ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82e86d210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fd82e868020" loc="48:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fd82e868020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fd82e8683a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fd82e868530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82e8686c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fd82e868850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fd82e8689e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82e868b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fd82e868d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fd82e866020"/>
        <function-ref name="setControl" scoped="" ref="0x7fd82e8661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fd82ef3ab50" loc="43:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fd82ef3ab50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82ef3e9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ef3d360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ef3ee70"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ef3d820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7fd82ef38b70" loc="43:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fd82ef38b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82ef359b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ef34360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ef35e70"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ef34820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fd82ef23c50" loc="45:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fd82ef23c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fd82ef21020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fd82ef211b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fd82ef21340"/>
        <function-ref name="get" scoped="" ref="0x7fd82ef214d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fd82ef21660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ef217f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fd82ef21980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ef21b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ef21ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fd82ef21e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fd82ef20020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fd82ef31b80" loc="44:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fd82ef31b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82ef309b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ef23360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ef30e70"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ef23820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fd82eeff0f0" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fd82eeff0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82eefe020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82eefe9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82eefe4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82eefee60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fd82ef1dcf0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fd82ef1dcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82ef02b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ef01550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ef01090"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ef01a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fd82e8831d0" loc="61:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fd82e8831d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82e881b30"/>
        <function-ref name="fired" scoped="" ref="0x7fd82e8829f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fd82e8814e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82e881020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fd82e880020"/>
        <function-ref name="start" scoped="" ref="0x7fd82e882020"/>
        <function-ref name="stop" scoped="" ref="0x7fd82e882530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fd82e87db90" loc="73:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fd82e87db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06dc80"/>
            <typename><typedef-ref name="T32khz" ref="0x7fd82f06b020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82e87a4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fd82e87b4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fd82e87be60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82e87b9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fd82e87a9a0"/>
        <function-ref name="start" scoped="" ref="0x7fd82e87c9d0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82e87b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fd82e880690" loc="68:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fd82e880690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82e87e5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82e87d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82e87ea70"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82e87d4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fd82ee8c9c0" loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7fd82ee8c9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82ee8cd40"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82ee8b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fd82ee90850" loc="49:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fd82ee90850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee8c090"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee8d090"/>
        <function-ref name="startAt" scoped="" ref="0x7fd82ee8da10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee8d550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fd82ee8c550"/>
        <function-ref name="start" scoped="" ref="0x7fd82ee8e6a0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee8ebb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82ee952f0" loc="48:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82ee952f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee91870"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee93e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82ee92c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82ee92780"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82ee901e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82ee91cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee92300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82ee93020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82ee91260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82ee934f0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee939c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fd82ee3aa00" loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7fd82ee3aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fd82ee3ad80"/>
        <function-ref name="runTask" scoped="" ref="0x7fd82ee39020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fd82ee40640" loc="49:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fd82ee40640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee3cc40"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee3d1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82ee3c020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82ee3dae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82ee3a590"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82ee3a110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee3d660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82ee3e390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82ee3c630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82ee3e860"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee3ed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82ee45150" loc="48:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82ee45150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee41700"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee44c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82ee43a50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82ee435b0"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82ee40090"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82ee41ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee43110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82ee45d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82ee410d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82ee442a0"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee44790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fd82ee37790" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fd82ee37790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82ee363f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fd82ee36a60" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fd82ee36a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fd82ee2c890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fd82ee2b260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fd82ee2cd50"/>
        <function-ref name="overflow" scoped="" ref="0x7fd82ee2b720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82ee1fd10" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82ee1fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee1a220"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee1d7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82ee1b590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82ee1b110"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82ee1ab20"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82ee1a6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee1dc40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82ee1e940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82ee1bba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82ee1ee10"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee1d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fd82ee18750" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fd82ee18750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f06d4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fd82f06d840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fd82ee14c40"/>
        <function-ref name="fired" scoped="" ref="0x7fd82ee151e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fd82ee14020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fd82ee15ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fd82ee13590"/>
        <function-ref name="gett0" scoped="" ref="0x7fd82ee13110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fd82ee15660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fd82ee17390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fd82ee14630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fd82ee17860"/>
        <function-ref name="stop" scoped="" ref="0x7fd82ee17d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7fd82ec03a40" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7fd82ec03a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82ec026b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7fd82ec02cc0" loc="45:../../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="AdcSimpleAppC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7fd82ec02cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fd82ec00980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fd82edea1a0" loc="47:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fd82edea1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fd82edea520"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fd82edea6b0"/>
        <function-ref name="led1On" scoped="" ref="0x7fd82edea840"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fd82edea9d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fd82edeab60"/>
        <function-ref name="get" scoped="" ref="0x7fd82edeacf0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fd82edeae80"/>
        <function-ref name="led2Off" scoped="" ref="0x7fd82ede94e0"/>
        <function-ref name="set" scoped="" ref="0x7fd82ede9030"/>
        <function-ref name="led0On" scoped="" ref="0x7fd82ede91c0"/>
        <function-ref name="led2On" scoped="" ref="0x7fd82ede9350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fd82ede3060" loc="51:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fd82ede3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82ede33e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82ede3570"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82ede3700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82ede3890"/>
        <function-ref name="get" scoped="" ref="0x7fd82ede3a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82ede3bb0"/>
        <function-ref name="set" scoped="" ref="0x7fd82ede3d40"/>
        <function-ref name="clr" scoped="" ref="0x7fd82ede2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fd82ede6470" loc="47:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82ede6470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82ede67f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fd82ede2340" loc="52:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fd82ede2340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82ede26c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82ede2850"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82ede29e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82ede2b70"/>
        <function-ref name="get" scoped="" ref="0x7fd82ede2d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82eddd020"/>
        <function-ref name="set" scoped="" ref="0x7fd82eddd1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82eddd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fd82ede6a70" loc="48:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fd82ede6a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fd82ede6df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fd82ede5020"/>
        <function-ref name="led1On" scoped="" ref="0x7fd82ede51b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fd82ede5340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fd82ede54d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82ede5660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fd82ede57f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fd82ede5e30"/>
        <function-ref name="set" scoped="" ref="0x7fd82ede5980"/>
        <function-ref name="led0On" scoped="" ref="0x7fd82ede5b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fd82ede5ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fd82eddd660" loc="53:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fd82eddd660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82eddd9e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82edddb70"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82edddd00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82eddc020"/>
        <function-ref name="get" scoped="" ref="0x7fd82eddc1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82eddc340"/>
        <function-ref name="set" scoped="" ref="0x7fd82eddc4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82eddc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fd82ede7b10" loc="42:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fd82ede7b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82edc0020"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82edc01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82edc0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82edc04d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82edc0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82edc07f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82edc0980"/>
        <function-ref name="clr" scoped="" ref="0x7fd82edc0b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fd82edc0e70" loc="43:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fd82edc0e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82edbf220"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82edbf3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82edbf540"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82edbf6d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82edbf860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82edbf9f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82edbfb80"/>
        <function-ref name="clr" scoped="" ref="0x7fd82edbfd10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fd82edbd2e0" loc="45:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fd82edbd2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fd82edbd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fd82edbe0f0" loc="44:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fd82edbe0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82edbe470"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82edbe600"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82edbe790"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82edbe920"/>
        <function-ref name="get" scoped="" ref="0x7fd82edbeab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82edbec40"/>
        <function-ref name="set" scoped="" ref="0x7fd82edbedd0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82edbd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fd82eda92f0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fd82eda92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82eda9670"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82eda9800"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82eda9990"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82eda9b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82eda9cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82eda9e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82eda8020"/>
        <function-ref name="get" scoped="" ref="0x7fd82eda81b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82eda8340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82eda84d0"/>
        <function-ref name="set" scoped="" ref="0x7fd82eda8660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82eda87f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82eda8980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82eda8c10"/>
        <function-ref name="clr" scoped="" ref="0x7fd82eda8da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fd82edba020" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fd82edba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82edba3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82edba530"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82edba6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82edba850"/>
        <function-ref name="get" scoped="" ref="0x7fd82edba9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82edbab70"/>
        <function-ref name="set" scoped="" ref="0x7fd82edbad00"/>
        <function-ref name="clr" scoped="" ref="0x7fd82eda9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fd82eda5de0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fd82eda5de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82eda3180"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82eda3310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82eda34a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82eda3630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82eda37c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82eda3950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82eda3ae0"/>
        <function-ref name="get" scoped="" ref="0x7fd82eda3c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82eda3e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82eda2020"/>
        <function-ref name="set" scoped="" ref="0x7fd82eda21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82eda2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82eda24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82eda2760"/>
        <function-ref name="clr" scoped="" ref="0x7fd82eda28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fd82eda6b90" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fd82eda6b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82eda5020"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82eda51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82eda5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82eda54d0"/>
        <function-ref name="get" scoped="" ref="0x7fd82eda5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82eda57f0"/>
        <function-ref name="set" scoped="" ref="0x7fd82eda5980"/>
        <function-ref name="clr" scoped="" ref="0x7fd82eda5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fd82ed9f930" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fd82ed9f930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82ed9fcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82ed9fe40"/>
        <function-ref name="setResistor" scoped="" ref="0x7fd82ed9e020"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82ed9e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82ed9e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fd82ed9e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82ed9e660"/>
        <function-ref name="get" scoped="" ref="0x7fd82ed9e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fd82ed9e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fd82ed9eb10"/>
        <function-ref name="set" scoped="" ref="0x7fd82ed9eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fd82ed9ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fd82ed9d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fd82ed9d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82ed9d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fd82eda0710" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fd82eda0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fd82eda0a90"/>
        <function-ref name="isInput" scoped="" ref="0x7fd82eda0c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fd82eda0db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fd82ed9f020"/>
        <function-ref name="get" scoped="" ref="0x7fd82ed9f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fd82ed9f340"/>
        <function-ref name="set" scoped="" ref="0x7fd82ed9f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fd82ed9f660"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fd82f6ce8d0" loc="62:../../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fd82f6cc4a0" loc="60:../../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7fd82f68fb40" loc="48:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7fd82f692de0" loc="43:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7fd82f68f420" loc="47:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7fd82f692700" loc="42:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7fd82f6915a0" loc="45:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7fd82f695900" loc="40:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7fd82f692020" loc="41:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7fd82f691cc0" loc="46:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fd82f9ac020" loc="62:../../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fd82fc6d3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7fd82f63d020" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fd82f63ecc0" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7fd82f641390" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fd82f6875a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fd82f686020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fd82f63d890" loc="57:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7fd82f63b7b0" loc="59:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7fd82f63e560" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fd82f63b020" loc="58:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fd82f641b30" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7fd82f63f350" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7fd82f63fda0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fd82f6875a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fd82f686020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fd82f63fb20" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fd82f6875a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fd82f686020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fd82f62f0e0" loc="44:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7fd82f62d730" loc="84:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7fd82f62d4b0" loc="84:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fd82f62b2e0" loc="91:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fd82f62b060" loc="91:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fd82f62eca0" loc="73:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fd82f62e3e0" loc="68:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7fd82f62fa90" loc="56:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fd82f62f810" loc="56:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fd82f6363e0" loc="40:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7fd82f636d60" loc="41:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fd82f636ae0" loc="41:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7fd82f635790" loc="42:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fd82f635510" loc="42:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7fd82f6342a0" loc="43:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fd82f634020" loc="43:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fd82f634990" loc="45:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fd82f646810" loc="52:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fd82f6442a0" loc="55:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7fd82f644020" loc="55:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fd82f645020" loc="53:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fd82f64cab0" loc="45:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fd82f645760" loc="54:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fd82f6499b0" loc="47:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fd82f646120" loc="51:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fd82f649270" loc="46:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fd82f6480e0" loc="48:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fd82f6489f0" loc="50:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fd82f648770" loc="50:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7fd82f644cb0" loc="56:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7fd82f644a30" loc="56:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fd82f6061f0" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fd82f6fe7f0" loc="85:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fd82f6fb020" loc="86:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fd82f6fe020" loc="79:../../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fd82fb86810" loc="52:../../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fd82fd2c020" loc="57:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fd82fd2b020" loc="72:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fd82fd2c790" loc="65:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fd82fd20270" loc="67:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fd82fd20ac0" loc="75:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fd82f4d52b0" loc="49:../../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fd82f4d52b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fd82f4d5b70" loc="55:../../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fd82f4d48f0" loc="63:../../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fd82f4d52b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fd82f4d4340" loc="63:../../../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7fd82f4d4660" loc="63:../../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fd82f4d52b0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7fd82f4d9200" loc="45:../../../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7fd82f4d9200"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7fd82f4d9bd0" loc="58:../../../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7fd82f4d9200"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fd82f4cd530" loc="62:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fd82f4cdce0" loc="68:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fd82f4cc4e0" loc="73:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fd82f4cb490" loc="84:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fd82f4cabd0" loc="101:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fd82f4c8420" loc="117:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fd82f4ccc70" loc="78:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fd82f4c7020" loc="134:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fd82f4c8d10" loc="134:../../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fd82f4ced60" loc="57:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fd82f4cbc70" loc="90:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fd82f4ca420" loc="95:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fd82f4ab600" loc="120:../../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fd82f4ac5e0" loc="97:../../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fd82f4afc20" loc="88:../../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fd82f4acdd0" loc="102:../../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fd82f4aa0e0" loc="128:../../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fd82f4b45e0" loc="52:../../../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fd82f4b45e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fd82f4b1020" loc="58:../../../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fd82f4b1d90" loc="66:../../../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fd82f4b45e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fd82f4b17e0" loc="66:../../../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7fd82f4b1b00" loc="66:../../../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fd82f4b45e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7fd82f4994b0" loc="189:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7fd82f4a1450" loc="84:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fd82f4a11d0" loc="84:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7fd82f4a0940" loc="106:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fd82f4a0340" loc="106:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7fd82f4a06b0" loc="106:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7fd82f49a4c0" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fd82f49b260" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7fd82f49bb00" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fd82f49be80" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7fd82f49a210" loc="177:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7fd82f496dd0" loc="227:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7fd82f496730" loc="227:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fd82f496ac0" loc="227:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7fd82f49dd30" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fd82f49fa30" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7fd82f49d380" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fd82f49d710" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7fd82f49da80" loc="138:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7fd82f497120" loc="206:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fd82f499e70" loc="206:../../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7fd82f447e20" loc="97:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fd82f447160" loc="86:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fd82f4f0290"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7fd82f4f0760"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fd82f449af0" loc="86:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fd82f4f27b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fd82f4f3eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7fd82f448020" loc="87:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fd82f4f0290"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7fd82f4f0760"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7fd82f448390" loc="87:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7fd82f448730" loc="87:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fd82f448ae0" loc="88:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7fd82f448e50" loc="88:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fd82f446dc0" loc="107:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7fd82f4467a0" loc="107:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fd82f446b30" loc="107:../../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7fd82f443780" loc="49:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
          <long> &#10; An ADC12MEMx overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7fd82f442020" loc="54:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fd82f43ada0" loc="95:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fd82f4366a0" loc="105:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7fd82f426560" loc="63:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f4e0ce0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7fd82f4df7a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7fd82f4246c0" loc="82:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fd82f4f0290"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7fd82f4f0760"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fd82f424440" loc="82:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7fd82f421d90" loc="106:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7fd82f41f020" loc="118:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7fd82f4207d0" loc="112:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7fd82f420550" loc="112:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7fd82f426d80" loc="68:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f4dde20"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7fd82f4dc770"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7fd82f425b70" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fd82f4f0290"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7fd82f4f0760"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fd82f425520" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7fd82f4258e0" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fd82f4f0290"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7fd82f4f0760"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7fd82f41e0e0" loc="128:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7fd82f4282a0" loc="51:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f4e0ce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7fd82f4df7a0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7fd82f428020" loc="51:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f4e0ce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7fd82f4df7a0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7fd82f4232a0" loc="89:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fd82f423020" loc="89:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7fd82f423d20" loc="95:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fd82f423aa0" loc="95:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7fd82f4215d0" loc="101:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fd830787520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7fd82f41f7e0" loc="123:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7fd82f41e880" loc="133:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7fd82f428d00" loc="57:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f4dde20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7fd82f4dc770"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7fd82f428a80" loc="57:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fd82f4dde20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7fd82f4dc770"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fd82f412880" loc="78:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fd82f410020" loc="80:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7fd82f40db10" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fd82f40d890" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fd82f413120" loc="58:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fd82f40f020" loc="87:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7fd82f40b490" loc="117:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fd82f410760" loc="85:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fd82f4120e0" loc="73:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7fd82f40e770" loc="99:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7fd82f4138c0" loc="66:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fd82f414270" loc="48:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7fd82f40f7a0" loc="92:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7fd82f40d020" loc="101:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7fd82f40e020" loc="94:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fd82f4149a0" loc="53:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fd82f42eda0" loc="90:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fd82f42b6b0" loc="98:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fd830787160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fd82f304070" loc="53:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fd82f3049a0" loc="61:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fd82f3019b0" loc="65:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fd82f301190" loc="59:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fd82f2f8b50" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fd82f300a50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fd82f2f88d0" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fd82f300a50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fd82f2fca40" loc="53:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fd82f2f9580" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fd82f300a50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fd82f2f9300" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fd82f300a50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fd82f2f8020" loc="70:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fd82f300a50"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82f06bdd0" loc="53:../../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82f06bdd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fd82f064c10" loc="136:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fd82f068420" loc="83:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fd82f0652b0" loc="114:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fd82f066bd0" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fd82f065020" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fd82f066420" loc="98:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fd82f063c60" loc="151:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fd82f0633e0" loc="144:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fd82f068c00" loc="92:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fd82f06a970" loc="64:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fd82f06a6f0" loc="64:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fd82f0642b0" loc="129:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fd82f065c50" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fd82f064020" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fd82f0694d0" loc="73:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fd82f069250" loc="73:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fd82f069cd0" loc="78:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fd82f0734e0" loc="113:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fd82f073260" loc="113:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fd82f072ab0" loc="138:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fd82f072830" loc="138:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fd82f075860" loc="104:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fd82f073d30" loc="130:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fd82fd27c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82efb96d0" loc="53:../../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82efb96d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fd82efb6020" loc="61:../../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fd830787920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82efb0070" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82efb0070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fd82efb02b0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fd82eface00" loc="109:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fd82efaee40" loc="78:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fd82efac460" loc="103:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fd82efade60" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fd82efac1d0" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fd82efad640" loc="88:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fd82efab620" loc="116:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fd82efb0e10" loc="66:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fd82efb0b90" loc="66:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82efb02b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fd82efae680" loc="73:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fd82ef3c100" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fd82ef3c100"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fd82ef3c340" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82ef3c340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fd82ef3cc60" loc="64:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fd82ef3c340"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fd82ef3bd70" loc="76:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fd82ef3b510" loc="71:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fd82ef3a500" loc="82:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fd82eddf730" loc="44:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fd82eddfe60" loc="45:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fd82ede1880" loc="42:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fd82eddecf0" loc="47:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fd82eddf020" loc="43:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fd82fd30090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fd82edde5b0" loc="46:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fd82ede4a90" loc="40:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fd82ede1190" loc="41:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
