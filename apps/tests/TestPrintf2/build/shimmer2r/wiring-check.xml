<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="53:TestPrintfAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbff4b21c80"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbff560dde0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbff560dde0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbff5436590"/></to>
    </wire>
    <wire loc="54:TestPrintfAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff4b0cda0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff45247b0"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff45247b0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47e37d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:TestPrintfAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff4b070f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff4d83020"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff4d83020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff4d7fa70"/></to>
    </wire>
    <wire loc="56:TestPrintfAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fbff4b029b0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fbff4ae3e00"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer/DemoSensorC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fbff4ae3e00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fbff3eb5c00"/></to>
    </wire>
    <wire loc="37:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff460c150"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff47da400"/></to>
    </wire>
    <wire loc="96:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff3e6bca0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff4a20660"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff4b1c020"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff3f01c00"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff5311540"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff4b4aa60"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fbff5436c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fbff5cc93a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fbff5cc93a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fbff56a1c30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fbff54356c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff560b2f0"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff560b2f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff5605110"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5435dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fbff5605820"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7fbff5606500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fbff5606500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff55ce440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fbff5604020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff55f5080"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7fbff5604700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff4d562e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff55ce440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff55b43c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fbff55c49e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fbff55b4a70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbff594a4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbff55b3cc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7fbff5570a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff54ae6d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7fbff555e410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff54a6b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7fbff5567d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff54b3160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7fbff554a020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff548dcb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fbff556c020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff54b4480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7fbff5552570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff548d020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7fbff5547020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff5475cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7fbff5559a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff5486220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fbff5577020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff55039d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7fbff554c020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff549c2f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7fbff5554890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff549d610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7fbff555d8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff549e220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7fbff5566c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff54ac7a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7fbff5549020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff54842f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7fbff555b020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff54966d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7fbff556cda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff54adac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fbff55797b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff5511540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7fbff55513e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff5485610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fbff55765a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff54b5020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7fbff5557020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff547f6d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7fbff5561dc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff54bca90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7fbff554b020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff54947a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fbff556d140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff54bdde0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7fbff5553700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff5495ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7fbff5548020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff547d7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7fbff555a5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff548fb30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7fbff55501f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff547eac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7fbff554d020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fbff54a4cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7fbff554f020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff5475020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7fbff5555a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fbff54a4020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7fbff55565a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fbff5477b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fbff550f450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5510d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fbff550faa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7fbff5470a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fbff550e120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7fbff546d260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff54bb930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff5511540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff54b8020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5510d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff54b2020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff5511540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff54b17a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5510d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff54ab610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff5511540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff54a9c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5510d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fbff55082f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fbff5508940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7fbff546d9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fbff5507020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7fbff546c240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff54a3b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff54a12f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff549b160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff549a7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff5493610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff5492c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff548cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff548a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff5483160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff54827a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff547c610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff547bc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff5474b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fbff54722f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff56a0b70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fbff56992c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fbff5cbb3b0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fbff4b43a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fbff4b73bf0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbff4b40440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbff4b7a020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbff4b7a020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbff439a210"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbff4b3f0c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbff4b7ac30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbff4b7ac30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbff537f7e0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fbff4b22be0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fbff4b431a0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbff537f7e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbff5317d60"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbff4b788b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbff537d470"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbff537d470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbff53186c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fbff4b76020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbff537bb20"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbff537bb20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbff5315a10"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbff439ae80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbff53ddce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbff4399ab0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbff537d470"/></to>
    </wire>
    <wire loc="54:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbff53ddce0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbff5391580"/></to>
    </wire>
    <wire loc="55:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbff5390400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbff53863f0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fbff53863f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fbff536d300"/></to>
    </wire>
    <wire loc="56:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fbff538f060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fbff537d470"/></to>
    </wire>
    <wire loc="57:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fbff538e720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fbff537f7e0"/></to>
    </wire>
    <wire loc="169:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7fbff538d480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7fbff538dc60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbff53823b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbff5311b90"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fbff5311b90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbff52ffc40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbff537f1d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbff53180d0"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff5311540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff52ff5f0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff530b2b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff536e330"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fbff53144a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbff530d790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fbff5313120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbff530ec60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fbff5306970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fbff4b91a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fbff530d790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fbff51cdde0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fbff530ec60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fbff51cd6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fbff51ccc20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fbff5306970"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff52f7760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff530b2b0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff51ca920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff530b2b0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff51c0cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff530b2b0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbff51cb590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbff52f3530"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fbff51cbe80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fbff52f8a40"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbff52ee7e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbff51c6e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fbff52e9780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fbff519a0c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fbff519a0c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fbff4ba60c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbff51b6d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbff519a8d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbff519a8d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbff4bac440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fbff52966e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fbff52ce4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fbff529ac70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fbff5293a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fbff51c8020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fbff51c8800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fbff5198020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fbff4bab440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fbff4bab440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fbff5130d00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbff4bac440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbff5131670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff4baa020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff4ba6920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff4ba5020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4bad020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff4bad020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff5137c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4badc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff42d8a90"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff42d8a90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4d092c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff512a1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff4baa020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff42c9020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff512e8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fbff512ce50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff42d9e00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff42d9e00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4d0a020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fbff5126710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fbff42d1440"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fbff42d1440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fbff4d0d4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff512e8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff509adc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fbff5130d00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fbff5098890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fbff5131670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fbff50996d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff5137c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff509a020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff50963e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff512a1d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fbff50975b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7fbff512ce50"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fbff50915b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7fbff5126710"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7fbff5096a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fbff5087b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fbff5087b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fbff507b360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbff5090020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbff4da5d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbff4da5d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fbff4da0d90"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fbff508d120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fbff4d83020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fbff507fbd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff5076970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fbff50806d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fbff5076020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fbff503b860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fbff4f52cc0"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7fbff4f52cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ea3100"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7fbff5045800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7fbff4f4ecc0"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7fbff4f4ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e9fd10"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fbff5038800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fbff4f4ccc0"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7fbff4f4ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e9a740"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7fbff5036800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7fbff4f46cc0"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7fbff4f46cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e91d10"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7fbff5034800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7fbff4f48cc0"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7fbff4f48cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e95100"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7fbff504cbc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fbff4c66940"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fbff4fae810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ee2740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fbff4f99810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4eb2100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7fbff4f50ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ea3100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7fbff4f2bcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e19740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7fbff4f95810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ea9740"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7fbff4f819a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e78460"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7fbff4f6c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e49d10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fbff4f5c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e22100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7fbff4f37cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e35740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7fbff4f23cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e14100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fbff4fa8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ed4740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fbff4fa4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ecbd10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7fbff4f8f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e9a740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7fbff4f7b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e6a100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7fbff4f669a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e3bd10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fbff4f569a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e14100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fbff4fb2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4eeb100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fbff4f9e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ebcd80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7fbff4f89810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e8c740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7fbff4f31cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e27740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7fbff4f25cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e14100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7fbff4f3dcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e4d100"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7fbff4f85810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e83e60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7fbff4f719a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e52740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fbff4f609a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e2cd10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7fbff4f2fcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e22100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7fbff4f44cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e5c100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fbff4fac810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4edd100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fbff4f97810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4eaed10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fbff4f649a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e35740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7fbff4f93810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ea3100"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7fbff4f7f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e74e00"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7fbff4f6a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e44740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fbff4f5a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e1ed10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7fbff4f40cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e52740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fbff4fb8800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4f1cd10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fbff4fa2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ec5740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7fbff4f8d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e95100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7fbff4f799a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e66d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7fbff4f3bcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e8c740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7fbff4f35cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e30100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7fbff4f29cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e14100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7fbff4f759a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e5c100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7fbff4f39cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e87100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fbff4fb0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ee7d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fbff4f9b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4eb7740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7fbff4f87810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e87100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7fbff4f42cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e57d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7fbff4f2dcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e1ed10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7fbff4f839a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e7d9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7fbff4f6f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e4d100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fbff4f5e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e27740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fbff4faa810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ed9d10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fbff4f629a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e30100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fbff4fa6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ecf100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7fbff4f91810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e9fd10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7fbff4f7d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e6f740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7fbff4f689a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e3f100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fbff4f589a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e19740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fbff4fb4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ef1740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fbff4fa0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ec0100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7fbff4f8b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e91d10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7fbff4f779a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e61740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7fbff4f4aca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e9a740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7fbff4f33cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e2cd10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7fbff4f739a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e57d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7fbff4f27cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e19740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7fbff4f21cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4e3bd10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7fbff4f549f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fbff4ea9740"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fbff4da0d90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbff4d99e50"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff4d87020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff4d562e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff4d7f470"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fbff4d7c060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fbff4d80b10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fbff4d80b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fbff4d53020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fbff4d7b340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fbff4d59e70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fbff4d59e70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fbff4d3fb90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fbff4d76660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fbff4d570f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fbff4d570f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fbff4d3a710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fbff4d422f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7fbff4f85810"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fbff4d3ede0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7fbff4f819a0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fbff4d38930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7fbff4f7f9a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fbff42d1be0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff4d0c3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fbff42d02b0"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fbff4c70d70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fbff4c70d70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fbff4c66940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fbff42d7a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fbff5087b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff42d72b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4d09ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4d09ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4c78400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff4d088a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff42c9020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4d092c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4c79020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4c79020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff3efc3a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7fbff4d0d4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fbff4d06d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff4d0a020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4c7a210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff4c7a210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff3efd4d0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff4d0c3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff4d05710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4c78400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff3efb8b0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff4c78cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff4d088a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4cf3bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4c78400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7fbff4d05d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fbff50806d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fbff4cf35e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fbff507fbd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fbff4c797a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fbff3efcb20"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff3efa210"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff4c78cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fbff3efa9d0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fbff3f002b0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fbff3ef8c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7fbff4c5d700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fbff507b360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fbff4c58250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fbff4f52cc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fbff4c561f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fbff4f4ccc0"/></to>
    </wire>
    <wire loc="114:../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7fbff4b39500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fbff4b1c680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fbff4b22be0"/></to>
    </wire>
    <wire loc="44:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fbff4ae5a70"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fbff560dde0"/></to>
    </wire>
    <wire loc="47:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fbff4ae2210"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fbff53823b0"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer/VoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fbff3eb5c00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fbff3eb2bd0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fbff3eb2bd0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fbff3ea6690"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7fbff3ea6690"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7fbff4a9d390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7fbff3eace30"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7fbff3e9a840"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7fbff3e9a840"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7fbff4a9b210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7fbff3eaf420"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7fbff3ea1380"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7fbff3ea1380"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7fbff46181d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff3eac0c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff3e9b9c0"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff3e9b9c0"/></from>
      <to><interface-ref name="ResourceReadNow" scoped="" ref="0x7fbff4a98020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3ea4020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff4550a10"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e9e0e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff4550a10"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e98130"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff4550a10"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbff4a94d40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3ea4020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a91450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3e91020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3e91020"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a291d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7fbff4a97390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff3e923a0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff3e923a0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7fbff4890d20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e8f280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3ea4020"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x7fbff4a66e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fbff3e90020"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a28960"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fbff3e90910"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7fbff4a26920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7fbff488c1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4a2dcc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7fbff3e80cc0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e8f280"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbff488b740"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7fbff3e81a40"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a28960"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a1eaf0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7fbff4a241d0"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7fbff4a1b910"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fbff4a26920"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7fbff4a1cab0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a291d0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a1f370"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff4a2dcc0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff48a9520"/></to>
    </wire>
    <wire loc="98:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff48a9520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff3e68270"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7fbff4a1a280"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff48a8b20"/></to>
    </wire>
    <wire loc="100:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff48a8b20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff3e677a0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7fbff4a0b0d0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7fbff4939020"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fbff4a06be0"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7fbff4f649a0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fbff4a04c80"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7fbff4f629a0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fbff4a02c80"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7fbff4f609a0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fbff4a00c80"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7fbff4f5e9a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fbff49fec80"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7fbff4f5c9a0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fbff49fcc80"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7fbff4f5a9a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fbff49fac80"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7fbff4f589a0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fbff49f8c80"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7fbff4f569a0"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fbff4a18020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7fbff55797b0"/></to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fbff4a0a880"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7fbff5577020"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fbff4a09d30"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7fbff55765a0"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fbff4a07120"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7fbff556d140"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fbff4a07e60"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7fbff556c020"/></to>
    </wire>
    <wire loc="99:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff48a83a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff3e67020"/></to>
    </wire>
    <wire loc="101:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff3e650d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff48a7570"/></to>
    </wire>
    <wire loc="103:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fbff3e65890"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7fbff3e6a330"/></to>
    </wire>
    <wire loc="68:../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fbff3e64480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7fbff4890d20"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7fbff4826ca0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7fbff4822030"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7fbff488c1d0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbff481e020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7fbff488b740"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fbff4822d80"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fbff4886240"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fbff48209c0"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fbff4886e00"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7fbff4883a90"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff47ec640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff47ec640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47e37d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7fbff487d020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff4655140"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff4655140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47e37d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7fbff48786c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff464fb40"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fbff464fb40"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47e37d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7fbff48859a0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7fbff4939020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7fbff481c7f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47e37d0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47d91d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47d91d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff467c690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff47da400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff46f8760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fbff47d1a80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fbff466ecf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff46f8760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff3e31720"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fbff4677c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fbff46cccf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbff46c51d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff46f7020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbff46f7020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff3e2a1d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbff4663020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbff475a020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbff475a020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbff47535f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff3e31720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff3e15e60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fbff3e24b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff3e30020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbff3e30020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff3e14720"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbff3e27690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbff475a020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3e11910"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3e1bc50"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3e1bc50"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3e0f020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3e192b0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3e192b0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3e0d440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3e185d0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3e185d0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7fbff555e410"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7fbff5555a20"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7fbff555d8c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7fbff5554890"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7fbff555b020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7fbff5553700"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7fbff555a5a0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7fbff5552570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7fbff5559a50"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7fbff55513e0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7fbff5557020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7fbff55501f0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7fbff55565a0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7fbff554f020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fbff4736950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fbff4da0d90"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fbff46c2490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fbff4671e80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3d8b280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e9e0e0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff46145e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e9e0e0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff4610280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff3d8e360"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff3d8e360"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7fbff4890d20"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff4613c90"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3d8d020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3d8d020"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a291d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7fbff46181d0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7fbff4596cb0"/></to>
    </wire>
    <wire loc="32:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff4605b10"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff46145e0"/></to>
    </wire>
    <wire loc="33:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff45668f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4610280"/></to>
    </wire>
    <wire loc="35:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x7fbff456abf0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7fbff460ce70"/></to>
    </wire>
    <wire loc="38:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7fbff46061d0"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff4613c90"/></to>
    </wire>
    <wire loc="39:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbff4603020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff459e970"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbff459e970"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff3d78020"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="bufferDone" scoped="" ref="0x7fbff45da380"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamDone" scoped="" ref="0x7fbff45e8aa0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamFail" scoped="" ref="0x7fbff45e1100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff459e120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff3d7f450"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fbff3d7f450"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fbff3d63ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fbff3d72780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff3d7fca0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fbff3d7fca0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fbff3d625b0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fbff3d743d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fbff475a020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3d5e710"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3d68880"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3d68880"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3d5dda0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3d66020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3d66020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3d5b0c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3d65440"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3d65440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fbff3d8c020"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a28960"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fbff3d8c910"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7fbff4a26920"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7fbff488c1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4a2dcc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7fbff3d18120"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3d8b280"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbff488b740"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7fbff3d1bdc0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbff4a94d40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e98130"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a91450"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3d0d020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3d0d020"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a291d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SubResourceReadNow" scoped="" ref="0x7fbff4a966e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff3d0e280"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fbff3d0e280"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7fbff4890d20"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3d0b280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e98130"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fbff3d0c020"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a28960"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fbff3d0c910"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7fbff4a26920"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7fbff488c1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fbff4a2dcc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7fbff3cfccc0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3d0b280"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7fbff488b740"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7fbff3cfda40"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestPrintfC" loc="46:TestPrintfC.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestPrintfAppC.Sensor" loc="49(TestPrintfAppC.Sensor):../../../tos/platforms/shimmer/DemoSensorC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorC.nc">
        <short> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorC on the telosb platform provides a&#10; voltage reading, using VoltageC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10; &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor" loc="43(TestPrintfAppC.Sensor.DemoSensor):../../../tos/platforms/shimmer/VoltageC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC" loc="43(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC):../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InternalVoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC" loc="47(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC):../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcP" loc="36:../../../tos/chips/msp430/adc12/AdcP.nc" safe="">
      <module/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient" loc="43(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../tos/system/RoundRobinResourceQueueC.nc">
      <documentation loc="33:../../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC" loc="47(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC):../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP" loc="19:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <documentation loc="10:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
        <short>&#10; Support component for AdcReadStreamClientC.</short>
        <long>&#10; Support component for AdcReadStreamClientC.&#10;&#10; @author David Gay&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AdcStreamP" loc="46:../../../tos/chips/msp430/adc12/AdcStreamP.nc" safe="">
      <documentation loc="39:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
        <short>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).</short>
        <long>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm" loc="41(WireAdcStreamP.Alarm):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom" loc="41(WireAdcStreamP.Alarm.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer" loc="37(WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm" loc="43(WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm.Transform" loc="51(WireAdcStreamP.Alarm.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.ArbitrateReadStream" loc="23(WireAdcStreamP.ArbitrateReadStream):../../../tos/system/ArbitratedReadStreamC.nc">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadStreamC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient" loc="43(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430InternalVoltageP" loc="34:../../../tos/chips/msp430/sensors/Msp430InternalVoltageP.nc">
      <module/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC" loc="47(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC):../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient" loc="43(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestPrintfAppC.TimerMilliC" loc="44(TestPrintfAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7fbff5543970" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7fbff5543d10" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7fbff5542110" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7fbff5542490" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7fbff5542810" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7fbff5542b80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7fbff5541020" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7fbff55413b0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7fbff5541780" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7fbff5505e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7fbff5502270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fbff54283c0" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7fbff53f90d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7fbff53d60d0" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7fbff4f1b190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7fbff4f1b540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7fbff4f1b8f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7fbff4f1bca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7fbff4f1a060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fbff4d9ae60" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fbff4d9ae60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fbff4cee5b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fbff4ce15b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7fbff4cc8d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7fbff4b74490" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fbff4b74490"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7fbff4b74810" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="DemoSensorC" loc="49:../../../tos/platforms/shimmer/DemoSensorC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorC.nc">
        <short> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorC on the telosb platform provides a&#10; voltage reading, using VoltageC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10; &#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageC" loc="43:../../../tos/platforms/shimmer/VoltageC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430InternalVoltageC" loc="43:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadClientC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fbff4901850" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x7fbff48fa3b0" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fbff478f9c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fbff478f9c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fbff4756ba0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fbff4756ba0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fbff47523b0" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fbff47523b0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fbff47527a0" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fbff47527a0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fbff4750020" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fbff4750020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fbff47503f0" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fbff4750bf0" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fbff4750bf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fbff472f020" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fbff472f020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fbff472f7f0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fbff472f7f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fbff472fbe0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fbff472fbe0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fbff472e400" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fbff472e400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fbff472e7d0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff46f04f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff46f04f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff46bfd70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff46bfd70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fbff46bc0d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff466c1f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff466c1f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadStreamClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ArbitratedReadStreamC" loc="23:../../../tos/system/ArbitratedReadStreamC.nc" abstract="">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="nClients" ref="0x7fbff4598660" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </constant>
        <typedef name="val_t" ref="0x7fbff45989b0" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff45989b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7fbff5609320" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5609320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff56096a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fbff560dde0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fbff560dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbff560c180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff560b2f0" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff560b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff560b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fbff5604020" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7fbff5604020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff56043a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff5605110" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff5605110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5605490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7fbff5605820" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fbff5605820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5605ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7fbff5604700" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7fbff5604700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5604a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff55f5080" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff55f5080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff55f5400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7fbff5606500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fbff5606500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5606880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fbff55c49e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fbff55c49e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fbff55ca980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fbff55ca020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fbff55ca1b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fbff55ca340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fbff55c4d60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fbff55ca4d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fbff55ca660"/>
        <function-ref name="initClocks" scoped="" ref="0x7fbff55ca7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff55ce440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff55ce440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff55ce7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fbff55b4a70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fbff55b4a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fbff55b3980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fbff55b3020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fbff55b31b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fbff55b3340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fbff55b4df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fbff55b34d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fbff55b3660"/>
        <function-ref name="initClocks" scoped="" ref="0x7fbff55b37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fbff55b3cc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbff55b3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fbff55b20a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff55b43c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff55b43c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff55b4740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7fbff5570a50" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7fbff5570a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5570dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff556f020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff556f1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff556f340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff556f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff556f660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff556f7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff556f980"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff556fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7fbff555e410" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7fbff555e410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff555e790"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff555e920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff555eab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff555ec40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff555edd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff555d020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff555d1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff555d340"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff555d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7fbff5567d10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7fbff5567d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff55660e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5566270"/>
        <function-ref name="captured" scoped="" ref="0x7fbff5566400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5566590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5566720"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff55668b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7fbff554a020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7fbff554a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff554a3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff554a530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff554a6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff554a850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff554a9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff554ab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7fbff556c020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fbff556c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff556c3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff556c530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff556c6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff556c850"/>
        <function-ref name="fired" scoped="" ref="0x7fbff556c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7fbff5552570" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7fbff5552570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff55528f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5552a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff5552c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5552da0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff5551020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7fbff5547020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7fbff5547020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff55473a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5547530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff55476c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5547850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff55479e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5547b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7fbff5559a50" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7fbff5559a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5559dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5558020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff55581b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5558340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff55584d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5558660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff55587f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff5558980"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff5558b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7fbff5577020" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fbff5577020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff55773a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5577530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff55776c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5577850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff55779e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5577b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5577d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff5576020"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff55761b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7fbff554c020" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7fbff554c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff554c3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff554c530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff554c6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff554c850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff554c9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff554cb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7fbff5554890" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7fbff5554890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5554c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5554da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff5553020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff55531b0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff5553340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7fbff555d8c0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7fbff555d8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff555dd40"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff555c020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff555c1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff555c340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff555c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff555c660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff555c7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff555c980"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff555cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7fbff5566c70" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7fbff5566c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5560020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff55601b0"/>
        <function-ref name="captured" scoped="" ref="0x7fbff5560340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff55604d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5560660"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff55607f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7fbff5549020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7fbff5549020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff55493a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5549530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff55496c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5549850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff55499e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5549b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7fbff555b020" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7fbff555b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff555b3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff555b530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff555b6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff555b850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff555b9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff555bb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff555bd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff555a020"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff555a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7fbff556cda0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7fbff556cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5568180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5568310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff55684a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5568630"/>
        <function-ref name="fired" scoped="" ref="0x7fbff55687c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7fbff55797b0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fbff55797b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff5579b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff5579cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5579e50"/>
        <function-ref name="get" scoped="" ref="0x7fbff5581020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff55811b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5581340"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff55814d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5581660"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff55817f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff5581980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff5581b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7fbff55513e0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7fbff55513e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5551760"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff55518f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff5551a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5551c10"/>
        <function-ref name="fired" scoped="" ref="0x7fbff5551da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7fbff55765a0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fbff55765a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5576920"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5576ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5576c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5576dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff5570020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff55701b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5570340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff55704d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff5570660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7fbff5557020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7fbff5557020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff55573a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5557530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff55576c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5557850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff55579e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5557b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5557d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff5556020"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff55561b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7fbff5561dc0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7fbff5561dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5567180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5567310"/>
        <function-ref name="captured" scoped="" ref="0x7fbff55674a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5567630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff55677c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5567950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7fbff554b020" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7fbff554b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff554b3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff554b530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff554b6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff554b850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff554b9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff554bb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7fbff556d140" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fbff556d140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff556d4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff556d650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff556d7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff556d970"/>
        <function-ref name="fired" scoped="" ref="0x7fbff556db00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7fbff5553700" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7fbff5553700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5553a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5553c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff5553da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5552020"/>
        <function-ref name="fired" scoped="" ref="0x7fbff55521b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7fbff5548020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7fbff5548020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff55483a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5548530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff55486c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5548850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff55489e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5548b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7fbff555a5a0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7fbff555a5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff555a920"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff555aab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff555ac40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff555add0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff5559020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff55591b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5559340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff55594d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff5559660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7fbff5560b70" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7fbff5560b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff555f020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff555f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff555f340"/>
        <function-ref name="get" scoped="" ref="0x7fbff555f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff555f660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff555f7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff555f980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff555fb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff555fca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff555fe30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff555e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7fbff55501f0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7fbff55501f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5550570"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5550700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff5550890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5550a20"/>
        <function-ref name="fired" scoped="" ref="0x7fbff5550bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7fbff554d020" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7fbff554d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff554d3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff554d530"/>
        <function-ref name="captured" scoped="" ref="0x7fbff554d6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff554d850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff554d9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff554db70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7fbff554f020" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7fbff554f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff554f5a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff554f730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff554f8c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff554fa50"/>
        <function-ref name="fired" scoped="" ref="0x7fbff554fbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7fbff5555a20" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7fbff5555a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5555da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5554020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff55541b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5554340"/>
        <function-ref name="fired" scoped="" ref="0x7fbff55544d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7fbff55565a0" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7fbff55565a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5556920"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5556ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5556c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5556dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff5555020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff55551b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5555340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff55554d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff5555660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fbff550faa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fbff550faa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff550fe20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fbff550f450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fbff550f450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff550f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fbff550e120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fbff550e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff550e4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fbff5510d80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff5510d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff550f180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff5511540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff5511540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff55118c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff5511a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5511be0"/>
        <function-ref name="get" scoped="" ref="0x7fbff5511d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5510020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff55101b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff5510340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff55104d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff5510660"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff55107f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff5510980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fbff5508940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fbff5508940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5508cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fbff55082f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fbff55082f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5508670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fbff5507020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fbff5507020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff55073a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fbff5509bf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff5509bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5508020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff550a3e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff550a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff550a760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff550a8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff550aa80"/>
        <function-ref name="get" scoped="" ref="0x7fbff550ac10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff550ada0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5509020"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff55091b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5509340"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff55094d0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff5509660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff55097f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff54bca90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff54bca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54bce10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff54bb020"/>
        <function-ref name="captured" scoped="" ref="0x7fbff54bb1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54bb340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54bb4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff54bb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff55039d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff55039d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5503d50"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff54bd020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54bd1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff54bd340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff54bd4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54bd660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff54bd7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff54bd980"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff54bdb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff54b8020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff54b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff54b83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff54bdde0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff54bdde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54bc180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff54bc310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff54bc4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff54bc630"/>
        <function-ref name="fired" scoped="" ref="0x7fbff54bc7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff54bb930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff54bb930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff54bbcb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff54bbe40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54b9020"/>
        <function-ref name="get" scoped="" ref="0x7fbff54b91b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54b9340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54b94d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff54b9660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54b97f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff54b9980"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff54b9b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff54b9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff54b3160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff54b3160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54b34e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff54b3670"/>
        <function-ref name="captured" scoped="" ref="0x7fbff54b3800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54b3990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54b3b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff54b3cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff54b5020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff54b5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff54b53a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff54b5530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54b56c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff54b5850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff54b59e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54b5b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff54b5d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff54b4020"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff54b41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff54b17a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff54b17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff54b1b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff54b4480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff54b4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54b4800"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff54b4990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff54b4b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff54b4cb0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff54b4e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff54b2020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff54b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff54b23a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff54b2530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54b26c0"/>
        <function-ref name="get" scoped="" ref="0x7fbff54b2850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54b29e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54b2b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff54b2d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54b1020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff54b11b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff54b1340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff54b14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff54ac7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff54ac7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54acb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff54accb0"/>
        <function-ref name="captured" scoped="" ref="0x7fbff54ace40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54ab020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54ab1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff54ab340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff54ae6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff54ae6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff54aea50"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff54aebe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54aed70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff54ad020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff54ad1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54ad340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff54ad4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff54ad660"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff54ad7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff54a9c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff54a9c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff54a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff54adac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff54adac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54ade40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff54ac020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff54ac1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff54ac340"/>
        <function-ref name="fired" scoped="" ref="0x7fbff54ac4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff54ab610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff54ab610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff54ab990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff54abb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54abcb0"/>
        <function-ref name="get" scoped="" ref="0x7fbff54abe40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54a9020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54a91b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff54a9340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54a94d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff54a9660"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff54a97f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff54a9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff54a4cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff54a4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54a30a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff54a3230"/>
        <function-ref name="captured" scoped="" ref="0x7fbff54a33c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54a3550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54a36e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff54a3870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff54a6b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff54a6b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff54a5020"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff54a51b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54a5340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff54a54d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff54a5660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54a57f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff54a5980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff54a5b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff54a5ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff54a12f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff54a12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff54a1670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff54a4020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff54a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54a43a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff54a4530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff54a46c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff54a4850"/>
        <function-ref name="fired" scoped="" ref="0x7fbff54a49e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff54a3b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff54a3b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff54a2020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff54a21b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54a2340"/>
        <function-ref name="get" scoped="" ref="0x7fbff54a24d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54a2660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54a27f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff54a2980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54a2b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff54a2ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff54a2e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff54a1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff549c2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff549c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff549c670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff549c800"/>
        <function-ref name="captured" scoped="" ref="0x7fbff549c990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff549cb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff549ccb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff549ce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff549e220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff549e220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff549e5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff549e730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff549e8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff549ea50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff549ebe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff549ed70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff549d020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff549d1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff549d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff549a7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff549a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff549ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff549d610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff549d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff549d990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff549db20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff549dcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff549de40"/>
        <function-ref name="fired" scoped="" ref="0x7fbff549c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff549b160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff549b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff549b4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff549b670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff549b800"/>
        <function-ref name="get" scoped="" ref="0x7fbff549b990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff549bb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff549bcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff549be40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff549a020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff549a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff549a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff549a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff54947a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff54947a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5494b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5494cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fbff5494e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5493020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54931b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5493340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff54966d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff54966d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5496a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5496be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5496d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5495020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff54951b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5495340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff54954d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff5495660"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff54957f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff5492c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff5492c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5491020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff5495ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff5495ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5495e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5494020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff54941b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5494340"/>
        <function-ref name="fired" scoped="" ref="0x7fbff54944d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff5493610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff5493610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff5493990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff5493b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5493cb0"/>
        <function-ref name="get" scoped="" ref="0x7fbff5493e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5492020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54921b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff5492340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54924d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff5492660"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff54927f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff5492980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff548dcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff548dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff548c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff548c230"/>
        <function-ref name="captured" scoped="" ref="0x7fbff548c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff548c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff548c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff548c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff548fb30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff548fb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff548e020"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff548e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff548e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff548e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff548e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff548e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff548e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff548eb10"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff548eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff548a2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff548a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff548a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff548d020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff548d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff548d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff548d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff548d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff548d850"/>
        <function-ref name="fired" scoped="" ref="0x7fbff548d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff548cb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff548cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff548b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff548b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff548b340"/>
        <function-ref name="get" scoped="" ref="0x7fbff548b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff548b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff548b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff548b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff548bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff548bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff548be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff548a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff54842f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff54842f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5484670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5484800"/>
        <function-ref name="captured" scoped="" ref="0x7fbff5484990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5484b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5484cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5484e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff5486220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff5486220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff54865a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff5486730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff54868c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff5486a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff5486be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5486d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5485020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff54851b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff5485340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff54827a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff54827a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5482b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff5485610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff5485610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff5485990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5485b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff5485cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5485e40"/>
        <function-ref name="fired" scoped="" ref="0x7fbff5484020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff5483160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff5483160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff54834e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff5483670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5483800"/>
        <function-ref name="get" scoped="" ref="0x7fbff5483990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5483b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5483cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff5483e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5482020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff54821b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff5482340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff54824d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff547d7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff547d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff547db20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff547dcb0"/>
        <function-ref name="captured" scoped="" ref="0x7fbff547de40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff547c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff547c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff547c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff547f6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff547f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff547fa50"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff547fbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff547fd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff547e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff547e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff547e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff547e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff547e660"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff547e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff547bc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff547bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff547a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff547eac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff547eac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff547ee40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff547d020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff547d1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff547d340"/>
        <function-ref name="fired" scoped="" ref="0x7fbff547d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff547c610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff547c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff547c990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff547cb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff547ccb0"/>
        <function-ref name="get" scoped="" ref="0x7fbff547ce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff547b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff547b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff547b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff547b4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff547b660"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff547b7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff547b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fbff5475cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fbff5475cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54740a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fbff5474230"/>
        <function-ref name="captured" scoped="" ref="0x7fbff54743c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff5474550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff54746e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fbff5474870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fbff5477b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fbff5477b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff5476020"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff54761b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5476340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff54764d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff5476660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff54767f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff5476980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff5476b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff5476ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fbff54722f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fbff54722f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5472670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fbff5475020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fbff5475020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff54753a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff5475530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff54756c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff5475850"/>
        <function-ref name="fired" scoped="" ref="0x7fbff54759e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff5474b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff5474b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff5473020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff54731b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff5473340"/>
        <function-ref name="get" scoped="" ref="0x7fbff54734d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff5473660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff54737f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff5473980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff5473b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff5473ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff5473e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff5472020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7fbff546c240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7fbff546c240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff546c5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7fbff5470a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7fbff5470a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5470e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7fbff546d260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7fbff546d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff546d5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7fbff546d9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7fbff546d9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff546dd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fbff594a4c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fbff594a4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fbff594a840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fbff5cbb3b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fbff5cbb3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fbff5cbb730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fbff5cbb8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7fbff5cbba50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fbff5b24bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7fbff5b24bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fbff5c60020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fbff5435dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fbff5435dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5434180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fbff5436590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fbff5436590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbff5436910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fbff54356c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7fbff54356c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5435a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fbff5436c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fbff5436c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5435020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fbff54351b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fbff5435340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fbff5d38410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fbff5d38410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff5d38790"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff5d38920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fbff5cc93a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fbff5cc93a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff5cc9720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fbff5cc98b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fbff5cc9a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fbff56a0b70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fbff56a0b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff569f020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff569f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fbff56992c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fbff56992c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fbff5699640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fbff56997d0"/>
        <function-ref name="sleep" scoped="" ref="0x7fbff5699960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fbff56a1c30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fbff56a1c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff56a0020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fbff56a01b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fbff56a0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbff4b7a020" loc="49:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fbff4b7a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff4b7a3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff4b7a530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff4b7a6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff4b7a850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff4b7a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbff4b7ac30" loc="50:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fbff4b7ac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff4b78020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbff4b781b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff4b78340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff4b784d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbff4b78660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbff4b788b0" loc="51:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fbff4b788b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbff4b78c30"/>
        <function-ref name="source" scoped="" ref="0x7fbff4b78dc0"/>
        <function-ref name="address" scoped="" ref="0x7fbff4b77020"/>
        <function-ref name="destination" scoped="" ref="0x7fbff4b771b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbff4b77340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbff4b774d0"/>
        <function-ref name="type" scoped="" ref="0x7fbff4b77660"/>
        <function-ref name="setType" scoped="" ref="0x7fbff4b777f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbff4b77980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbff4b77b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbff4b77ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fbff4b76020" loc="52:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7fbff4b76020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbff4b763a0"/>
        <function-ref name="noAck" scoped="" ref="0x7fbff4b76530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbff4b766c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbff439a210" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fbff439a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff439a590"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff439a720"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff439a8b0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff439aa40"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff439abd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fbff439ae80" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fbff439ae80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff4399220"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff43993b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff4399540"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff43996d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff4399860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbff4399ab0" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fbff4399ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbff4399e30"/>
        <function-ref name="source" scoped="" ref="0x7fbff4397020"/>
        <function-ref name="address" scoped="" ref="0x7fbff43971b0"/>
        <function-ref name="destination" scoped="" ref="0x7fbff4397340"/>
        <function-ref name="setSource" scoped="" ref="0x7fbff43974d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbff4397660"/>
        <function-ref name="type" scoped="" ref="0x7fbff43977f0"/>
        <function-ref name="setType" scoped="" ref="0x7fbff4397980"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbff4397b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbff4397ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbff4397e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbff53ddce0" loc="44:../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fbff53ddce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff53da0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff53da230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff53da3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff53da550"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff53da6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fbff5390400" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fbff5390400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff53907a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff5390930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff5390ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff5390c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff5390de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbff5391580" loc="46:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fbff5391580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff5391920"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff5391ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff5391c40"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff5391dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff5390020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbff538e720" loc="50:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fbff538e720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff538eaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbff538ec30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff538edc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff538d020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbff538d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7fbff538d480" loc="169:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7fbff538d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff538d800"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff538d990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7fbff538dc60" loc="126:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7fbff538dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff538b020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff538b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fbff538f060" loc="49:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fbff538f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbff538f3e0"/>
        <function-ref name="source" scoped="" ref="0x7fbff538f570"/>
        <function-ref name="address" scoped="" ref="0x7fbff538f700"/>
        <function-ref name="destination" scoped="" ref="0x7fbff538f890"/>
        <function-ref name="setSource" scoped="" ref="0x7fbff538fa20"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbff538fbb0"/>
        <function-ref name="type" scoped="" ref="0x7fbff538fd40"/>
        <function-ref name="setType" scoped="" ref="0x7fbff538e020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbff538e1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbff538e340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbff538e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbff53823b0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fbff53823b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff5382730"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff53828c0"/>
        <function-ref name="start" scoped="" ref="0x7fbff5382a50"/>
        <function-ref name="stop" scoped="" ref="0x7fbff5382be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbff53863f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fbff53863f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff5386770"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff5386900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff5386a90"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff5386c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff5386db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbff537f7e0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fbff537f7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff537fb60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbff537fcf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff537fe80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff537d030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbff537d1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbff537f1d0" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fbff537f1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbff537f550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff536e330" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff536e330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff536e6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff536e840"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff536e9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff536eb60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff536ecf0"/>
        <function-ref name="get" scoped="" ref="0x7fbff536ee80"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff5379030"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff5379670"/>
        <function-ref name="set" scoped="" ref="0x7fbff53791c0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff5379350"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff53794e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbff537bb20" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbff537bb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbff537a020"/>
        <function-ref name="noAck" scoped="" ref="0x7fbff537a1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbff537a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbff537d470" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fbff537d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbff537d7f0"/>
        <function-ref name="source" scoped="" ref="0x7fbff537d980"/>
        <function-ref name="address" scoped="" ref="0x7fbff537db10"/>
        <function-ref name="destination" scoped="" ref="0x7fbff537dca0"/>
        <function-ref name="setSource" scoped="" ref="0x7fbff537de30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbff537b020"/>
        <function-ref name="type" scoped="" ref="0x7fbff537b1b0"/>
        <function-ref name="setType" scoped="" ref="0x7fbff537b340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbff537b4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbff537b660"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbff537b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fbff53144a0" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7fbff53144a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff5314820"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff53149b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff5314b40"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff5314cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff5314e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fbff5313120" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7fbff5313120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbff53134a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fbff536d300" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fbff536d300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff536d6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff536d830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff536d9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff536db50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff536dce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fbff5317d60" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fbff5317d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff5315180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbff5315310"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff53154a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff5315630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbff53157c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbff53180d0" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fbff53180d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbff5318470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fbff5315a10" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fbff5315a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fbff5315d90"/>
        <function-ref name="noAck" scoped="" ref="0x7fbff5314020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fbff53141b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fbff53186c0" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fbff53186c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fbff5318a40"/>
        <function-ref name="source" scoped="" ref="0x7fbff5318bd0"/>
        <function-ref name="address" scoped="" ref="0x7fbff5318d60"/>
        <function-ref name="destination" scoped="" ref="0x7fbff5317020"/>
        <function-ref name="setSource" scoped="" ref="0x7fbff53171b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fbff5317340"/>
        <function-ref name="type" scoped="" ref="0x7fbff53174d0"/>
        <function-ref name="setType" scoped="" ref="0x7fbff5317660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fbff53177f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fbff5317980"/>
        <function-ref name="localGroup" scoped="" ref="0x7fbff5317b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbff5311b90" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fbff5311b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff530e020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff530e1b0"/>
        <function-ref name="start" scoped="" ref="0x7fbff530e340"/>
        <function-ref name="stop" scoped="" ref="0x7fbff530e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbff530d790" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fbff530d790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbff56210d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff530db10"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff530dca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff530de30"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff530c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff530c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff5311540" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff5311540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff53118c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbff530ec60" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fbff530ec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbff56210d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbff530d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff530b2b0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff530b2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff530b630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff530b7c0"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff530b950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff530bae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff530bc70"/>
        <function-ref name="get" scoped="" ref="0x7fbff530be00"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff530a020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff530a660"/>
        <function-ref name="set" scoped="" ref="0x7fbff530a1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff530a340"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff530a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fbff5306970" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fbff5306970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbff56210d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fbff5306cf0"/>
        <function-ref name="offset" scoped="" ref="0x7fbff5306e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fbff530b030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fbff52ffc40" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fbff52ffc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff52fe020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff52fe1b0"/>
        <function-ref name="start" scoped="" ref="0x7fbff52fe340"/>
        <function-ref name="stop" scoped="" ref="0x7fbff52fe4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fbff52966e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7fbff52966e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff5296a60"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff5296bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fbff52e9780" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fbff52e9780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbff52e9b00"/>
        <function-ref name="stop" scoped="" ref="0x7fbff52e9c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fbff52ce4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7fbff52ce4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff52ce870"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff52cea00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff52ff5f0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff52ff5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff52ff970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fbff52e7360" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7fbff52e7360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fbff52e76e0"/>
        <function-ref name="flush" scoped="" ref="0x7fbff52e7870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fbff529ac70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7fbff529ac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff5299020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff52991b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fbff52ee7e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbff52ee7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fbff52eeb60"/>
        <function-ref name="resetSend" scoped="" ref="0x7fbff52eecf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fbff52eee80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fbff52f7030"/>
        <function-ref name="putData" scoped="" ref="0x7fbff52f71c0"/>
        <function-ref name="putDone" scoped="" ref="0x7fbff52f7350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fbff52f74e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff52f7760" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff52f7760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff52f7ae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff52f7c70"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff52f7e00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff52f2020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff52f21b0"/>
        <function-ref name="get" scoped="" ref="0x7fbff52f2340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff52f24d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff52f2b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff52f2660"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff52f27f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff52f2980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fbff5293a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fbff5293a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff5293d80"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff5292020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fbff52f8a40" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fbff52f8a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fbff52f8dc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7fbff52fd020"/>
        <function-ref name="startSend" scoped="" ref="0x7fbff52fd1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fbff52fd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fbff52f3530" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbff52f3530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fbff52f38b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fbff52f3a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7fbff52f3bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fbff51c8020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7fbff51c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff51c83a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff51c8530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fbff51cdde0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fbff51cdde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbff56210d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff51cc1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff51cc350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff51cc4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff51cc670"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff51cc800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fbff51c8800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7fbff51c8800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff51c8b80"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff51c8d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fbff51cd6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fbff51cd6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbff56210d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fbff51cda60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fbff51ccc20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7fbff51ccc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fbff56210d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fbff51cb020"/>
        <function-ref name="offset" scoped="" ref="0x7fbff51cb1b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fbff51cb340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff51ca920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff51ca920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff51caca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff51cae30"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff51c9020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff51c91b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff51c9340"/>
        <function-ref name="get" scoped="" ref="0x7fbff51c94d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff51c9660"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff51c9ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff51c9980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff51c97f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff51c9b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fbff51cbe80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fbff51cbe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fbff51ca220"/>
        <function-ref name="nextByte" scoped="" ref="0x7fbff51ca3b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fbff51ca540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fbff51ca6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fbff51cb590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fbff51cb590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fbff51cb910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fbff51cbaa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fbff51cbc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fbff51b6d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fbff51b6d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff51c00e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbff51c0270"/>
        <function-ref name="receive" scoped="" ref="0x7fbff51c0400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbff51c0590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbff51c0720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbff51c08b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff51c0a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fbff51c6e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fbff51c6e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fbff51c21c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fbff51c2350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fbff51c24e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fbff51c2670"/>
        <function-ref name="putData" scoped="" ref="0x7fbff51c2800"/>
        <function-ref name="putDone" scoped="" ref="0x7fbff51c2990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fbff51c2b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff51c0cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff51c0cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff51bf0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff51bf230"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff51bf3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff51bf550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff51bf6e0"/>
        <function-ref name="get" scoped="" ref="0x7fbff51bf870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff51bfa00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff51b51b0"/>
        <function-ref name="set" scoped="" ref="0x7fbff51bfb90"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff51bfd20"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff51b5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbff5198020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fbff5198020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff51983a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbff5198530"/>
        <function-ref name="receive" scoped="" ref="0x7fbff51986c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbff5198850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbff519a8d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fbff519a8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff519ac50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbff519ade0"/>
        <function-ref name="receive" scoped="" ref="0x7fbff5199020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbff51991b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbff5199340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbff51994d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff5199660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbff519a0c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fbff519a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbff519a440"/>
        <function-ref name="stop" scoped="" ref="0x7fbff519a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff4badc70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4badc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff4bac020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff4bac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbff4bab440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fbff4bab440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff4bab7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbff4bab950"/>
        <function-ref name="receive" scoped="" ref="0x7fbff4babae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbff4babc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fbff4baa020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff4baa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fbff4baa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbff4bac440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fbff4bac440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff4bac7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbff4bac950"/>
        <function-ref name="receive" scoped="" ref="0x7fbff4bacae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbff4bacc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbff4bace00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbff4bab020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff4bab1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff4bad020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff4bad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4bad3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4bad530"/>
        <function-ref name="request" scoped="" ref="0x7fbff4bad6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4bad850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4bad9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fbff512e8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff512e8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff512ec60"/>
        <function-ref name="configure" scoped="" ref="0x7fbff512edf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbff5130d00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fbff5130d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff512c0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbff512c230"/>
        <function-ref name="receive" scoped="" ref="0x7fbff512c3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbff512c550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fbff512a1d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff512a1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fbff512a550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbff5131670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fbff5131670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff51319f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbff5131b80"/>
        <function-ref name="receive" scoped="" ref="0x7fbff5131d10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbff5130020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbff51301b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbff5130340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff51304d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fbff512ce50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fbff512ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff512b210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff512b3a0"/>
        <function-ref name="request" scoped="" ref="0x7fbff512b530"/>
        <function-ref name="granted" scoped="" ref="0x7fbff512b6c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff512b850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff5137c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff5137c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff51330a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff5133230"/>
        <function-ref name="request" scoped="" ref="0x7fbff51333c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff5133550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff51336e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fbff5126710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fbff5126710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff5126a90"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff5126c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fbff509adc0" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff509adc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff5099180"/>
        <function-ref name="configure" scoped="" ref="0x7fbff5099310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fbff5098890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fbff5098890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff5098c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fbff5098dc0"/>
        <function-ref name="receive" scoped="" ref="0x7fbff5097020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fbff50971b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fbff50963e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff50963e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fbff5096780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7fbff5096a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fbff5096a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbff5096dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fbff5095020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fbff50951b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fbff5095340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fbff50954d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbff5095660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fbff50957f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fbff5095980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fbff5095b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fbff5095ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fbff5095e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fbff5094020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fbff50941b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fbff5094440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbff50945d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fbff5094760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fbff50948f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fbff5094a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbff5094c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fbff5094da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fbff5093020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbff50931b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fbff5093340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fbff50934d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff5093660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fbff50939f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fbff5093b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fbff5093d10"/>
        <function-ref name="tx" scoped="" ref="0x7fbff5092020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fbff50921b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fbff5092340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbff50924d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fbff5092660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fbff50927f0"/>
        <function-ref name="rx" scoped="" ref="0x7fbff5092980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fbff5092b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fbff5092ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fbff5092e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fbff5091020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fbff50911b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fbff50996d0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fbff50996d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff5099a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fbff5099c00"/>
        <function-ref name="receive" scoped="" ref="0x7fbff5099d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fbff5098020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fbff50981b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fbff5098340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff50984d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbff5090020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff5090020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff5090e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff508f800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff508f340"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff508fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fbff50975b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fbff50975b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff5097950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff5097ae0"/>
        <function-ref name="request" scoped="" ref="0x7fbff5097c70"/>
        <function-ref name="granted" scoped="" ref="0x7fbff5097e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff5096020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff509a020" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff509a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff509a3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff509a550"/>
        <function-ref name="request" scoped="" ref="0x7fbff509a6e0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff509a870"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff509aa00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fbff50915b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fbff50915b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff5091950"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff5091ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff508d120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff508d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff508d4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff508d630"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff508d7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff508d950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff508dae0"/>
        <function-ref name="get" scoped="" ref="0x7fbff508dc70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff508de00"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff508c4d0"/>
        <function-ref name="set" scoped="" ref="0x7fbff508c1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff508c020"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff508c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fbff507fbd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fbff507fbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff507e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fbff50806d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fbff50806d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff5080a50"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff5080be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fbff5087b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fbff5087b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbff5084020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fbff50841b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fbff5084340"/>
        <function-ref name="enableUart" scoped="" ref="0x7fbff50844d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fbff5084660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbff50847f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fbff5084980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fbff5084b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fbff5084ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fbff5084e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fbff5083020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fbff50831b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fbff5083340"/>
        <function-ref name="getUbr" scoped="" ref="0x7fbff50835d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbff5083760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fbff50838f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fbff5083a80"/>
        <function-ref name="isUart" scoped="" ref="0x7fbff5083c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbff5083da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fbff5082020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fbff50821b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbff5082340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fbff50824d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fbff5082660"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff50827f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fbff5082b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fbff5082d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7fbff5081020"/>
        <function-ref name="tx" scoped="" ref="0x7fbff50811b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fbff5081340"/>
        <function-ref name="disableUart" scoped="" ref="0x7fbff50814d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbff5081660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fbff50817f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fbff5081980"/>
        <function-ref name="rx" scoped="" ref="0x7fbff5081b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fbff5081ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fbff5081e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fbff5080020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fbff50801b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fbff5080340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fbff5038800" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fbff5038800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff5038b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff5038d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff5037020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff50371b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff5037340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff50374d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff5037660"/>
        <function-ref name="get" scoped="" ref="0x7fbff50377f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff5037980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff5037b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff5037ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff5037e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff5036020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff50362b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff5036440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fbff5076020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fbff5076020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff50763a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff5076530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7fbff5036800" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7fbff5036800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff5036b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff5036d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff5035020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff50351b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff5035340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff50354d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff5035660"/>
        <function-ref name="get" scoped="" ref="0x7fbff50357f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff5035980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff5035b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff5035ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff5035e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff5034020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff50342b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff5034440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7fbff5034800" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7fbff5034800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff5034b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff5034d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff5033020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff50331b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff5033340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff50334d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff5033660"/>
        <function-ref name="get" scoped="" ref="0x7fbff50337f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff5033980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff5033b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff5033ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff5033e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff5032020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff50322b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff5032440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7fbff507b360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fbff507b360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbff507b6e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fbff507b870"/>
        <function-ref name="setUctl" scoped="" ref="0x7fbff507ba00"/>
        <function-ref name="enableUart" scoped="" ref="0x7fbff507bb90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fbff507bd20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbff507a020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fbff507a1b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fbff507a340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fbff507a4d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fbff507a660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fbff507a7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fbff507a980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fbff507ab10"/>
        <function-ref name="getUbr" scoped="" ref="0x7fbff507ada0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbff5079020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fbff50791b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fbff5079340"/>
        <function-ref name="isUart" scoped="" ref="0x7fbff50794d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbff5079660"/>
        <function-ref name="isSpi" scoped="" ref="0x7fbff50797f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fbff5079980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbff5079b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fbff5079ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fbff5079e30"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff5078020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fbff50783b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fbff5078540"/>
        <function-ref name="setUbr" scoped="" ref="0x7fbff50786d0"/>
        <function-ref name="tx" scoped="" ref="0x7fbff5078860"/>
        <function-ref name="getUctl" scoped="" ref="0x7fbff50789f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fbff5078b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbff5078d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fbff5077020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fbff50771b0"/>
        <function-ref name="rx" scoped="" ref="0x7fbff5077340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fbff50774d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fbff5077660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fbff50777f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fbff5077980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fbff5077b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff5032700" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff5032700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff5032a80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff5032c10"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff5032da0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff5031020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff50311b0"/>
        <function-ref name="get" scoped="" ref="0x7fbff5031340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff50314d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff5031b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff5031660"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff50317f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff5031980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7fbff504cbc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fbff504cbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fbff5074020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fbff50741b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fbff5074340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fbff50744d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fbff5074660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fbff50747f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fbff5074980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fbff5074b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff5074ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fbff5074e30"/>
        <function-ref name="getData" scoped="" ref="0x7fbff5073020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fbff50731b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fbff5073340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fbff50735d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fbff5073760"/>
        <function-ref name="getIV" scoped="" ref="0x7fbff50738f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fbff5073a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fbff5073c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fbff5073da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fbff504b020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fbff504b1b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fbff504b340"/>
        <function-ref name="isI2C" scoped="" ref="0x7fbff504b4d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fbff504b660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fbff504b7f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fbff504bb80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fbff504bd10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fbff504a020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fbff504a1b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fbff504a340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fbff504a4d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fbff504a660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fbff504a7f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fbff504a980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fbff504ab10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fbff504aca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fbff504ae30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fbff5049020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fbff50491b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fbff5049340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fbff50494d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fbff5049660"/>
        <function-ref name="setData" scoped="" ref="0x7fbff50497f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fbff5049980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fbff5049b10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fbff5049ca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fbff5049e30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fbff5048020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fbff50481b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fbff5048740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fbff50488d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fbff5048a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fbff5048bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fbff5048d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fbff5047020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fbff50471b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fbff5047340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fbff50474d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fbff5047660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7fbff5045800" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7fbff5045800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff5045b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff5045d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff5039020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff50391b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff5039340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff50394d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff5039660"/>
        <function-ref name="get" scoped="" ref="0x7fbff50397f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff5039980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff5039b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff5039ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff5039e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff5038020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff50382b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff5038440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fbff5076970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff5076970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff5076cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fbff503b860" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fbff503b860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff503bbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff503bd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff5046020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff50461b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff5046340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff50464d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff5046660"/>
        <function-ref name="get" scoped="" ref="0x7fbff50467f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff5046980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff5046b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff5046ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff5046e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff5045020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff50452b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff5045440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fbff4fae810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fbff4fae810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4faeb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4faed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fad020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fad1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fad340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fad4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fad660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fad7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fad980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fadb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fadca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fade30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fac020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fac2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fac440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fbff4f99810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fbff4f99810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f99b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f99d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f98020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f98340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f984d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f98660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f987f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f98980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f98b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f98ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f98e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f97020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f972b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f97440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7fbff4f50ca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7fbff4f50ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f4f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f4f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f4f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f4f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f4f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f4f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f4fa00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f4fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f4fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f4e020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f4e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f4e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f4e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f4e760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f4e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7fbff4f2bcb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7fbff4f2bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f2a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f2a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f2a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f2a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f2a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f2a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f2aa00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f2ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f2ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f29020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f29340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f29760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7fbff4f4ecc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7fbff4f4ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f4d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f4d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f4d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f4d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f4d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f4d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f4da00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f4db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f4dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f4c020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f4c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f4c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f4c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f4c760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f4c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7fbff4f95810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7fbff4f95810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f95b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f95d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f94020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f941b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f94340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f944d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f94660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f947f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f94980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f94b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f94ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f94e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f93020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f932b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f93440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7fbff4f819a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7fbff4f819a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f81d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f80020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f801b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f80340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f804d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f80660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f807f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f80980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f80b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f80ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f80e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f7f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f7f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f7f440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f7f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7fbff4f6c9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7fbff4f6c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f6cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f6b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f6b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f6b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f6b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f6b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f6b7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f6b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f6bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f6bca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f6be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f6a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f6a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f6a440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f6a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7fbff4f5c9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fbff4f5c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f5cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f5b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f5b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f5b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f5b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f5b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f5b7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f5b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f5bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f5bca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f5be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f5a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f5a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f5a440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f5a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7fbff4f48cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7fbff4f48cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f470a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f47230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f473c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f47550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f476e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f47870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f47a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f47b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f47d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f46020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f461b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f46340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f464d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f46760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f468f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7fbff4f37cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7fbff4f37cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f360a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f36230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f363c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f36550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f366e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f36870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f36a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f36b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f36d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f35020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f351b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f35340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f354d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f35760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f358f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7fbff4f23cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7fbff4f23cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f220a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f22230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f223c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f22550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f226e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f22870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f22a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f22b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f22d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f21020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f211b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f21340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f214d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f21760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f218f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fbff4fa8810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fbff4fa8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fa8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fa8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fa7020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fa71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fa7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fa74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fa7660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fa77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fa7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fa7b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fa7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fa7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fa6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fa62b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fa6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7fbff4f46cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7fbff4f46cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f450a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f45230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f453c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f45550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f456e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f45870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f45a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f45b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f45d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f44020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f441b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f44340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f444d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f44760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f448f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fbff4fa4810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fbff4fa4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fa4b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fa4d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fa3020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fa31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fa3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fa34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fa3660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fa37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fa3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fa3b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fa3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fa3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fa2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fa22b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fa2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7fbff4f8f810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7fbff4f8f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f8fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f8fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f8e020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f8e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f8e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f8e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f8e660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f8e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f8e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f8eb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f8eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f8ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f8d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f8d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f8d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7fbff4f7b9a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7fbff4f7b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f7bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f7a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f7a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f7a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f7a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f7a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f7a7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f7a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f7ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f7aca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f7ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f79020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f791b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f79440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f795d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7fbff4f669a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7fbff4f669a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f66d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f65020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f651b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f65340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f654d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f65660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f657f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f65980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f65b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f65ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f65e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f64020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f641b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f64440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f645d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7fbff4f569a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fbff4f569a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f56d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f55020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f551b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f55340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f554d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f55660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f557f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f55980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f55b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f55ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f55e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f54020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f541b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f54440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f545d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fbff4fb2810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fbff4fb2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fb2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fb2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fb1020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fb11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fb1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fb14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fb1660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fb17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fb1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fb1b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fb1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fb1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fb0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fb02b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fb0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fbff4f9e810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fbff4f9e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f9ec90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f9ee20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f9c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f9c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f9c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f9c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f9c660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f9c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f9c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f9cb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f9cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f9ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f9b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f9b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f9b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7fbff4f89810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7fbff4f89810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f89b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f89d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f88020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f881b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f88340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f884d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f88660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f887f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f88980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f88b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f88ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f88e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f87020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f872b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f87440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7fbff4f52cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7fbff4f52cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f510a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f51230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f513c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f51550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f516e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f51870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f51a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f51b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f51d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f50020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f501b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f50340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f504d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f50760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f508f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7fbff4f31cb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7fbff4f31cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f300a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f30230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f303c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f30550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f306e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f30870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f30a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f30b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f30d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f2f020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f2f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f2f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f2f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f2f760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f2f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7fbff4f25cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7fbff4f25cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f240a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f24230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f243c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f24550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f246e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f24870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f24a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f24b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f24d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f23020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f231b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f23340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f234d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f23760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f238f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7fbff4f3dcc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7fbff4f3dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f3c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f3c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f3c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f3c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f3c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f3c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f3ca00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f3cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f3cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f3b020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f3b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f3b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f3b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f3b760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f3b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7fbff4f85810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7fbff4f85810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f85d90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f84020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f841b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f84340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f844d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f84660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f847f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f84980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f84b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f84ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f84e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f83020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f831b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f83440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f835d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7fbff4f719a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7fbff4f719a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f71d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f70020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f701b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f70340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f704d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f70660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f707f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f70980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f70b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f70ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f70e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f6f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f6f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f6f440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f6f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7fbff4f609a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fbff4f609a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f60d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f5f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f5f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f5f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f5f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f5f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f5f7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f5f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f5fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f5fca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f5fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f5e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f5e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f5e440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f5e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7fbff4f2fcb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7fbff4f2fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f2e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f2e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f2e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f2e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f2e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f2e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f2ea00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f2eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f2ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f2d020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f2d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f2d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f2d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f2d760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f2d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7fbff4f44cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7fbff4f44cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f430a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f43230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f433c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f43550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f436e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f43870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f43a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f43b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f43d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f42020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f421b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f42340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f424d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f42760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f428f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fbff4fac810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fbff4fac810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4facb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4facd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fab020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fab1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fab340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fab4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fab660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fab7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fab980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fabb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fabca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fabe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4faa020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4faa2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4faa440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fbff4f97810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fbff4f97810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f97b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f97d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f96020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f961b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f96340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f964d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f96660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f967f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f96980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f96b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f96ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f96e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f95020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f952b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f95440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7fbff4f649a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fbff4f649a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f64d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f63020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f631b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f63340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f634d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f63660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f637f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f63980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f63b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f63ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f63e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f62020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f621b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f62440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f625d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7fbff4f93810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7fbff4f93810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f93b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f93d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f92020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f92340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f924d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f92660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f927f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f92980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f92b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f92ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f92e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f91020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f912b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f91440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7fbff4f7f9a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7fbff4f7f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f7fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f7e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f7e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f7e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f7e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f7e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f7e7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f7e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f7eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f7eca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f7ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f7d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f7d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f7d440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f7d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7fbff4f6a9a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7fbff4f6a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f6ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f69020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f691b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f69340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f694d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f69660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f697f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f69980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f69b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f69ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f69e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f68020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f681b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f68440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f685d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7fbff4f5a9a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fbff4f5a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f5ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f59020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f591b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f59340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f594d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f59660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f597f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f59980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f59b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f59ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f59e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f58020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f581b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f58440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f585d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7fbff4f40cc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7fbff4f40cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f3e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f3e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f3e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f3e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f3e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f3e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f3ea00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f3eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f3ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f3d020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f3d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f3d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f3d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f3d760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f3d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fbff4fb8800" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fbff4fb8800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fb8b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fb8d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fb5020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fb51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fb5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fb54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fb5660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fb57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fb5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fb5b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fb5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fb5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fb4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fb42b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fb4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fbff4fa2810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fbff4fa2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fa2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fa2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fa1020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fa11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fa1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fa14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fa1660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fa17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fa1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fa1b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fa1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fa1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fa0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fa02b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fa0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7fbff4f8d810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7fbff4f8d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f8db90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f8dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f8c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f8c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f8c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f8c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f8c660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f8c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f8c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f8cb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f8cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f8ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f8b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f8b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f8b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7fbff4f799a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7fbff4f799a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f79d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f78020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f781b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f78340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f784d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f78660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f787f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f78980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f78b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f78ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f78e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f77020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f771b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f77440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f775d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7fbff4f3bcc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7fbff4f3bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f3a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f3a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f3a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f3a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f3a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f3a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f3aa00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f3ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f3ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f39020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f391b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f39340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f394d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f39760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f398f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7fbff4f35cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7fbff4f35cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f340a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f34230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f343c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f34550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f346e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f34870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f34a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f34b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f34d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f33020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f331b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f33340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f334d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f33760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f338f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7fbff4f29cb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7fbff4f29cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f280a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f28230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f283c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f28550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f286e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f28870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f28a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f28b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f28d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f27020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f271b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f27340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f274d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f27760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f278f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7fbff4f759a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7fbff4f759a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f75d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f74020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f741b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f74340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f744d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f74660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f747f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f74980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f74b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f74ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f74e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f73020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f731b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f73440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f735d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7fbff4f39cc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7fbff4f39cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f380a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f38230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f383c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f38550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f386e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f38870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f38a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f38b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f38d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f37020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f371b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f37340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f374d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f37760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f378f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fbff4fb0810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fbff4fb0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fb0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fb0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4faf020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4faf1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4faf340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4faf4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4faf660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4faf7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4faf980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fafb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fafca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fafe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fae020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fae2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fae440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fbff4f9b810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fbff4f9b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f9bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f9bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f9a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f9a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f9a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f9a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f9a660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f9a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f9a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f9ab10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f9aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f9ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f99020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f992b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f99440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7fbff4f87810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7fbff4f87810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f87b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f87d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f86020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f861b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f86340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f864d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f86660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f867f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f86980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f86b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f86ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f86e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f85020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f852b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f85440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7fbff4f42cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7fbff4f42cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f410a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f41230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f413c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f41550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f416e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f41870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f41a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f41b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f41d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f40020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f401b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f40340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f404d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f40760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f408f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7fbff4f2dcb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7fbff4f2dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f2c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f2c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f2c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f2c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f2c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f2c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f2ca00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f2cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f2cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f2b020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f2b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f2b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f2b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f2b760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f2b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7fbff4f839a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7fbff4f839a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f83d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f82020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f821b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f82340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f824d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f82660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f827f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f82980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f82b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f82ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f82e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f81020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f811b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f81440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f815d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7fbff4f6f9a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7fbff4f6f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f6fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f6d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f6d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f6d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f6d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f6d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f6d7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f6d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f6db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f6dca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f6de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f6c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f6c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f6c440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f6c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7fbff4f5e9a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fbff4f5e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f5ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f5d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f5d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f5d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f5d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f5d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f5d7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f5d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f5db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f5dca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f5de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f5c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f5c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f5c440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f5c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fbff4faa810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fbff4faa810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4faab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4faad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fa9020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fa91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fa9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fa94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fa9660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fa97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fa9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fa9b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fa9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fa9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fa8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fa82b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fa8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7fbff4f629a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fbff4f629a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f62d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f61020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f611b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f61340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f614d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f61660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f617f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f61980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f61b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f61ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f61e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f60020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f601b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f60440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f605d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fbff4fa6810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fbff4fa6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fa6b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fa6d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fa5020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fa51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fa5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fa54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fa5660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fa57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fa5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fa5b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fa5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fa5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fa4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fa42b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fa4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7fbff4f91810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7fbff4f91810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f91b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f91d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f90020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f901b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f90340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f904d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f90660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f907f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f90980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f90b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f90ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f90e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f8f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f8f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f8f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7fbff4f7d9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7fbff4f7d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f7dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f7c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f7c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f7c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f7c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f7c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f7c7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f7c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f7cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f7cca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f7ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f7b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f7b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f7b440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f7b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7fbff4f689a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7fbff4f689a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f68d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f67020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f671b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f67340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f674d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f67660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f677f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f67980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f67b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f67ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f67e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f66020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f661b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f66440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f665d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7fbff4f589a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fbff4f589a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f58d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f57020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f571b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f57340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f574d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f57660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f577f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f57980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f57b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f57ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f57e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f56020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f561b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f56440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f565d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fbff4fb4810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fbff4fb4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fb4b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fb4d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4fb3020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4fb31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4fb3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4fb34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4fb3660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4fb37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4fb3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4fb3b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4fb3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4fb3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4fb2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4fb22b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4fb2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fbff4fa0810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fbff4fa0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4fa0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4fa0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f9f020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f9f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f9f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f9f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f9f660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f9f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f9f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f9fb10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f9fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f9fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f9e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f9e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f9e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7fbff4f8b810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7fbff4f8b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f8bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f8bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f8a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f8a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f8a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f8a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f8a660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f8a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f8a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f8ab10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f8aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f8ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f89020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f892b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f89440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7fbff4f779a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7fbff4f779a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f77d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f76020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f761b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f76340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f764d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f76660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f767f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f76980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f76b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f76ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f76e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f75020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f751b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f75440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f755d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7fbff4f4aca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7fbff4f4aca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f490a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f49230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f493c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f49550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f496e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f49870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f49a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f49b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f49d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f48020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f481b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f48340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f484d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f48760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f488f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7fbff4f33cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7fbff4f33cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f320a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f32230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f323c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f32550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f326e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f32870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f32a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f32b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f32d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f31020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f311b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f31340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f314d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f31760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f318f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7fbff4f4ccc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7fbff4f4ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f4b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f4b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f4b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f4b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f4b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f4b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f4ba00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f4bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f4bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f4a020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f4a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f4a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f4a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f4a760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f4a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7fbff4f739a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7fbff4f739a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f73d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f72020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f721b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f72340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f724d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f72660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f727f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f72980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f72b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f72ca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f72e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f71020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f711b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f71440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f715d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7fbff4f27cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7fbff4f27cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f260a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f26230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f263c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f26550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f266e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f26870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f26a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f26b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f26d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f25020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f251b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f25340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f254d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f25760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f258f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7fbff4f21cc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7fbff4f21cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f200a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f20230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f203c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f20550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f206e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f20870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f20a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f20b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f20d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f1f020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f1f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f1f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f1f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f1f760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f1f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7fbff4f549f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7fbff4f549f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4f531c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4f53350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4f534e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4f53670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4f53800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4f53990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4f53b20"/>
        <function-ref name="get" scoped="" ref="0x7fbff4f53cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4f53e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4f52020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4f521b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4f52340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4f524d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4f52760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4f528f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4f1cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4f1cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ef50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ef5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ef5400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ef5590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ef5720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ef58b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ef5a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ef5bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ef5d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ef4020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ef41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ef4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ef44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ef4760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ef48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ef1740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ef1740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ef1ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ef1c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ef1de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4eef020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4eef1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4eef340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4eef4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4eef660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4eef7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4eef980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4eefb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4eefca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4eefe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4eee120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4eee2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4eeb100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4eeb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4eeb480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4eeb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4eeb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4eeb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4eebac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4eebc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4eebde0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4eea020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4eea1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4eea340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4eea4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4eea660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4eea7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4eeaa80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4eeac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ee7d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ee7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ee60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ee6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ee6400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ee6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ee6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ee68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ee6a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ee6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ee6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ee5020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ee51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ee5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ee54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ee5760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ee58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ee2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ee2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ee2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ee2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ee2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ee1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ee11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ee1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ee14d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ee1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ee17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ee1980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ee1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ee1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ee1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ee0120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ee02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4edd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4edd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4edd480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4edd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4edd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4edd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4eddac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4eddc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4eddde0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4edc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4edc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4edc340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4edc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4edc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4edc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4edca80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4edcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ed9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ed9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ed80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ed8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ed8400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ed8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ed8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ed88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ed8a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ed8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ed8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ed7020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ed71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ed7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ed74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ed7760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ed78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ed4740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ed4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ed4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ed4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ed4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ed3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ed31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ed3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ed34d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ed3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ed37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ed3980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ed3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ed3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ed3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ed2120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ed22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ecf100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ecf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ecf480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ecf610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ecf7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ecf930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ecfac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ecfc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ecfde0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ece020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ece1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ece340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ece4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ece660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ece7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ecea80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ecec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ecbd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ecbd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ec90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ec9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ec9400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ec9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ec9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ec98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ec9a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ec9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ec9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ec8020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ec81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ec8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ec84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ec8760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ec88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ec5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ec5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ec5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ec5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ec5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ec4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ec41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ec4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ec44d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ec4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ec47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ec4980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ec4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ec4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ec4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ec3120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ec32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ec0100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ec0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ec0480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ec0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ec07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ec0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ec0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ec0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ec0de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ebf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ebf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ebf340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ebf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ebf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ebf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ebfa80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ebfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ebcd80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ebcd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ebb180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ebb310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ebb4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ebb630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ebb7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ebb950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ebbae0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ebbc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ebbe00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4eba020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4eba1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4eba340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4eba4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4eba760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4eba8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4eb7740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4eb7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4eb7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4eb7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4eb7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4eb6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4eb61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4eb6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4eb64d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4eb6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4eb67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4eb6980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4eb6b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4eb6ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4eb6e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4eb5120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4eb52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4eb2100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4eb2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4eb2480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4eb2610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4eb27a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4eb2930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4eb2ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4eb2c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4eb2de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4eb1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4eb11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4eb1340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4eb14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4eb1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4eb17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4eb1a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4eb1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4eaed10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4eaed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ead0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ead270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ead400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ead590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ead720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ead8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4eada40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4eadbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4eadd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4eac020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4eac1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4eac340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4eac4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4eac760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4eac8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ea9740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ea9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ea9ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ea9c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ea9de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ea8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ea81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ea8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ea84d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ea8660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ea87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ea8980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ea8b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ea8ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ea8e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ea7120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ea72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4ea3100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4ea3100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4ea3480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4ea3610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4ea37a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4ea3930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4ea3ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4ea3c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4ea3de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4ea2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4ea21b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4ea2340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4ea24d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4ea2660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4ea27f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4ea2a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4ea2c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e9fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e9fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e9e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e9e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e9e400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e9e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e9e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e9e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e9ea40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e9ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e9ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e9d020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e9d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e9d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e9d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e9d760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e9d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e9a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e9a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e9aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e9ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e9ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e99020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e991b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e99340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e994d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e99660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e997f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e99980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e99b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e99ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e99e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e98120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e982b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e95100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e95100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e95480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e95610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e957a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e95930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e95ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e95c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e95de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e94020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e941b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e94340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e944d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e94660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e947f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e94a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e94c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e91d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e91d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e900e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e90270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e90400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e90590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e90720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e908b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e90a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e90bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e90d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e8f020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e8f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e8f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e8f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e8f760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e8f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e8c740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e8c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e8cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e8cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e8cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e8b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e8b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e8b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e8b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e8b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e8b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e8b980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e8bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e8bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e8be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e8a120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e8a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e87100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e87100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e87480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e87610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e877a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e87930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e87ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e87c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e87de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e86020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e861b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e86340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e864d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e86660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e867f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e86a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e86c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e83e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e83e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e81210"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e813a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e81530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e816c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e81850"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e819e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e81b70"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e81d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e80020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e801b0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e80340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e804d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e80660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e808f0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e80a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e7d9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e7d9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e7dd70"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e7c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e7c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e7c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e7c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e7c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e7c7f0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e7c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e7cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e7cca0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e7ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e7b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e7b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e7b440"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e7b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e78460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e78460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e787e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e78970"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e78b00"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e78c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e78e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e77020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e771b0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e77340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e774d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e77660"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e777f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e77980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e77b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e77da0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e76020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e74e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e74e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e731c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e73350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e734e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e73670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e73800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e73990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e73b20"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e73cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e73e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e72020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e721b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e72340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e724d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e72760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e728f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e6f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e6f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e6fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e6fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e6fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e6e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e6e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e6e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e6e4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e6e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e6e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e6e980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e6eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e6eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e6ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e6d120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e6d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e6a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e6a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e6a480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e6a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e6a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e6a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e6aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e6ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e6ade0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e69020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e691b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e69340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e694d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e69660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e697f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e69a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e69c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e66d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e66d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e650e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e65270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e65400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e65590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e65720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e658b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e65a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e65bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e65d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e64020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e641b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e64340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e644d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e64760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e648f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e61740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e61740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e61ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e61c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e61de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e60020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e601b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e60340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e604d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e60660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e607f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e60980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e60b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e60ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e60e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e5f120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e5f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e5c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e5c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e5c480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e5c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e5c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e5c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e5cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e5cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e5cde0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e5a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e5a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e5a340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e5a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e5a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e5a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e5aa80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e5ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e57d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e57d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e560e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e56270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e56400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e56590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e56720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e568b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e56a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e56bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e56d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e55020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e551b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e55340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e554d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e55760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e558f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e52740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e52740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e52ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e52c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e52de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e51020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e511b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e51340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e514d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e51660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e517f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e51980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e51b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e51ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e51e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e50120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e502b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e4d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e4d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e4d480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e4d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e4d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e4d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e4dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e4dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e4dde0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e4c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e4c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e4c340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e4c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e4c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e4c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e4ca80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e4cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e49d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e49d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e480e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e48270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e48400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e48590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e48720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e488b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e48a40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e48bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e48d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e47020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e471b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e47340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e474d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e47760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e478f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e44740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e44740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e44ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e44c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e44de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e43020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e431b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e43340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e434d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e43660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e437f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e43980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e43b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e43ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e43e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e42120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e422b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e3f100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e3f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e3f480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e3f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e3f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e3f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e3fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e3fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e3fde0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e3e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e3e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e3e340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e3e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e3e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e3e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e3ea80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e3ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e3bd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e3bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e3a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e3a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e3a400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e3a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e3a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e3a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e3aa40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e3abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e3ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e39020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e391b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e39340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e394d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e39760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e398f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e35740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e35740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e35ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e35c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e35de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e34020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e341b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e34340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e344d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e34660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e347f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e34980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e34b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e34ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e34e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e33120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e332b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e30100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e30100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e30480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e30610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e307a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e30930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e30ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e30c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e30de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e2f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e2f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e2f340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e2f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e2f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e2f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e2fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e2fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e2cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e2cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e2b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e2b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e2b400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e2b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e2b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e2b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e2ba40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e2bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e2bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e2a020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e2a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e2a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e2a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e2a760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e2a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e27740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e27740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e27ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e27c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e27de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e26020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e261b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e26340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e264d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e26660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e267f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e26980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e26b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e26ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e26e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e25120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e252b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e22100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e22100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e22480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e22610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e227a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e22930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e22ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e22c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e22de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e21020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e211b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e21340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e214d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e21660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e217f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e21a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e21c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e1ed10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e1ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e1d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e1d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e1d400"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e1d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e1d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e1d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e1da40"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e1dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e1dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e1c020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e1c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e1c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e1c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e1c760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e1c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e19740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e19740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e19ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e19c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e19de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e18020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e181b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e18340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e184d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e18660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e187f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e18980"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e18b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e18ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e18e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e17120"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e172b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fbff4e14100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fbff4e14100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4e14480"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4e14610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4e147a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4e14930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4e14ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4e14c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4e14de0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4e12020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4e121b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4e12340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4e124d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4e12660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4e127f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4e12a80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4e12c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbff4da5d20" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff4da5d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff4da2b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4da1550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4da1090"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4da1a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7fbff4da0d90" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fbff4da0d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff4d9dbc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4d9b590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4d9b0d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4d9ba50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fbff4d87020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff4d87020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff4d873a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff4d87530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff4d876c0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d87850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff4d879e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4d87b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff4d87d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4d86020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4d861b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff4d86340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff4d864d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbff4d99e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff4d99e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff4d98ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4d88670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4d881b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4d88b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fbff4d83020" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff4d83020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff4d833a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff4d83530"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff4d836c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff4d83850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff4d839e0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d83b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff4d83d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff4d824d0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d82020"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff4d821b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff4d82340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fbff4d7c060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fbff4d7c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d7c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d7c570"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d7c700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d7c890"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d7ca20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d7cbb0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d7cd40"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d7b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff4d7f470" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff4d7f470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff4d7f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fbff4d7b340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fbff4d7b340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d7b6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d7b850"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d7b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d7bb70"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d7bd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d76020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d761b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d76340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fbff4d7fa70" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff4d7fa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff4d7fdf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff4d7e020"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff4d7e1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff4d7e340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff4d7e4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d7e660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff4d7e7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff4d7ee30"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d7e980"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff4d7eb10"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff4d7eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fbff4d76660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fbff4d76660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d769e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d76b70"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d76d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d75020"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d751b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d75340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d754d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d75660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fbff4d80b10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fbff4d80b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d59020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d591b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d59340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d594d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d59660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d597f0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d59980"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d59b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fbff4d59e70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fbff4d59e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d58220"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d583b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d58540"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d586d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d58860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d589f0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d58b80"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d58d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fbff4d562e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff4d562e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff4d56660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fbff4d570f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fbff4d570f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d57470"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d57600"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d57790"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d57920"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d57ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d57c40"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d57dd0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d56020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fbff4d422f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fbff4d422f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d42670"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d42800"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4d42990"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d42b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d42cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4d42e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d41020"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d411b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4d41340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4d414d0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d41660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4d417f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4d41980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4d41c10"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d41da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fbff4d53020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fbff4d53020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d533a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d53530"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d536c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d53850"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d539e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d53b70"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d53d00"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d42020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fbff4d3ede0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fbff4d3ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d3d180"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d3d310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4d3d4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d3d630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d3d7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4d3d950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d3dae0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d3dc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4d3de00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4d3c020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d3c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4d3c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4d3c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4d3c760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d3c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fbff4d3fb90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fbff4d3fb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d3e020"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d3e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d3e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d3e4d0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d3e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d3e7f0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d3e980"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d3eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fbff4d38930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fbff4d38930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d38cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d38e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4d37020"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d371b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d37340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4d374d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d37660"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d377f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4d37980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4d37b10"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d37ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4d37e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4d36020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4d362b0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d36440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fbff4d3a710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fbff4d3a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4d3aa90"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4d3ac20"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4d3adb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4d38020"/>
        <function-ref name="get" scoped="" ref="0x7fbff4d381b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4d38340"/>
        <function-ref name="set" scoped="" ref="0x7fbff4d384d0"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4d38660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff42d8a90" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff42d8a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff42d8e10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff42d7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fbff42d1be0" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fbff42d1be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff42d0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbff42c9020" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff42c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff42c93a0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff42c9530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fbff42d02b0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fbff42d02b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fbff42d0630"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fbff42d07c0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fbff42d0950"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fbff42d0ae0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fbff42d0c70"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fbff42d0e00"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fbff42cf020"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fbff42cf1b0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff42cf340"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fbff42cf4d0"/>
        <function-ref name="getData" scoped="" ref="0x7fbff42cf660"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fbff42cf7f0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fbff42cf980"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fbff42cfc10"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fbff42cfda0"/>
        <function-ref name="getIV" scoped="" ref="0x7fbff42ce020"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fbff42ce1b0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fbff42ce340"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fbff42ce4d0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fbff42ce660"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fbff42ce7f0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fbff42ce980"/>
        <function-ref name="isI2C" scoped="" ref="0x7fbff42ceb10"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fbff42ceca0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fbff42cee30"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fbff42cd220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fbff42cd3b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fbff42cd540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fbff42cd6d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fbff42cd860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fbff42cd9f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fbff42cdb80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fbff42cdd10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fbff42cc020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fbff42cc1b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fbff42cc340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fbff42cc4d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fbff42cc660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fbff42cc7f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fbff42cc980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fbff42ccb10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fbff42ccca0"/>
        <function-ref name="setData" scoped="" ref="0x7fbff42cce30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fbff42cb020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fbff42cb1b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fbff42cb340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fbff42cb4d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fbff42cb660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fbff42cb7f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fbff42cbd80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fbff42ca020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fbff42ca1b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fbff42ca340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fbff42ca4d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fbff42ca660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fbff42ca7f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fbff42ca980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fbff42cab10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fbff42caca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fbff42d1440" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fbff42d1440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff42d17c0"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff42d1950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff42d9e00" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff42d9e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff42d81c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff42d8350"/>
        <function-ref name="request" scoped="" ref="0x7fbff42d84e0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff42d8670"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff42d8800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fbff42d7a50" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fbff42d7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbff42d7dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fbff42d5020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fbff42d51b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fbff42d5340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fbff42d54d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbff42d5660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fbff42d57f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fbff42d5980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fbff42d5b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fbff42d5ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fbff42d5e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fbff42d4020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fbff42d41b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fbff42d4440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbff42d45d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fbff42d4760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fbff42d48f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fbff42d4a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbff42d4c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fbff42d4da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fbff42d3020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbff42d31b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fbff42d3340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fbff42d34d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff42d3660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fbff42d39f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fbff42d3b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fbff42d3d10"/>
        <function-ref name="tx" scoped="" ref="0x7fbff42d2020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fbff42d21b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fbff42d2340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbff42d24d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fbff42d2660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fbff42d27f0"/>
        <function-ref name="rx" scoped="" ref="0x7fbff42d2980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fbff42d2b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fbff42d2ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fbff42d2e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fbff42d1020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fbff42d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbff42d72b0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff42d72b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff42d7630"/>
        <function-ref name="userId" scoped="" ref="0x7fbff42d77c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff4d092c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4d092c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff4d09640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff4d097d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbff4d088a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff4d088a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff4d08c20"/>
        <function-ref name="configure" scoped="" ref="0x7fbff4d08db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fbff4d0d4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fbff4d0d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff4d0d850"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff4d0d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff4d0a020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff4d0a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4d0a3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4d0a530"/>
        <function-ref name="request" scoped="" ref="0x7fbff4d0a6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4d0a850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4d0a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fbff4d0c3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff4d0c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff4d0c770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbff4d09ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4d09ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff4d09e50"/>
        <function-ref name="userId" scoped="" ref="0x7fbff4d08020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fbff4cf3bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4cf3bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff4cf2020"/>
        <function-ref name="userId" scoped="" ref="0x7fbff4cf21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fbff4d06d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fbff4d06d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff4d05180"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff4d05310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7fbff4cf35e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fbff4cf35e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff4cf3960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fbff4d05710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fbff4d05710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fbff4d05ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7fbff4d05d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7fbff4d05d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fbff4cf3180"/>
        <function-ref name="txDone" scoped="" ref="0x7fbff4cf3310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff4c79020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff4c79020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff4c793c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff4c79550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbff4c78cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff4c78cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff4c770a0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff4c77230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fbff4c797a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fbff4c797a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4c79b20"/>
        <function-ref name="requested" scoped="" ref="0x7fbff4c79cb0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4c79e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4c78020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff4c781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff4c7a210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff4c7a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4c7a5b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4c7a740"/>
        <function-ref name="request" scoped="" ref="0x7fbff4c7a8d0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4c7aa60"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4c7abf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbff4c78400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff4c78400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff4c78780"/>
        <function-ref name="userId" scoped="" ref="0x7fbff4c78910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff3f01c00" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff3f01c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff3f00020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fbff3f002b0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7fbff3f002b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbff3f00630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbff3f007c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbff3f00950"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbff3f00ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff3efc3a0" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff3efc3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff3efc740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff3efc8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbff3efa210" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff3efa210"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff3efa5b0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff3efa740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fbff3efa9d0" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fbff3efa9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbff3efad50"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbff3ef9020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbff3ef91b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbff3ef9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fbff3efcb20" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fbff3efcb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3efb020"/>
        <function-ref name="requested" scoped="" ref="0x7fbff3efb1b0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3efb340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3efb4d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff3efb660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff3ef9590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff3ef9590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff3ef9910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff3ef9aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff3ef9c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff3ef9dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff3ef8020"/>
        <function-ref name="get" scoped="" ref="0x7fbff3ef81b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff3ef8340"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff3ef8980"/>
        <function-ref name="set" scoped="" ref="0x7fbff3ef8660"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff3ef84d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff3ef87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3efd4d0" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3efd4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3efd870"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3efda00"/>
        <function-ref name="request" scoped="" ref="0x7fbff3efdb90"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3efdd20"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3efc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbff3efb8b0" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff3efb8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff3efbc30"/>
        <function-ref name="userId" scoped="" ref="0x7fbff3efbdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fbff3ef8c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fbff3ef8c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff3ef7020"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff3ef71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fbff4c70d70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fbff4c70d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fbff4c6d180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fbff4c6d310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fbff4c6d4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fbff4c6d630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fbff4c6d7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fbff4c6d950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fbff4c6dae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fbff4c6dc70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff4c6de00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fbff4c6c020"/>
        <function-ref name="getData" scoped="" ref="0x7fbff4c6c1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fbff4c6c340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fbff4c6c4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fbff4c6c760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fbff4c6c8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7fbff4c6ca80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fbff4c6cc10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fbff4c6cda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fbff4c6b020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fbff4c6b1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fbff4c6b340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fbff4c6b4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fbff4c6b660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fbff4c6b7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fbff4c6b980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fbff4c6bd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fbff4c6a020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fbff4c6a1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fbff4c6a340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fbff4c6a4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fbff4c6a660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fbff4c6a7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fbff4c6a980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fbff4c6ab10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fbff4c6aca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fbff4c6ae30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fbff4c69020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fbff4c691b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fbff4c69340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fbff4c694d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fbff4c69660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fbff4c697f0"/>
        <function-ref name="setData" scoped="" ref="0x7fbff4c69980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fbff4c69b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fbff4c69ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fbff4c69e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fbff4c68020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fbff4c681b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fbff4c68340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fbff4c688d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fbff4c68a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fbff4c68bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fbff4c68d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fbff4c67020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fbff4c671b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fbff4c67340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fbff4c674d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fbff4c67660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fbff4c677f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7fbff4c5d700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7fbff4c5d700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fbff4c5da80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fbff4c5dc10"/>
        <function-ref name="setUctl" scoped="" ref="0x7fbff4c5dda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fbff4c5c020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fbff4c5c1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fbff4c5c340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fbff4c5c4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fbff4c5c660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fbff4c5c7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fbff4c5c980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fbff4c5cb10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fbff4c5cca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fbff4c5ce30"/>
        <function-ref name="getUbr" scoped="" ref="0x7fbff4c5b120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fbff4c5b2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fbff4c5b440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fbff4c5b5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7fbff4c5b760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fbff4c5b8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fbff4c5ba80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fbff4c5bc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fbff4c5bda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fbff4c5a020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fbff4c5a1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff4c5a340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fbff4c5a6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fbff4c5a860"/>
        <function-ref name="setUbr" scoped="" ref="0x7fbff4c5a9f0"/>
        <function-ref name="tx" scoped="" ref="0x7fbff4c5ab80"/>
        <function-ref name="getUctl" scoped="" ref="0x7fbff4c5ad10"/>
        <function-ref name="disableUart" scoped="" ref="0x7fbff4c59020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fbff4c591b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fbff4c59340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fbff4c594d0"/>
        <function-ref name="rx" scoped="" ref="0x7fbff4c59660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fbff4c597f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fbff4c59980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fbff4c59b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fbff4c59ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fbff4c59e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fbff4c561f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fbff4c561f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4c56570"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4c56700"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4c56890"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4c56a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4c56bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4c56d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4c55020"/>
        <function-ref name="get" scoped="" ref="0x7fbff4c551b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4c55340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4c554d0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4c55660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4c557f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4c55980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4c55c10"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4c55da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7fbff4c66940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fbff4c66940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fbff4c66cc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fbff4c66e50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fbff4c63020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fbff4c631b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fbff4c63340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fbff4c634d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fbff4c63660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fbff4c637f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff4c63980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fbff4c63b10"/>
        <function-ref name="getData" scoped="" ref="0x7fbff4c63ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fbff4c63e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fbff4c62020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fbff4c622b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fbff4c62440"/>
        <function-ref name="getIV" scoped="" ref="0x7fbff4c625d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fbff4c62760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fbff4c628f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fbff4c62a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fbff4c62c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fbff4c62da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fbff4c61020"/>
        <function-ref name="isI2C" scoped="" ref="0x7fbff4c611b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fbff4c61340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fbff4c614d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fbff4c61860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fbff4c619f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fbff4c61b80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fbff4c61d10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fbff4c60020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fbff4c601b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fbff4c60340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fbff4c604d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fbff4c60660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fbff4c607f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fbff4c60980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fbff4c60b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fbff4c60ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fbff4c60e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fbff4c5f020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fbff4c5f1b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fbff4c5f340"/>
        <function-ref name="setData" scoped="" ref="0x7fbff4c5f4d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fbff4c5f660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fbff4c5f7f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fbff4c5f980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fbff4c5fb10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fbff4c5fca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fbff4c5fe30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fbff4c5e420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fbff4c5e5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fbff4c5e740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fbff4c5e8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fbff4c5ea60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fbff4c5ebf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fbff4c5ed80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fbff4c5d020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fbff4c5d1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fbff4c5d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fbff4c58250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fbff4c58250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4c585d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4c58760"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4c588f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4c58a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4c58c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4c58da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4c57020"/>
        <function-ref name="get" scoped="" ref="0x7fbff4c571b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4c57340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4c574d0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4c57660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4c577f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4c57980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4c57c10"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4c57da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7fbff4ba6920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fbff4ba6920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fbff4ba6ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fbff4ba5020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff4ba5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4ba53a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4ba5530"/>
        <function-ref name="request" scoped="" ref="0x7fbff4ba56c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4ba5850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4ba59e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fbff4ba60c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fbff4ba60c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbff4ba6440"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4ba65d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fbff4b91a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7fbff4b91a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fbff4b91db0"/>
        <function-ref name="offset" scoped="" ref="0x7fbff4b8e020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fbff4b8e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fbff4b73bf0" loc="43:../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fbff4b73bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbff4b4eae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbff4b4d880"/>
        <function-ref name="element" scoped="" ref="0x7fbff4b4b020"/>
        <function-ref name="full" scoped="" ref="0x7fbff4b4fce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbff4b4e660"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbff4b4d1d0"/>
        <function-ref name="empty" scoped="" ref="0x7fbff4b4f860"/>
        <function-ref name="size" scoped="" ref="0x7fbff4b4e1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fbff4b43a20" loc="93:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fbff4b43a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fbff4b44920"/>
        <function-ref name="enqueue" scoped="" ref="0x7fbff4b416d0"/>
        <function-ref name="element" scoped="" ref="0x7fbff4b41d40"/>
        <function-ref name="full" scoped="" ref="0x7fbff4b45af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fbff4b444a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbff4b41020"/>
        <function-ref name="empty" scoped="" ref="0x7fbff4b45670"/>
        <function-ref name="size" scoped="" ref="0x7fbff4b44020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fbff4b40440" loc="94:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fbff4b40440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fbff4b407c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff4b40950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff4b40ae0"/>
        <function-ref name="cancel" scoped="" ref="0x7fbff4b40c70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fbff4b40e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fbff4b3f0c0" loc="95:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fbff4b3f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff4b3f440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fbff4b3f5d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fbff4b3f760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fbff4b3f8f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fbff4b3fa80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7fbff4b39500" loc="114:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7fbff4b39500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff4b39880"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff4b39a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff4b4aa60" loc="89:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff4b4aa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff4b4ade0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff4b3fd00" loc="96:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff4b3fd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff4b3e0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff4b3e230"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff4b3e3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff4b3e550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff4b3e6e0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4b3e870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff4b3ea00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff4b3d1b0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4b3eb90"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff4b3ed20"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff4b3d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7fbff4b431a0" loc="90:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fbff4b431a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fbff4b43520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fbff4b22be0" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fbff4b22be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fbff4b1f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff4b1c020" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff4b1c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff4b1c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fbff4b1c680" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fbff4b1c680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fbff4b1ca00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbff4b21c80" loc="48:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fbff4b21c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbff4b160a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x7fbff4b029b0" loc="51:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fbff4b029b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff4b055c0"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4b05a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fbff4b070f0" loc="50:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fbff4b070f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fbff4b07470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fbff4b07600"/>
        <function-ref name="led1On" scoped="" ref="0x7fbff4b07790"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fbff4b07920"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fbff4b07ab0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4b07c40"/>
        <function-ref name="led1Off" scoped="" ref="0x7fbff4b07dd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fbff4b064d0"/>
        <function-ref name="set" scoped="" ref="0x7fbff4b06020"/>
        <function-ref name="led0On" scoped="" ref="0x7fbff4b061b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fbff4b06340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fbff4b0cda0" loc="49:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff4b0cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4b09390"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4b14970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff4b0a720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff4b0a2a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4b09c90"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff4b09810"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4b14df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff4b159d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4b0ad30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff4b14020"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4b144f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fbff4ae5a70" loc="39:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fbff4ae5a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fbff4ae5df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fbff4ae2210" loc="40:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fbff4ae2210"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff4ae2590"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff4ae2720"/>
        <function-ref name="start" scoped="" ref="0x7fbff4ae28b0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4ae2a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fbff4ae3e00" loc="51:../../../tos/platforms/shimmer/DemoSensorC.nc">
      <component-ref qname="TestPrintfAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fbff4ae3e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff4526a80"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4525020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fbff3eb5c00" loc="44:../../../tos/platforms/shimmer/VoltageC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fbff3eb5c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff3eb4860"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3eb4ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fbff3eb2bd0" loc="44:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fbff3eb2bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff3eb1860"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3eb1ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7fbff3eace30" loc="48:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7fbff3eace30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff3eabac0"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3eaa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7fbff3eaf420" loc="45:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7fbff3eaf420"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7fbff3ead020"/>
        <function-ref name="postBuffer" scoped="" ref="0x7fbff3eae090"/>
        <function-ref name="read" scoped="" ref="0x7fbff3eaea00"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3eadad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3eac0c0" loc="47:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3eac0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3eac440"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3eac5d0"/>
        <function-ref name="request" scoped="" ref="0x7fbff3eac760"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3eac8f0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3eaca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fbff3ea6690" loc="48:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fbff3ea6690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff3ea5390"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3ea5810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff3ea4020" loc="49:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3ea4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3ea4c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResourceReadNow" ref="0x7fbff4a966e0" loc="46:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubResourceReadNow" scoped="" ref="0x7fbff4a966e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4a96a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4a96bf0"/>
        <function-ref name="request" scoped="" ref="0x7fbff4a96d80"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4a94020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4a941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7fbff4a9d390" loc="38:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7fbff4a9d390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff4a9c020"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4a9c4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7fbff4a9b210" loc="39:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7fbff4a9b210"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff4a9be40"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4a99340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceReadNow" ref="0x7fbff4a98020" loc="40:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceReadNow" scoped="" ref="0x7fbff4a98020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4a983a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4a98530"/>
        <function-ref name="request" scoped="" ref="0x7fbff4a986c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4a98850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4a989e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbff4a94d40" loc="48:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7fbff4a94d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff4a939c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7fbff4a91450" loc="49:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a91450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff4a917d0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff4a91960"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff4a91af0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff4a91c80"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff4a91e10"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff4a90020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff4a901b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceRead" ref="0x7fbff4a97390" loc="44:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRead" scoped="" ref="0x7fbff4a97390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4a97710"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4a978a0"/>
        <function-ref name="request" scoped="" ref="0x7fbff4a97a30"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4a97bc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4a97d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x7fbff4a66e40" loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x7fbff4a66e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff4a641e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff4a64370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7fbff3e90020" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fbff3e90020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff3e903a0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff3e90530"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbff3e906c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7fbff3e91020" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3e91020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff3e913a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff3e91530"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff3e916c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff3e91850"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff3e919e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff3e91b70"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff3e91d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7fbff3e90910" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fbff3e90910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fbff3e90c90"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fbff3e90e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff3e8f280" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e8f280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3e8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3e923a0" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3e923a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3e92720"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3e928b0"/>
        <function-ref name="request" scoped="" ref="0x7fbff3e92a40"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3e92bd0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3e92d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7fbff4a28960" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a28960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff4a28ce0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff4a28e70"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbff4a26030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7fbff4a241d0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7fbff4a241d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbff4a24550"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4a246e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7fbff4a26920" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fbff4a26920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fbff4a26ca0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fbff4a26e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7fbff4a291d0" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a291d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff4a29550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff4a296e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff4a29870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff4a29a00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff4a29b90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff4a29d20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff4a28020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff4a2dcc0" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff4a2dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4a2a0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4a2a230"/>
        <function-ref name="request" scoped="" ref="0x7fbff4a2a3c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4a2a550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4a2a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7fbff4a1eaf0" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7fbff4a1eaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff4a1ee70"/>
        <function-ref name="configure" scoped="" ref="0x7fbff4a1c030"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbff4a1c1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7fbff4a0b0d0" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fbff4a0b0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fbff4a0b450"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fbff4a0b5e0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fbff4a0b770"/>
        <function-ref name="isBusy" scoped="" ref="0x7fbff4a0b900"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fbff4a0ba90"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fbff4a0bc20"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fbff4a0bdb0"/>
        <function-ref name="startConversion" scoped="" ref="0x7fbff4a19020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fbff4a191b0"/>
        <function-ref name="getMem" scoped="" ref="0x7fbff4a19340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fbff4a194d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fbff4a19660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fbff4a197f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fbff4a19a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fbff4a19c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7fbff49fec80" loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fbff49fec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff49fd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff49fd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff49fd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff49fd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff49fd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff49fd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff49fda00"/>
        <function-ref name="get" scoped="" ref="0x7fbff49fdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff49fdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff49fc020"/>
        <function-ref name="set" scoped="" ref="0x7fbff49fc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff49fc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff49fc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff49fc760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff49fc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7fbff4a07e60" loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fbff4a07e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff4a06210"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff4a063a0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff4a06530"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff4a066c0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4a06850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7fbff4a0a880" loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fbff4a0a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff4a0ac00"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff4a0ad90"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff4a09020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff4a091b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff4a09340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff4a094d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff4a09660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff4a097f0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff4a09980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7fbff4a1b910" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7fbff4a1b910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fbff4a1bc90"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4a1be20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7fbff4a02c80" loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fbff4a02c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4a010a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4a01230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4a013c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4a01550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4a016e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4a01870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4a01a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4a01b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4a01d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4a00020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4a001b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4a00340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4a004d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4a00760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4a008f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7fbff4a1cab0" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fbff4a1cab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fbff4a1ce30"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fbff4a1b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7fbff49f8c80" loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fbff49f8c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff49f70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff49f7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff49f73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff49f7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff49f76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff49f7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff49f7a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff49f7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff49f7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff49f6020"/>
        <function-ref name="set" scoped="" ref="0x7fbff49f61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff49f6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff49f64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff49f6760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff49f68f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7fbff4a06be0" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fbff4a06be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4a050a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4a05230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4a053c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4a05550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4a056e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4a05870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4a05a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4a05b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4a05d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4a04020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4a041b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4a04340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4a044d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4a04760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4a048f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff4a20660" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff4a20660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff4a209e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7fbff49fcc80" loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fbff49fcc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff49fb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff49fb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff49fb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff49fb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff49fb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff49fb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff49fba00"/>
        <function-ref name="get" scoped="" ref="0x7fbff49fbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff49fbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff49fa020"/>
        <function-ref name="set" scoped="" ref="0x7fbff49fa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff49fa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff49fa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff49fa760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff49fa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7fbff4a18020" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fbff4a18020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff4a183a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff4a18530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff4a186c0"/>
        <function-ref name="get" scoped="" ref="0x7fbff4a18850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff4a189e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4a18b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff4a18d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4a0a020"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4a0a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff4a0a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff4a0a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7fbff4a1a280" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7fbff4a1a280"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff4a1a600"/>
        <function-ref name="userId" scoped="" ref="0x7fbff4a1a790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7fbff4a09d30" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fbff4a09d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff4a080e0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff4a08270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff4a08400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff4a08590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff4a08720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff4a088b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff4a08a40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff4a08bd0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff4a08d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7fbff4a1f370" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fbff4a1f370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff4a1f6f0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff4a1f880"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff4a1fa10"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff4a1fba0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff4a1fd30"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff4a1e020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff4a1e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7fbff4a00c80" loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fbff4a00c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff49ff0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff49ff230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff49ff3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff49ff550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff49ff6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff49ff870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff49ffa00"/>
        <function-ref name="get" scoped="" ref="0x7fbff49ffb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff49ffd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff49fe020"/>
        <function-ref name="set" scoped="" ref="0x7fbff49fe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff49fe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff49fe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff49fe760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff49fe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7fbff4a07120" loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fbff4a07120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff4a074a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff4a07630"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff4a077c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff4a07950"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4a07ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7fbff4a04c80" loc="55:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fbff4a04c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff4a030a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff4a03230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff4a033c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff4a03550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff4a036e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff4a03870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff4a03a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff4a03b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff4a03d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff4a02020"/>
        <function-ref name="set" scoped="" ref="0x7fbff4a021b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff4a02340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff4a024d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff4a02760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff4a028f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7fbff49fac80" loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fbff49fac80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fbff49f90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fbff49f9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fbff49f93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fbff49f9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fbff49f96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fbff49f9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fbff49f9a00"/>
        <function-ref name="get" scoped="" ref="0x7fbff49f9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fbff49f9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fbff49f8020"/>
        <function-ref name="set" scoped="" ref="0x7fbff49f81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fbff49f8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fbff49f84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fbff49f8760"/>
        <function-ref name="clr" scoped="" ref="0x7fbff49f88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7fbff4939020" loc="46:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fbff4939020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fbff49393a0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fbff4939530"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fbff49396c0"/>
        <function-ref name="isBusy" scoped="" ref="0x7fbff4939850"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fbff49399e0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fbff4939b70"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fbff4939d00"/>
        <function-ref name="startConversion" scoped="" ref="0x7fbff4938020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fbff49381b0"/>
        <function-ref name="getMem" scoped="" ref="0x7fbff4938340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fbff49384d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fbff4938660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fbff49387f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fbff4938a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fbff4938c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff48a83a0" loc="86:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff48a83a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff48a8740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff48a88d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbff48a7570" loc="89:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff48a7570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff48a7910"/>
        <function-ref name="configure" scoped="" ref="0x7fbff48a7aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff48a9520" loc="85:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff48a9520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff48a98c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff48a9a50"/>
        <function-ref name="request" scoped="" ref="0x7fbff48a9be0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff48a9d70"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff48a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbff48a8b20" loc="87:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff48a8b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff48a7020"/>
        <function-ref name="userId" scoped="" ref="0x7fbff48a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff3e6bca0" loc="44:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff3e6bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff3e6a0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7fbff3e6a330" loc="45:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7fbff3e6a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbff3e6a6b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbff3e6a840"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbff3e6a9d0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbff3e6ab60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fbff3e67020" loc="52:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fbff3e67020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fbff3e673c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fbff3e67550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fbff3e650d0" loc="56:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fbff3e650d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fbff3e65470"/>
        <function-ref name="configure" scoped="" ref="0x7fbff3e65600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fbff3e65890" loc="57:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fbff3e65890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fbff3e65c10"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fbff3e65da0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fbff3e64020"/>
        <function-ref name="dequeue" scoped="" ref="0x7fbff3e641b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3e68270" loc="51:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3e68270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3e68610"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3e687a0"/>
        <function-ref name="request" scoped="" ref="0x7fbff3e68930"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3e68ac0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3e68c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fbff3e677a0" loc="53:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fbff3e677a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fbff3e67b20"/>
        <function-ref name="userId" scoped="" ref="0x7fbff3e67cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fbff3e64480" loc="68:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fbff3e64480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff3e64800"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff3e64990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbff488b740" loc="55:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7fbff488b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff48893d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7fbff488c1d0" loc="54:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7fbff488c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff488c550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff488c6e0"/>
        <function-ref name="request" scoped="" ref="0x7fbff488c870"/>
        <function-ref name="granted" scoped="" ref="0x7fbff488ca00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff488cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7fbff4890d20" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7fbff4890d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff488d0e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff488d270"/>
        <function-ref name="request" scoped="" ref="0x7fbff488d400"/>
        <function-ref name="granted" scoped="" ref="0x7fbff488d590"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff488d720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7fbff48859a0" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fbff48859a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fbff4885d20"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fbff4884020"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fbff48841b0"/>
        <function-ref name="isBusy" scoped="" ref="0x7fbff4884340"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fbff48844d0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fbff4884660"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fbff48847f0"/>
        <function-ref name="startConversion" scoped="" ref="0x7fbff4884980"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fbff4884b10"/>
        <function-ref name="getMem" scoped="" ref="0x7fbff4884ca0"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fbff4884e30"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fbff4883020"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fbff48831b0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fbff4883440"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fbff48835d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7fbff487d020" loc="45:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7fbff487d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4879630"/>
        <function-ref name="fired" scoped="" ref="0x7fbff487ca60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff487b920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff487b4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4878020"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff4879ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff487b020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff487dc10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4879020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff487c110"/>
        <function-ref name="stop" scoped="" ref="0x7fbff487c5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7fbff4886e00" loc="39:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fbff4886e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff48851c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff4885350"/>
        <function-ref name="start" scoped="" ref="0x7fbff48854e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4885670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7fbff48786c0" loc="46:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7fbff48786c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4874c40"/>
        <function-ref name="fired" scoped="" ref="0x7fbff48761e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff4874020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff4876ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4873590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff4873110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4876660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff4877390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4874630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff4877860"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4877d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7fbff4886240" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fbff4886240"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff48865c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff4886750"/>
        <function-ref name="start" scoped="" ref="0x7fbff48868e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4886a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7fbff4883a90" loc="44:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7fbff4883a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff487e020"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4881510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff487f300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff4881e10"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff487e920"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff487e4a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4881990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff48826b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff487f910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff4882b80"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4881090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7fbff481e020" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7fbff481e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff481ec50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7fbff48209c0" loc="42:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7fbff48209c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff4820d40"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff481f020"/>
        <function-ref name="start" scoped="" ref="0x7fbff481f1b0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff481f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7fbff4822030" loc="40:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7fbff4822030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff48223b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4822540"/>
        <function-ref name="request" scoped="" ref="0x7fbff48226d0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4822860"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff48229f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7fbff4826ca0" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7fbff4826ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff48230a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4823230"/>
        <function-ref name="request" scoped="" ref="0x7fbff48233c0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4823550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff48236e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7fbff481c7f0" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7fbff481c7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff481cb70"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff481cd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7fbff4822d80" loc="41:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7fbff4822d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fbff4820180"/>
        <function-ref name="stopDone" scoped="" ref="0x7fbff4820310"/>
        <function-ref name="start" scoped="" ref="0x7fbff48204a0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4820630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff47ec640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff47ec640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4658c40"/>
        <function-ref name="fired" scoped="" ref="0x7fbff46591e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff4658020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff4659ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4657590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff4657110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4659660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff465b390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4658630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff465b860"/>
        <function-ref name="stop" scoped="" ref="0x7fbff465bd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fbff47e37d0" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47e37d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff47dfc40"/>
        <function-ref name="fired" scoped="" ref="0x7fbff47e0260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff47df020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff47e0b60"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff47de590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff47de110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff47e06e0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff47e2400"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff47df630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff47e28d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff47e2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fbff47d91d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fbff47d91d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff47d5630"/>
        <function-ref name="fired" scoped="" ref="0x7fbff47d8c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff47d79d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff47d7550"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff47d4020"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff47d5ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff47d70d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff47d9dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff47d5020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff47d82e0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff47d87b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbff47d1a80" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fbff47d1a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff47d36f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff47da400" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff47da400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff47da780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff46f7020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff46f7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff46f4870"/>
        <function-ref name="fired" scoped="" ref="0x7fbff46f6840"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff46f4220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff46f6d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff46f4d30"/>
        <function-ref name="start" scoped="" ref="0x7fbff46f7e30"/>
        <function-ref name="stop" scoped="" ref="0x7fbff46f6380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff46f8760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff46f8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff46f8ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff3e30020" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff3e30020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3e2d870"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3e2f840"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3e2d220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3e2fd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3e2dd30"/>
        <function-ref name="start" scoped="" ref="0x7fbff3e30e30"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3e2f380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff3e31720" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff3e31720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff3e31aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fbff3e185d0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3e185d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff3e18950"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff3e18ae0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff3e18c70"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff3e18e00"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3e16020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fbff3e1bc50" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3e1bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff3e1a020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff3e1a1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3e1a340"/>
        <function-ref name="get" scoped="" ref="0x7fbff3e1a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3e1a660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff3e1a7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff3e1a980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff3e1ab10"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff3e1aca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff3e1ae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff3e19020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fbff3e192b0" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3e192b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff3e19630"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff3e197c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3e19950"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff3e19ae0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff3e19c70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3e19e00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff3e18020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff3e181b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff3e18340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fbff47aeba0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff47aeba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff47ad020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff47ad1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff47ad340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff47ad4d0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff47ad660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fbff47b24d0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff47b24d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff47b2850"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff47b29e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff47b2b70"/>
        <function-ref name="get" scoped="" ref="0x7fbff47b2d00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff47b1020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff47b11b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff47b1340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff47b14d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff47b1660"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff47b17f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff47b1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fbff47af280" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff47af280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff47af600"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff47af790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff47af920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff47afab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff47afc40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff47afdd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff47ae020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff47ae1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff47ae340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fbff3e0d440" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3e0d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff3e0d7c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff3e0d950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff3e0dae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff3e0dc70"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3e0de00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fbff3e11910" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3e11910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff3e11c90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff3e11e20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3e10020"/>
        <function-ref name="get" scoped="" ref="0x7fbff3e101b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3e10340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff3e104d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff3e10660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff3e107f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff3e10980"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff3e10b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff3e10ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff3e14720" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff3e14720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3e11020"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3e12020"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3e129a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3e124e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3e114e0"/>
        <function-ref name="start" scoped="" ref="0x7fbff3e135b0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3e13ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff3e15e60" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff3e15e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff3e14210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fbff3e0f020" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3e0f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff3e0f3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff3e0f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3e0f6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff3e0f850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff3e0f9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3e0fb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff3e0fd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff3e0d020"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff3e0d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbff475a020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff475a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff475ae30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4758800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4758340"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4758cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fbff4736950" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fbff4736950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff4735780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4734150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4735c40"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4734610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fbff47535f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff47535f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff4738430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4738db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff47388f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff47362a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff3e2a1d0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff3e2a1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3e28b30"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3e299f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3e284e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3e28020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3e27020"/>
        <function-ref name="start" scoped="" ref="0x7fbff3e29020"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3e29530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fbff3e24b90" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fbff3e24b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3e214e0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3e224e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3e22e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3e229a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3e219a0"/>
        <function-ref name="start" scoped="" ref="0x7fbff3e239d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3e22020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbff3e27690" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff3e27690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff3e255b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff3e24020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff3e25a70"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff3e244e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fbff46c2490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7fbff46c2490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff46c2810"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff46c29a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fbff46c51d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff46c51d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff46c3b30"/>
        <function-ref name="fired" scoped="" ref="0x7fbff46c49f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff46c34e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff46c3020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff46c2020"/>
        <function-ref name="start" scoped="" ref="0x7fbff46c4020"/>
        <function-ref name="stop" scoped="" ref="0x7fbff46c4530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff46cccf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff46cccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff46c7220"/>
        <function-ref name="fired" scoped="" ref="0x7fbff46c97c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff46c8590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff46c8110"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff46c7b20"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff46c76a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff46c9c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff46ca940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff46c8ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff46cae10"/>
        <function-ref name="stop" scoped="" ref="0x7fbff46c9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fbff4671e80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7fbff4671e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff4670220"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff46703b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fbff4677c30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fbff4677c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4671110"/>
        <function-ref name="fired" scoped="" ref="0x7fbff46746a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff46734a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff4673020"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4671a10"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff4671590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4674b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff4675860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4673ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff4675d30"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4674220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff467c690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff467c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4678cf0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff467a260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff4678090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff467aba0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4677680"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff46771e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff467a700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff467b390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff46786c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff467b880"/>
        <function-ref name="stop" scoped="" ref="0x7fbff467bd70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fbff466ecf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fbff466ecf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff466d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbff4663020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff4663020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff4663e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff4662800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff4662340"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff4662cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff4655140" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff4655140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4651630"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4653b70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff4652920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff46524a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff4650020"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff4651ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4652020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff4655d30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4651020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff4653220"/>
        <function-ref name="stop" scoped="" ref="0x7fbff46536f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff464fb40" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff464fb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff464a110"/>
        <function-ref name="fired" scoped="" ref="0x7fbff464c5b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff464b4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff464b020"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff464aa10"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff464a590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff464ca30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff464d750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff464bab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff464dc20"/>
        <function-ref name="stop" scoped="" ref="0x7fbff464c130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7fbff3e81a40" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7fbff3e81a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3e806b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7fbff3e80cc0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7fbff3e80cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3e7e980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff3e9e0e0" loc="49:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e9e0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3e9ed10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7fbff3ea1380" loc="48:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7fbff3ea1380"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7fbff3ea0e60"/>
        <function-ref name="postBuffer" scoped="" ref="0x7fbff3ea0020"/>
        <function-ref name="read" scoped="" ref="0x7fbff3ea0990"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3e9f940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Adc12SingleChannel" ref="0x7fbff4613c90" loc="23:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff4613c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff46110a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff4611230"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff46113c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff4611550"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff46116e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff4611870"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff4611a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff46145e0" loc="22:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff46145e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff4613240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7fbff46181d0" loc="20:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7fbff46181d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7fbff4616c40"/>
        <function-ref name="postBuffer" scoped="" ref="0x7fbff4618dc0"/>
        <function-ref name="read" scoped="" ref="0x7fbff4616770"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4615730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fbff4610280" loc="24:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff4610280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4610600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4610790"/>
        <function-ref name="request" scoped="" ref="0x7fbff4610920"/>
        <function-ref name="granted" scoped="" ref="0x7fbff4610ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4610c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="bufferDone" ref="0x7fbff45da380" loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="bufferDone" scoped="" ref="0x7fbff45da380"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff45da700"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff45da890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamDone" ref="0x7fbff45e8aa0" loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamDone" scoped="" ref="0x7fbff45e8aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff45e8e20"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff45e7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamFail" ref="0x7fbff45e1100" loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamFail" scoped="" ref="0x7fbff45e1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fbff45e1480"/>
        <function-ref name="runTask" scoped="" ref="0x7fbff45e1610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fbff4603020" loc="54:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff4603020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4600870"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4601840"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff4600220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff4601d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff4600d30"/>
        <function-ref name="start" scoped="" ref="0x7fbff4603e30"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4601380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff460c150" loc="48:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff460c150"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7fbff5ccd800"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7fbff5ccd800"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff460c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff4605b10" loc="53:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff4605b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff4604790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7fbff46061d0" loc="52:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7fbff46061d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff4606550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff46066e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff4606870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff4606a00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff4606b90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff4606d20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff4605020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7fbff460ce70" loc="49:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7fbff460ce70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7fbff4609910"/>
        <function-ref name="postBuffer" scoped="" ref="0x7fbff460aa90"/>
        <function-ref name="read" scoped="" ref="0x7fbff4609440"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4608440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff459e970" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff459e970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff459a1b0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff459b1b0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff459bb30"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff459b670"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff459a670"/>
        <function-ref name="start" scoped="" ref="0x7fbff459d7c0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff459dcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff459e120" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff459e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff459e4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff3d7fca0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff3d7fca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3d7b4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3d7c4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3d7ce60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3d7c9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3d7b9a0"/>
        <function-ref name="start" scoped="" ref="0x7fbff3d7dae0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3d7c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff3d7f450" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff3d7f450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff3d7f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fbff3d65440" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3d65440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff3d657c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff3d65950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff3d65ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff3d65c70"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3d65e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fbff3d68880" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3d68880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff3d68c00"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff3d68d90"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3d67020"/>
        <function-ref name="get" scoped="" ref="0x7fbff3d671b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3d67340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff3d674d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff3d67660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff3d677f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff3d67980"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff3d67b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff3d67ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fbff3d66020" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3d66020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff3d663a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff3d66530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3d666c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff3d66850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff3d669e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3d66b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff3d66d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff3d65020"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff3d651b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fbff3d5b0c0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fbff3d5b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fbff3d5b440"/>
        <function-ref name="setEvent" scoped="" ref="0x7fbff3d5b5d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fbff3d5b760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fbff3d5b8f0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3d5ba80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fbff3d5e710" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fbff3d5e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fbff3d5ea90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fbff3d5ec20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3d5edb0"/>
        <function-ref name="get" scoped="" ref="0x7fbff3d5d020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3d5d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff3d5d340"/>
        <function-ref name="getMode" scoped="" ref="0x7fbff3d5d4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff3d5d660"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff3d5d7f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fbff3d5d980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fbff3d5db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff3d625b0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff3d625b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3d60df0"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3d61df0"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3d607a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3d602e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3d5e2e0"/>
        <function-ref name="start" scoped="" ref="0x7fbff3d61420"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3d61930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fbff3d63ca0" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fbff3d63ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fbff3d620a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fbff3d5dda0" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fbff3d5dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fbff3d5c180"/>
        <function-ref name="getControl" scoped="" ref="0x7fbff3d5c310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fbff3d5c4a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fbff3d5c630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fbff3d5c7c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fbff3d5c950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fbff3d5cae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fbff3d5cc70"/>
        <function-ref name="setControl" scoped="" ref="0x7fbff3d5ce00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fbff3d78020" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fbff3d78020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3d75870"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3d77840"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3d75220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3d77d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3d75d30"/>
        <function-ref name="start" scoped="" ref="0x7fbff3d78e30"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3d77380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fbff3d72780" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fbff3d72780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff5123950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fbff5123cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff3d6e020"/>
        <function-ref name="fired" scoped="" ref="0x7fbff3d6f020"/>
        <function-ref name="startAt" scoped="" ref="0x7fbff3d6f9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff3d6f4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fbff3d6e4e0"/>
        <function-ref name="start" scoped="" ref="0x7fbff3d715d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff3d71ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fbff3d743d0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fbff3d743d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fbff3d73240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fbff3d73bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fbff3d73700"/>
        <function-ref name="overflow" scoped="" ref="0x7fbff3d720d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x7fbff456abf0" loc="26:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Service" scoped="" ref="0x7fbff456abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7fbff4568710"/>
        <function-ref name="postBuffer" scoped="" ref="0x7fbff4569860"/>
        <function-ref name="read" scoped="" ref="0x7fbff4568220"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff4566220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7fbff4596cb0" loc="24:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7fbff4596cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7fbff456c850"/>
        <function-ref name="postBuffer" scoped="" ref="0x7fbff456d940"/>
        <function-ref name="read" scoped="" ref="0x7fbff456c360"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff456a360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fbff45668f0" loc="27:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff45668f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff4566c90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff4566e20"/>
        <function-ref name="request" scoped="" ref="0x7fbff4565020"/>
        <function-ref name="granted" scoped="" ref="0x7fbff45651b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff4565340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7fbff3d8c020" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fbff3d8c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff3d8c3a0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff3d8c530"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbff3d8c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7fbff3d8d020" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3d8d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff3d8d3a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff3d8d530"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff3d8d6c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff3d8d850"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff3d8d9e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff3d8db70"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff3d8dd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7fbff3d8c910" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fbff3d8c910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fbff3d8cc90"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fbff3d8ce20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff3d8b280" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3d8b280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3d8a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3d8e360" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3d8e360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3d8e6e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3d8e870"/>
        <function-ref name="request" scoped="" ref="0x7fbff3d8ea00"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3d8eb90"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3d8ed20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7fbff3d1bdc0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7fbff3d1bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3d1aac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7fbff3d18120" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7fbff3d18120"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3d18d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7fbff4550a10" loc="35:../../../tos/chips/msp430/sensors/Msp430InternalVoltageP.nc">
      <component-ref qname="Msp430InternalVoltageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff4550a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff454d6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7fbff3e9a840" loc="50:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7fbff3e9a840"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fbff3e994c0"/>
        <function-ref name="readDone" scoped="" ref="0x7fbff3e99980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff3e98130" loc="52:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3e98130"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3e98d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3e9b9c0" loc="49:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3e9b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3e9bd40"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3e9a020"/>
        <function-ref name="request" scoped="" ref="0x7fbff3e9a1b0"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3e9a340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3e9a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7fbff3d0c020" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7fbff3d0c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff3d0c3a0"/>
        <function-ref name="configure" scoped="" ref="0x7fbff3d0c530"/>
        <function-ref name="dataReady" scoped="" ref="0x7fbff3d0c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7fbff3d0d020" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7fbff3d0d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7fbff3d0d3a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7fbff3d0d530"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7fbff3d0d6c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7fbff3d0d850"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7fbff3d0d9e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7fbff3d0db70"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7fbff3d0dd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7fbff3d0c910" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7fbff3d0c910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7fbff3d0cc90"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7fbff3d0ce20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7fbff3d0b280" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7fbff3d0b280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3d0a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fbff3d0e280" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fbff3d0e280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fbff3d0e600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fbff3d0e790"/>
        <function-ref name="request" scoped="" ref="0x7fbff3d0e920"/>
        <function-ref name="granted" scoped="" ref="0x7fbff3d0eab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fbff3d0ec40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7fbff3cfda40" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7fbff3cfda40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3cfc6b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7fbff3cfccc0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestPrintfAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7fbff3cfccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7fbff3cfa980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fbff45247b0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestPrintfAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fbff45247b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff51231a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fbff5123510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fbff4521c40"/>
        <function-ref name="fired" scoped="" ref="0x7fbff4522260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fbff4521020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fbff4522b60"/>
        <function-ref name="getdt" scoped="" ref="0x7fbff451f590"/>
        <function-ref name="gett0" scoped="" ref="0x7fbff451f110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fbff45226e0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fbff4523400"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fbff4521630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fbff45238d0"/>
        <function-ref name="stop" scoped="" ref="0x7fbff4523da0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fbff560cdc0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fbff560da10" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7fbff55c4740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7fbff55c7990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7fbff55c4020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7fbff55c72b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7fbff55c6120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7fbff55c84d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7fbff55c8bb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7fbff55c6840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fbff594a020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fbff5c0b3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7fbff5573500" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fbff5573280" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7fbff55789c0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbff55bc5a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fbff55bb020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fbff5573d70" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7fbff5571c80" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7fbff5574b00" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fbff55714f0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fbff5575190" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7fbff5575920" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7fbff5574390" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbff55bc5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fbff55bb020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbff5574110" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fbff55bc5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fbff55bb020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fbff5565560" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7fbff5563ca0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7fbff5563a20" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fbff55619d0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fbff5561750" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fbff5563270" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fbff5564940" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7fbff5564020" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fbff5565c90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fbff556e890" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7fbff556b2a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fbff556b020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7fbff556bc80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fbff556ba00" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7fbff556a6a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fbff556a420" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fbff556ad90" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fbff557b120" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fbff557aa10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7fbff557a790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fbff557b850" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbff557f350" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fbff557a020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fbff557e270" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fbff557d9e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fbff557fae0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fbff557e980" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fbff557d2e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fbff557d060" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7fbff5579450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7fbff55791d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fbff553c1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fbff569c7f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fbff5699020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fbff569c020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fbff5b24810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fbff5cca020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fbff5cc9020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fbff5cca790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fbff5cbe270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fbff5cbeac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbff5424bb0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fbff5424260" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fbff54245e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff5424910" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbff541f620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff541f020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff541f350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbff541e6d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbff54222a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5422020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbff54217f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5421210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbff5421560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fbff541a020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5426c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fbff5419110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff541ae10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbff5415490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5416e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff54151c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbff5416560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fbff54175e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5417020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff5417350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fbff5404d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fbff5624930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff5404ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fbff540fa10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff540f790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fbff5425e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fbff5411950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff54116d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fbff540c3a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff5410d70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbff540c110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fbff540ee50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff540e870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fbff540ebc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fbff5624d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fbff5409810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff5409590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fbff5406b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff54065e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fbff5406900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fbff5624550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fbff540b600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff540b380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fbff54032f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbff5624930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fbff5405cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fbff5403060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fbff5624930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fbff5402190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fbff5624930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fbff53ffad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53ff850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fbff53fdcd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53fda50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fbff53fb020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53fece0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbff53f55e0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53f5020" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff53f5350" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fbff53f0bb0" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53f05b0" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff53f08e0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fbff53f2d20" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fbff53f3900" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53f3680" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbff53f1e00" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53f1820" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fbff53f1b70" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fbff5384ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbff5384830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fbff5382020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbff5383d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbff5387d60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbff5383350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7fbff537e410" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
              <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5381a80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fbff5381dd0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff537e130" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fbff5374270" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fbff5374a20" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fbff5373270" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fbff53721f0" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fbff5370940" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbff536f190" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fbff5373a00" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbff536fd00" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fbff536fa80" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fbff5375a60" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fbff53729d0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fbff5370190" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fbff5306020" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff5307960" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fbff5307ce0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fbff5309020" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fbff5307020" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fbff53098b0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fbff5614720"/>
                <typename><typedef-ref name="message_t" ref="0x7fbff5613d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fbff5309c20" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fbff52eca40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbff52e9270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fbff52e7070" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fbff52eb8e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fbff52fcb20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fbff52f0020" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fbff52efc20" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff52ef9a0" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fbff52f08a0" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fbff52f16d0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff52f1450" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fbff52ee4b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fbff52ef190" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fbff52f90e0" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fbff52f9a10" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fbff52fb720" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fbff52fb4a0" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fbff52f85c0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fbff52f8340" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fbff52f67a0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fbff52f5400" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff52f5180" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fbff52f3020" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fbff52f5c50" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbff51c1dd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbff51c1800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff51c1b40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fbff51baac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fbff51ba840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fbff51b9930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbff51b9360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff51b96a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fbff51bb740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fbff51b62c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbff51b7920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff51b7c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fbff51b6020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fbff51ba070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fbff51bd720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbff51bedb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fbff51bd130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fbff51bd480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fbff51965b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fbff5196330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fbff5196df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fbff5195cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fbff5195700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fbff5195a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fbff5193b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fbff5140ae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fbff51394e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7fbff5136890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fbff515fe70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fbff515e2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fbff513d350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fbff513e350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fbff5141980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fbff513eb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fbff513ddb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fbff512e020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fbff512f750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7fbff5127d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff5127af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fbff5127350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fbff50fe390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7fbff5109020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7fbff5119de0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff518ec50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fbff518d4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbff5119b60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff518ec50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fbff518d4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7fbff510c0e0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7fbff51132a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff5189c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fbff51884f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbff5113020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff5189c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fbff51884f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fbff5103750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7fbff5100cf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7fbff5115830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff518cb60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7fbff518a390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7fbff5113a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff5189c30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7fbff51884f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7fbff5110830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7fbff51105b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7fbff5111e40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7fbff5103020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7fbff5115040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff518cb60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fbff518a390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fbff5116da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff518cb60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fbff518a390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7fbff5112c80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fbff5103e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7fbff5111690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7fbff5111410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7fbff510d190" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7fbff510d910" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fbff5104070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7fbff5107020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7fbff510b070" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fbff51047b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7fbff5109800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7fbff51025c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fbff510e070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fbff5197320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7fbff518f320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7fbff5102d60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7fbff50ffbd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7fbff51124d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7fbff5112250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fbff50fed30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff50feab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7fbff5116600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff518ec50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7fbff518d4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7fbff510c850" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fbff5108020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7fbff5105800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fbff515fe70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fbff515e2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff5105580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fbff515fe70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fbff515e2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7fbff5107af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fbff5171020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fbff5171440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff5107870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fbff5171020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fbff5171440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fbff50fd730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7fbff5100570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7fbff510e880" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7fbff50ff480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7fbff5108790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7fbff510b850" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff50f8ce0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff50f8ce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbff50f5020" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff50f5020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fbff50f5940" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff50f5020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fbff50f4a50" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fbff50f41f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fbff50f31f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fbff507f930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fbff5041a50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fbff50401f0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7fbff503cb10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fbff503c890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fbff50422d0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fbff503e0e0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7fbff503b490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fbff5040930" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbff50412b0" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7fbff503d7c0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7fbff5042a70" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbff5044420" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7fbff503e860" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7fbff503c020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7fbff503d070" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fbff5044b50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7fbff5055780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7fbff5068c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7fbff505b020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fbff505cca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7fbff506f390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7fbff50587a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7fbff5060020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7fbff5069da0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7fbff5066b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fbff506ad40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7fbff506aac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7fbff506b270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7fbff5064900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7fbff505a020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7fbff5055020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7fbff505c560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7fbff50501f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7fbff504c880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7fbff506e270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7fbff5064190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7fbff5062a90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7fbff5069650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7fbff5071190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7fbff505dd40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fbff505dac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7fbff50759f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7fbff5058020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7fbff5053020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7fbff504e9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7fbff504c120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7fbff5057790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7fbff5053750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7fbff505b7b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7fbff50511f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7fbff506e990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7fbff505f1f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7fbff5052630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7fbff5056790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7fbff5061760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7fbff50614e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7fbff504d190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7fbff505d390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7fbff5057020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7fbff5071c10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fbff514bb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fbff5149020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff5071990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fbff514bb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fbff5149020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7fbff5065a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7fbff506da80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fbff506d800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7fbff50622a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff5062020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7fbff50519c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7fbff506a3b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7fbff506d120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7fbff505fbb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7fbff505f930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7fbff506fac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7fbff5053e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7fbff5056020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7fbff505a790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7fbff50609f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7fbff5060770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7fbff50652b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7fbff5068530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7fbff504d900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7fbff506bbf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fbff506b970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7fbff50509b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7fbff5066420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7fbff504e1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fbff4d78730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fbff4d78e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fbff4d7a880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fbff4d77cf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fbff4d78020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fbff4d775b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fbff4d7da90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fbff4d7a190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fbff4d1d020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fbff4d1d880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fbff4ce8e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7fbff4ce6020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fbff4ce8570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fbff4ce76d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fbff4ce6950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fbff4cda020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbff4ce1090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fbff4cdcd20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbff4ce1090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fbff4cdd020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fbff4cddb20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbff4ce1090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fbff4cdd8a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fbff4ce1090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fbff4cdc470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fbff4ce1090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7fbff4b71ad0" loc="43:../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbff4b71ad0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7fbff4b6c270" loc="80:../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbff4b71ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7fbff4b6acb0" loc="97:../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbff4b71ad0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7fbff4b6aa30" loc="97:../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbff4b71ad0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7fbff66aac30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7fbff66aac30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7fbff4b68c70" loc="108:../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbff4b71ad0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbff4b689f0" loc="108:../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7fbff4b6eb20" loc="57:../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7fbff4b6dad0" loc="72:../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fbff4b6ce50" loc="88:../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fbff4b71ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7fbff4b6e3b0" loc="50:../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7fbff4b6d2d0" loc="65:../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7fbff4b46dd0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7fbff4b46b50" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fbff4b06d90" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4b06d90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fbff4b036c0" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fbff4b02440" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4b06d90"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fbff4b03e40" loc="63:../../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7fbff4b021b0" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4b06d90"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff4b16a90" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff4b16a90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fbff4b0d7c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fbff4b11070" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fbff4b0fdf0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fbff4b0f820" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fbff4b0fb60" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fbff4b0f070" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fbff4b0c8a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fbff4b0c020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fbff4b11850" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fbff4b13640" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbff4b133c0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fbff4b0edc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fbff4b0e7f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fbff4b0eb30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fbff4b12120" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbff4b13e80" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbff4b12920" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fbff4ac55a0" loc="52:../../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ac55a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fbff4ac1020" loc="58:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fbff4ac1d90" loc="66:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ac55a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fbff4ac17e0" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7fbff4ac1b00" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ac55a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadStream" loc="57:../../../tos/interfaces/ReadStream.nc">
      <documentation loc="33:../../../tos/interfaces/ReadStream.nc">
        <short>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices.</short>
        <long>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices. The type of the values being&#10; read is given as a template argument. &#10;&#10; &#60;p> To use this interface, allocate one or more buffers in your own&#10; space. Then, call postBuffer to pass these buffers into the&#10; device. Call read() to begin the sampling process. The buffers will&#10; be filled in the order originally posted, and a bufferDone() event&#10; will be signaled once each buffer has been filled with data. At any&#10; time while the read() is running, you may post new buffers to be&#10; filled. If the lower layer finishes signaling readDone() and then&#10; finds that no more buffers have been posted, it will consider the&#10; read to be finished, and signal readDone(). &#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fbff4ace4a0" loc="57:../../../tos/interfaces/ReadStream.nc">
          <interfacedef-ref qname="ReadStream"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ace4a0"/></type-var>
        </typedef>
      </parameters>
      <function event="" provided="0" name="bufferDone" ref="0x7fbff4aca810" loc="89:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="80:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a previously posted buffer has been filled by the&#10; device.</short>
          <long>&#10; Signalled when a previously posted buffer has been filled by the&#10; device. In the event of a read error, result will not equal&#10; SUCCESS, and the buffer will be filled with zeroes.&#10;&#10; @param result SUCCESS if the buffer was filled without errors&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer that has been filled&#10; @param count the number of values actually read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ace4a0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fbff4acbe50" loc="89:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7fbff4aca210" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ace4a0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7fbff4aca570" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="postBuffer" ref="0x7fbff4acd3e0" loc="68:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="58:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer.</short>
          <long>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer. Make sure your count doesn't&#10; overrun the buffer.&#10;&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer&#10; @param count the number of values the buffer should hold&#10;&#10; @return SUCCESS if the post was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ace4a0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fbff4aceda0" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fbff4ace4a0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7fbff4acd150" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7fbff4acb630" loc="78:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="70:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period.</short>
          <long>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period. &#10; &#10; @param usPeriod the between-sample period in microseconds&#10; &#10; @return SUCCESS if the reading process began&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="usPeriod" ref="0x7fbff4acb3b0" loc="78:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fbff4ac8df0" loc="102:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="92:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted.</short>
          <long>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted. In the event of a read error, all previously posted&#10; buffers will have their bufferDone() event signalled, and then&#10; this event will be signalled with a non-SUCCESS argument.&#10;&#10; @param result SUCCESS if all buffers were filled without errors&#10; @param usActualPeriod Actual sampling period used - may be different&#10;   from period requested at read time. Undefined if result != SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fbff4ac87b0" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
            </type-int>
          </variable>
          <variable name="usActualPeriod" ref="0x7fbff4ac8b60" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7fbff4aa4d20" loc="45:../../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7fbff4aa4d20"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7fbff4aa1730" loc="58:../../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7fbff4aa4d20"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7fbff4a86df0" loc="189:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7fbff4a8f8c0" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff4a8f640" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7fbff4a8ede0" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff4a8e7e0" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7fbff4a8eb50" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7fbff4a879c0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff4a89700" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7fbff4a87020" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fbff4a873a0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7fbff4a87710" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7fbff4a83770" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7fbff4a830d0" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fbff4a83460" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7fbff4a8a2d0" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff4a8b020" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7fbff4a8b8c0" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fbff4a8bc50" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7fbff4a8a020" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7fbff4a85ad0" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fbff4a85850" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7fbff4a32ce0" loc="97:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fbff4a32020" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff4aba290"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7fbff4aba760"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fbff4a35970" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7fbff4abc640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7fbff4abdcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7fbff4a35d60" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff4aba290"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7fbff4aba760"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7fbff4a34110" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7fbff4a344b0" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fbff4a34860" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7fbff4a34bd0" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7fbff4a31d40" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7fbff4a31720" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7fbff4a31ab0" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7fbff4a2f780" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
          <long> &#10; An ADC12MEMx overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7fbff4a2e020" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fbff4a25da0" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbff4a226a0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fbff5cc5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7fbff4a15ac0" loc="63:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff4aaace0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7fbff4aa97a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7fbff4a13c30" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff4aba290"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7fbff4aba760"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbff4a139b0" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7fbff4a0f350" loc="106:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7fbff4a0e550" loc="118:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7fbff4a0fd50" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7fbff4a0fad0" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7fbff4a14350" loc="68:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff4aa7e20"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7fbff4aa6770"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7fbff4a13130" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff4aba290"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7fbff4aba760"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbff4a14ac0" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7fbff4a14e80" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fbff4aba290"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7fbff4aba760"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7fbff4a0d600" loc="128:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7fbff4a17760" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff4aaace0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7fbff4aa97a0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7fbff4a174e0" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff4aaace0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7fbff4aa97a0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7fbff4a12750" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fbff4a124d0" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fbff66a4160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7fbff4a102a0" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fbff4a10020" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7fbff4a10b10" loc="101:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fbff66a4520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7fbff4a0ed10" loc="123:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7fbff4a0dda0" loc="133:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7fbff4a152a0" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff4aa7e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7fbff4aa6770"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7fbff4a15020" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fbff4aa7e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7fbff4aa6770"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff47d4c40" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff47d4c40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fbff47d15a0" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fbff66a4920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fbff47cb5d0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fbff47cb5d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fbff47cb810" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fbff47c6390" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fbff47c93b0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fbff47c79d0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fbff47c7400" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fbff47c7740" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fbff47c9b90" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fbff5cce090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fbff47c6b80" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fbff47ca390" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fbff47ca110" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fbff47cb810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fbff47cabc0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
