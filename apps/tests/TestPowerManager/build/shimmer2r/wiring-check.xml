<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="53:TestPowerManagerAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f6bebf30780"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f6bec10a9a0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f6bec10a9a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f6bebf42590"/></to>
    </wire>
    <wire loc="55:TestPowerManagerAppC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebf13ab0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6beb9eb140"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6beb9eb140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc5c610"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:TestPowerManagerAppC.nc">
      <from><interface-ref name="Resource0" scoped="" ref="0x7f6bebf1e540"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f6bebeff280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:TestPowerManagerAppC.nc">
      <from><interface-ref name="Resource1" scoped="" ref="0x7f6bebf22370"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f6bebeff280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:TestPowerManagerAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f6bebf249a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f6bebefbca0"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f6bebefbca0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f6bebece710"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f6bec10b020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6beb460730"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f6bec10b020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bebc56840"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f6bebf42c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f6bec7693a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f6bec7693a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f6bec141c30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f6bebf3d6c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bec107020"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f6bec107020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bec107e00"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f6bebf3ddc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f6bec10b020"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f6bec103550"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f6bec104e70"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f6bec104e70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bec0d6d50"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f6bec103c30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bec106b70"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f6bec102380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bebea52e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f6bec0d6d50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bec0bed60"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f6bec0cc380"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f6bec0bc4b0"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f6bec3ea4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f6bec0bb690"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f6bec0785a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebfb66d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f6bec066020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebfaeb30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f6bec06f700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebfbb160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f6bec053a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebf95cb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f6bec076aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebfbc480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f6bec05a020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebf95020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f6bec050a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebf7dcb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f6bec0615a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebf8e220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f6bec079b10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bec00b9d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f6bec056a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebfa42f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f6bec05c3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebfa5610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f6bec0655a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebfa6220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f6bec06e700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebfb47a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f6bec052a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebf8c2f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f6bec064be0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebf9e6d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f6bec075890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebfb5ac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f6bec089060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec019540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f6bec05ada0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebf8d610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f6bec0800c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebfbd020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f6bec060a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebf876d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f6bec0696d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebfc4a90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f6bec054a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebf9c7a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f6bec072cf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebfc5de0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f6bec05b1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebf9dac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f6bec051a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebf857a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f6bec0620c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebf97b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f6bec059b80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebf86ac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f6bec057a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f6bebfaccb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f6bec058a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebf7d020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f6bec05d570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f6bebfac020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f6bec05e020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f6bebf80b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f6bec017450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec018d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f6bec017aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f6bebf78a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f6bec016120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f6bebf75260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebfc3930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec019540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebfc0020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec018d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebfba020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec019540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebfb97a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec018d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebfb3610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec019540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebfb2c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec018d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f6bec0102f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f6bec010940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f6bebf759f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f6bec00f020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f6bebf74240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebfabb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebfa92f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebfa3160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebfa27a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebf9b610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebf9ac50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebf94b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebf922f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebf8b160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebf8a7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebf84610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebf83c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebf7cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f6bebf7a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec140b70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f6bec1392c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f6bec75b3b0"/></to>
    </wire>
    <wire loc="64:MyComponentC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f6bebeff280"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f6beba307e0"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f6beba307e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f6beb45c020"/></to>
    </wire>
    <wire loc="66:MyComponentC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6beb9f4020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6bebef0450"/></to>
    </wire>
    <wire loc="69:MyComponentC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb9f4d50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beba2fe40"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beba2fe40"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb45b560"/></to>
    </wire>
    <wire loc="70:MyComponentC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb9f3990"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beba2ea70"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beba2ea70"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb45a270"/></to>
    </wire>
    <wire loc="72:MyComponentC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f6bebef0c60"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f6bebefbca0"/></to>
    </wire>
    <wire loc="73:MyComponentC.nc">
      <from><interface-ref name="StartTimer" scoped="" ref="0x7f6bebef54c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bebc65640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebc65640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc5c610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:MyComponentC.nc">
      <from><interface-ref name="StopTimer" scoped="" ref="0x7f6bebeebad0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bebab2060"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6bebab2060"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc5c610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f6bebea52e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bebece110"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f6bebec6ce0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f6bebecf990"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f6bebecf990"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f6bebc8e020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f6bebeca020"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f6bebea8ce0"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f6bebea8ce0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f6bebc7ab90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f6bebec4340"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f6bebea6020"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f6bebea6020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f6bebc75710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f6bebc7d2f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f6bebe67810"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f6bebe67810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd64e60"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f6bebc79de0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f6bebe639a0"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f6bebe639a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd5a460"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f6bebc74930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f6bebe609a0"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f6bebe609a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd56e00"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f6bebe8f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdc4740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f6bebe7b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd93100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f6bebe31ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd85100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f6bebe0dcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcfa740"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f6bebe2fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd81d10"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f6bebe77810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd8a740"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f6bebe4e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd2bd10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f6bebe3e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd04100"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f6bebe29cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd77100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f6bebe19cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd17740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f6bebe05cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcf5100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f6bebe89810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdb5740"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f6bebe27cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd73d10"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f6bebe85810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdacd10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f6bebe71810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd7c740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f6bebe5c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd4c100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f6bebe489a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd1cd10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f6bebe389a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcf5100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f6bebe94810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdcd100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f6bebe7f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd9ed80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f6bebe6b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd6d740"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f6bebe34cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd85100"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f6bebe13cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd09740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f6bebe07cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcf5100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f6bebe1fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd2f100"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f6bebe529a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd34740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f6bebe429a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd0ed10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f6bebe11cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd04100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f6bebe25cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd3d100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f6bebe8d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdbf100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f6bebe79810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd8fd10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f6bebe469a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd17740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f6bebe75810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd85100"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f6bebe4c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd25740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f6bebe3c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcffd10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f6bebe21cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd34740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f6bebe96870"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdfdd10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f6bebe83810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebda7740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f6bebe6f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd77100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f6bebe5a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd47d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f6bebe1dcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd6d740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f6bebe17cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd12100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f6bebe0bcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcf5100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f6bebe569a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd3d100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f6bebe1bcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd68100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f6bebe92810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdc9d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f6bebe7d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd99740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f6bebe69810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd68100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f6bebe23cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd39d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f6bebe0fcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcffd10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f6bebe659a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd5f9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f6bebe509a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd2f100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f6bebe409a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd09740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f6bebe8b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdbbd10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f6bebe449a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd12100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f6bebe87810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdb0100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f6bebe73810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd81d10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f6bebe5e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd51740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f6bebe4a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd20100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f6bebe3a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcfa740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f6bebea0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebdd2740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f6bebe81810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebda2100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f6bebe6d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd73d10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f6bebe589a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd42740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f6bebe2bca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd7c740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f6bebe15cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd0ed10"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f6bebe2dcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd7c740"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f6bebe549a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd39d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f6bebe09cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebcfa740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f6bebe02cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd1cd10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f6bebe369f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f6bebd8a740"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc5c610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc52610"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc52610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bebada690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f6bebc56840"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6bebb55760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f6bebc4c1a0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f6bebacbcf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f6bebb55760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6beb515490"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f6bebad4c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6bebb29cf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f6bebb221d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f6bebb54020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f6bebb54020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f6beb50e140"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f6bebac0020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f6bebbd3020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f6bebbd3020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f6bebb960f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f6beb515490"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f6beb4fae60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f6beb508b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f6beb515ce0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f6beb515ce0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f6beb4f8720"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f6beb50b690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f6bebbd3020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6beb4f5910"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f6beb500c50"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6beb500c50"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6beb4f3020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6beb4fd2b0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6beb4fd2b0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6beb4f2440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f6beb4fc5d0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6beb4fc5d0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f6bec066020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f6bec05d570"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f6bec0655a0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f6bec05c3e0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f6bec064be0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f6bec05b1f0"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f6bec0620c0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f6bec05a020"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f6bec0615a0"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f6bec05ada0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f6bec060a50"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f6bec059b80"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f6bec05e020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f6bec058a20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f6bebb93540"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f6bebbca020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f6bebbca020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f6bebbc50a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebbb62c0"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f6bebb1f490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f6bebacee80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f6beba2f6c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f6beb45cd80"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f6beb45ab60"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f6beba2d3e0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f6beb459440"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f6beb460d40"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f6beb4577a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6beb420e50"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6beb9f4020"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f6beb41f5f0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f6beb9f4780"/></to>
    </wire>
    <wire loc="87:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb41fbc0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb9f4d50"/></to>
    </wire>
    <wire loc="88:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb41e8b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb9f3990"/></to>
    </wire>
    <wire loc="90:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f6beb41d1c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f6beb426490"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f6beb426490"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc5c610"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <from><interface-ref name="stopTimerTask" scoped="" ref="0x7f6beb418c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <from><interface-ref name="timerTask" scoped="" ref="0x7f6beb418490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="TestPowerManagerC" loc="50:TestPowerManagerC.nc">
      <module/>
    </component>
    <component qname="MyComponentC" loc="48:MyComponentC.nc">
      <documentation loc="34:MyComponentC.nc">
        <short>&#10; Please refer to TEP 115 for more information about the components&#10; this application is used to test.</short>
        <long>&#10; Please refer to TEP 115 for more information about the components&#10; this application is used to test.&#10;&#10; This component is used to create a &#34;dummy&#34; non-virtualized component for use&#10; with the TestPowerManager component.  It can be powered on and off through any&#10; of the AsyncStdControl, StdControl, and SplitControl interfaces.&#10;&#10; @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10; @version  $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:25 $ &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MyComponentP" loc="47:MyComponentP.nc">
      <documentation loc="34:MyComponentP.nc">
        <short>&#10; Please refer to TEP 115 for more information about the components&#10; this application is used to test.</short>
        <long>&#10; Please refer to TEP 115 for more information about the components&#10; this application is used to test.&#10;&#10; This component is used to create a &#34;dummy&#34; non-virtualized component for use&#10; with the TestPowerManager component.  It can be powered on and off through any&#10; of the AsyncStdControl, StdControl, and SplitControl interfaces.&#10;&#10; @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10; @version  $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:25 $ &#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MyComponentC.StartTimer" loc="44(MyComponentC.StartTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MyComponentC.StopTimer" loc="44(MyComponentC.StopTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MyComponentC.Arbiter" loc="89(MyComponentC.Arbiter):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:MyComponent.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MyComponentC.Arbiter.Queue" loc="42(MyComponentC.Arbiter.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MyComponentC.Arbiter.Arbiter" loc="52(MyComponentC.Arbiter.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MyComponentC.PowerManager" loc="70(MyComponentC.PowerManager):../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlDeferredPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlDeferredPowerManagerC&#60;/code> component respectively.&#10;&#10; @param &#60;b>delay&#60;/b> -- The amount of time the power manager should wait&#10;                        before shutting down the device once it is free.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlDeferredPowerManagerC"/>
        <arguments>
          <value cst="I:750">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MyComponentC.PowerManager.TimerMilliC" loc="44(MyComponentC.PowerManager.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MyComponentC.PowerManager.PowerManager" loc="62(MyComponentC.PowerManager.PowerManager):../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the deffered power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the deffered power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to delay the power down of a device by some contant&#10; factor.  Such a policy is useful whenever a device has a long wake-up&#10; latency.  The cost of waiting for the device to power up can be&#10; avoided if the device is requested again before some predetermined&#10; amount of time.&#10;&#10; @param &#60;b>delay&#60;/b> -- The amount of time the power manager should wait&#10;                        before shutting down the device once it is free.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncDeferredPowerManagerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestPowerManagerAppC.TimerMilliC" loc="44(TestPowerManagerAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f6bec04b890" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f6bec04bc30" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f6bec04a020" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f6bec04a3a0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f6bec04a720" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f6bec04aa90" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f6bec04ae20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f6bec049200" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f6bec0495d0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f6bec00de70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f6bec00a270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f6bebdfc190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f6bebdfc540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f6bebdfc8f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f6bebdfcca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f6bebdfb060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f6bebc089c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f6bebc089c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f6bebbc4120" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f6bebbc4120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f6bebbb3a50" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f6bebbb3a50"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f6bebbaf290" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f6bebbaf290"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f6bebbaf680" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f6bebbaf680"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f6bebbafe60" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f6bebbafe60"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f6bebbae260" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f6bebbaea60" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f6bebbaea60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f6bebbd4ac0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f6bebbd4ac0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f6bebb8c2d0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f6bebb8c2d0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f6bebb8c6c0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f6bebb8c6c0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f6bebb8b020" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f6bebb8b020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f6bebb8b3f0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebb4d4f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebb4d4f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebb1cd70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebb1cd70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f6bebb190d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebac91f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebac91f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f6bebaa8020" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f6beba9baf0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f6beba7b5e0" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlDeferredPowerManagerC" loc="70:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlDeferredPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlDeferredPowerManagerC&#60;/code> component respectively.&#10;&#10; @param &#60;b>delay&#60;/b> -- The amount of time the power manager should wait&#10;                        before shutting down the device once it is free.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
        <constant name="delay" ref="0x7f6beba2aa90" loc="70:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
          <component-ref qname="AsyncStdControlDeferredPowerManagerC"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncDeferredPowerManagerP" loc="62:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the deffered power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the deffered power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to delay the power down of a device by some contant&#10; factor.  Such a policy is useful whenever a device has a long wake-up&#10; latency.  The cost of waiting for the device to power up can be&#10; avoided if the device is requested again before some predetermined&#10; amount of time.&#10;&#10; @param &#60;b>delay&#60;/b> -- The amount of time the power manager should wait&#10;                        before shutting down the device once it is free.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
        <constant name="delay" ref="0x7f6beba1a020" loc="62:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
          <component-ref qname="AsyncDeferredPowerManagerP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f6bec10b020" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f6bec10b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec10b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f6bec10a9a0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f6bec10a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f6bec10ad20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bec107020" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bec107020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec1073a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f6bec103c30" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f6bec103c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec102020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bec107e00" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bec107e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec1031c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f6bec103550" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f6bec103550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec1038d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f6bec102380" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f6bec102380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec102700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bec106b70" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bec106b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec0fc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f6bec104e70" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f6bec104e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec0d6220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f6bec0cc380" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f6bec0cc380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f6bec0d2340"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f6bec0cc890"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f6bec0cca20"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f6bec0ccbb0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f6bec0cc700"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f6bec0ccd40"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f6bec0d2020"/>
        <function-ref name="initClocks" scoped="" ref="0x7f6bec0d21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bec0d6d50" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bec0d6d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec0d3100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f6bec0bc4b0" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f6bec0bc4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f6bec0bb350"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f6bec0bc9c0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f6bec0bcb50"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f6bec0bcce0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f6bec0bc830"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f6bec0bce70"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f6bec0bb030"/>
        <function-ref name="initClocks" scoped="" ref="0x7f6bec0bb1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f6bec0bb690" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f6bec0bb690"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f6bec0bba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bec0bed60" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bec0bed60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec0bc180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f6bec0785a0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f6bec0785a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec078920"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec078ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec078c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec078dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec077020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec0771b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec077340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec0774d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec077660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f6bec066020" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f6bec066020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec0663a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec066530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec0666c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec066850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec0669e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec066b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec066d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec065020"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec0651b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f6bec06f700" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f6bec06f700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec06fa80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec06fc10"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec06fda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec06e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec06e1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec06e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f6bec053a20" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f6bec053a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec053da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec052020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec0521b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec052340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0524d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec052660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f6bec076aa0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f6bec076aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec076e20"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec075020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec0751b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec075340"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec0754d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f6bec05a020" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f6bec05a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec05a3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec05a530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec05a6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec05a850"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec05a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f6bec050a20" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f6bec050a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec050da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec04f020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec04f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec04f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec04f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec04f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f6bec0615a0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f6bec0615a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec061920"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec061ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec061c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec061dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec060020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec0601b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec060340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec0604d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec060660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f6bec079b10" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f6bec079b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec081020"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec0811b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec081340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec0814d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec081660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec0817f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec081980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec081b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec081ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f6bec056a20" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f6bec056a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec056da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec054020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec0541b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec054340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0544d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec054660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f6bec05c3e0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f6bec05c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec05c760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec05c8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec05ca80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec05cc10"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec05cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f6bec0655a0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f6bec0655a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec065a20"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec065bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec065d40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec064020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec0641b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec064340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec0644d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec064660"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec0647f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f6bec06e700" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f6bec06e700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec06ea80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec06ec10"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec06eda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec068020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0681b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec068340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f6bec052a20" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f6bec052a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec052da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec051020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec0511b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec051340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0514d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec051660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f6bec064be0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f6bec064be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec063020"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec0631b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec063340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec0634d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec063660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec0637f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec063980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec063b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec063ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f6bec075890" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f6bec075890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec075c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec075da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec070020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec0701b0"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec070340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f6bec089060" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f6bec089060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bec0893e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bec089570"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec089700"/>
        <function-ref name="get" scoped="" ref="0x7f6bec089890"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec089a20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec089bb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bec089d40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec088020"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bec0881b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bec088340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bec0884d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f6bec05ada0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f6bec05ada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec059180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec059310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec0594a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec059630"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec0597c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f6bec0800c0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f6bec0800c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec080440"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec0805d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec080760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec0808f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec080a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec080c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec080da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec078020"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec0781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f6bec060a50" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f6bec060a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec060dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec05f020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec05f1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec05f340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec05f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec05f660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec05f7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec05f980"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec05fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f6bec0696d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f6bec0696d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec069a50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec069be0"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec069d70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec06f020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec06f1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec06f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f6bec054a20" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f6bec054a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec054da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec053020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec0531b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec053340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0534d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec053660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f6bec072cf0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f6bec072cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec0760a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec076230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec0763c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec076550"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec0766e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f6bec05b1f0" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f6bec05b1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec05b570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec05b700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec05b890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec05ba20"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec05bbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f6bec051a20" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f6bec051a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec051da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec050020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec0501b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec050340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0504d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec050660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f6bec0620c0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f6bec0620c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec062440"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec0625d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec062760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec0628f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec062a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec062c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec062da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec061020"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec0611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f6bec0686c0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f6bec0686c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bec068a40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bec068bd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec068d60"/>
        <function-ref name="get" scoped="" ref="0x7f6bec067020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec0671b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec067340"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bec0674d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec067660"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bec0677f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bec067980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bec067b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f6bec059b80" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f6bec059b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec058020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec0581b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec058340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec0584d0"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec058660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f6bec057a20" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f6bec057a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec057da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bec056020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bec0561b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec056340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0564d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bec056660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f6bec058a20" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f6bec058a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec057020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec0571b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec057340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec0574d0"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec057660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f6bec05d570" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f6bec05d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bec05d8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bec05da80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bec05dc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bec05dda0"/>
        <function-ref name="fired" scoped="" ref="0x7f6bec05c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f6bec05e020" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f6bec05e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec05e3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bec05e530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec05e6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bec05e850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bec05e9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec05eb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bec05ed00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bec05d020"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bec05d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f6bec017aa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f6bec017aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec017e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f6bec017450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f6bec017450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec0177d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f6bec016120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f6bec016120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec0164a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f6bec018d80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bec018d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec017180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6bec019540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bec019540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bec0198c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bec019a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec019be0"/>
        <function-ref name="get" scoped="" ref="0x7f6bec019d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec018020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec0181b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bec018340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec0184d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bec018660"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bec0187f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bec018980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f6bec010940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f6bec010940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec010cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f6bec0102f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f6bec0102f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec010670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f6bec00f020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f6bec00f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec00f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f6bec011bf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bec011bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bec010020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6bec0123e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bec0123e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bec012760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bec0128f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bec012a80"/>
        <function-ref name="get" scoped="" ref="0x7f6bec012c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bec012da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bec011020"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bec0111b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bec011340"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bec0114d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bec011660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bec0117f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebfc4a90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebfc4a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfc4e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebfc3020"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebfc31b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfc3340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfc34d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebfc3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bec00b9d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bec00b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bec00bd50"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebfc5020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfc51b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebfc5340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebfc54d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfc5660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebfc57f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebfc5980"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebfc5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebfc0020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebfc0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebfc03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebfc5de0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebfc5de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfc4180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebfc4310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebfc44a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebfc4630"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebfc47c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebfc3930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebfc3930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebfc3cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebfc3e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfc1020"/>
        <function-ref name="get" scoped="" ref="0x7f6bebfc11b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfc1340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfc14d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebfc1660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfc17f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebfc1980"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebfc1b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebfc1ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebfbb160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebfbb160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfbb4e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebfbb670"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebfbb800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfbb990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfbbb20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebfbbcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebfbd020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebfbd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebfbd3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebfbd530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfbd6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebfbd850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebfbd9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfbdb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebfbdd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebfbc020"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebfbc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebfb97a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebfb97a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebfb9b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebfbc480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebfbc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfbc800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebfbc990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebfbcb20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebfbccb0"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebfbce40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebfba020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebfba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebfba3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebfba530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfba6c0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebfba850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfba9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfbab70"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebfbad00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfb9020"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebfb91b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebfb9340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebfb94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebfb47a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebfb47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfb4b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebfb4cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebfb4e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfb3020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfb31b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebfb3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebfb66d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebfb66d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebfb6a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebfb6be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfb6d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebfb5020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebfb51b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfb5340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebfb54d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebfb5660"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebfb57f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebfb2c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebfb2c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebfb0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebfb5ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebfb5ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfb5e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebfb4020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebfb41b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebfb4340"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebfb44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebfb3610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebfb3610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebfb3990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebfb3b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfb3cb0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebfb3e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfb2020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfb21b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebfb2340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfb24d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebfb2660"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebfb27f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebfb2980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebfaccb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebfaccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfab0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebfab230"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebfab3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfab550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfab6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebfab870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebfaeb30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebfaeb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebfad020"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebfad1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfad340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebfad4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebfad660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfad7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebfad980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebfadb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebfadca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebfa92f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebfa92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebfa9670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebfac020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebfac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfac3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebfac530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebfac6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebfac850"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebfac9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebfabb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebfabb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebfaa020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebfaa1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfaa340"/>
        <function-ref name="get" scoped="" ref="0x7f6bebfaa4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfaa660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfaa7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebfaa980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfaab10"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebfaaca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebfaae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebfa9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebfa42f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebfa42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfa4670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebfa4800"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebfa4990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfa4b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfa4cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebfa4e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebfa6220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebfa6220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebfa65a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebfa6730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfa68c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebfa6a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebfa6be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfa6d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebfa5020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebfa51b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebfa5340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebfa27a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebfa27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebfa2b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebfa5610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebfa5610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebfa5990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebfa5b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebfa5cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebfa5e40"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebfa4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebfa3160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebfa3160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebfa34e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebfa3670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebfa3800"/>
        <function-ref name="get" scoped="" ref="0x7f6bebfa3990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebfa3b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebfa3cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebfa3e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebfa2020"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebfa21b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebfa2340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebfa24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebf9c7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebf9c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf9cb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebf9ccb0"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebf9ce40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf9b020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf9b1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebf9b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebf9e6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebf9e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebf9ea50"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebf9ebe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf9ed70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebf9d020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebf9d1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf9d340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebf9d4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebf9d660"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebf9d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebf9ac50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebf9ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf99020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebf9dac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebf9dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf9de40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebf9c020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebf9c1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebf9c340"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebf9c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebf9b610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebf9b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebf9b990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebf9bb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf9bcb0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebf9be40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf9a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf9a1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebf9a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf9a4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebf9a660"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebf9a7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebf9a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebf95cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebf95cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf940a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebf94230"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebf943c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf94550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf946e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebf94870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebf97b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebf97b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebf96020"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebf961b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf96340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebf964d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebf96660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf967f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebf96980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebf96b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebf96ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebf922f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebf922f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf92670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebf95020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebf95020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf953a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebf95530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebf956c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebf95850"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebf959e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebf94b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebf94b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebf93020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebf931b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf93340"/>
        <function-ref name="get" scoped="" ref="0x7f6bebf934d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf93660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf937f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebf93980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf93b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebf93ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebf93e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebf92020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebf8c2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebf8c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf8c670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebf8c800"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebf8c990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf8cb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf8ccb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebf8ce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebf8e220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebf8e220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebf8e5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebf8e730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf8e8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebf8ea50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebf8ebe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf8ed70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebf8d020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebf8d1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebf8d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebf8a7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebf8a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf8ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebf8d610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebf8d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf8d990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebf8db20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebf8dcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebf8de40"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebf8c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebf8b160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebf8b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebf8b4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebf8b670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf8b800"/>
        <function-ref name="get" scoped="" ref="0x7f6bebf8b990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf8bb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf8bcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebf8be40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf8a020"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebf8a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebf8a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebf8a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebf857a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebf857a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf85b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebf85cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebf85e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf84020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf841b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebf84340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebf876d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebf876d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebf87a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebf87be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf87d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebf86020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebf861b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf86340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebf864d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebf86660"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebf867f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebf83c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebf83c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf82020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebf86ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebf86ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf86e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebf85020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebf851b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebf85340"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebf854d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebf84610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebf84610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebf84990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebf84b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf84cb0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebf84e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf83020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf831b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebf83340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf834d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebf83660"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebf837f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebf83980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f6bebf7dcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f6bebf7dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf7c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f6bebf7c230"/>
        <function-ref name="captured" scoped="" ref="0x7f6bebf7c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf7c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf7c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f6bebf7c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f6bebf80b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f6bebf80b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebf7e020"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebf7e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf7e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebf7e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebf7e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf7e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebf7e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebf7eb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebf7eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f6bebf7a2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f6bebf7a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf7a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f6bebf7d020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f6bebf7d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebf7d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebf7d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebf7d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebf7d850"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebf7d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f6bebf7cb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebf7cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebf7b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebf7b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebf7b340"/>
        <function-ref name="get" scoped="" ref="0x7f6bebf7b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebf7b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebf7b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebf7b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebf7bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebf7bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebf7be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebf7a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f6bebf74240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f6bebf74240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf745c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f6bebf78a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f6bebf78a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf78e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f6bebf75260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f6bebf75260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf755e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f6bebf759f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f6bebf759f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f6bebf75d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f6bec3ea4c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f6bec3ea4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f6bec3ea840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f6bec75b3b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f6bec75b3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f6bec75b730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f6bec75b8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f6bec75ba50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f6bec5c4bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f6bec5c4bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f6bec700020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f6bebf3ddc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f6bebf3ddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebf3c180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f6bebf42590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f6bebf42590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f6bebf42910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f6bebf3d6c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f6bebf3d6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebf3da40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f6bebf42c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f6bebf42c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebf3d020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f6bebf3d1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f6bebf3d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f6bec7d8410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec7d8410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6bec7d8790"/>
        <function-ref name="runTask" scoped="" ref="0x7f6bec7d8920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f6bec7693a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f6bec7693a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec769720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f6bec7698b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f6bec769a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f6bec140b70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f6bec140b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6bec13f020"/>
        <function-ref name="runTask" scoped="" ref="0x7f6bec13f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f6bec1392c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f6bec1392c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f6bec139640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f6bec1397d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f6bec139960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f6bec141c30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f6bec141c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bec140020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f6bec1401b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f6bec140340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerMilli" ref="0x7f6bebf13ab0" loc="56:TestPowerManagerC.nc">
      <component-ref qname="TestPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebf13ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebf10020"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebf1c510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebf11300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebf1ce10"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebf10920"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebf104a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebf1c990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebf1d6d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebf11910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebf1dba0"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebf1c090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f6bebf30780" loc="52:TestPowerManagerC.nc">
      <component-ref qname="TestPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f6bebf30780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f6bebf30b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource0" ref="0x7f6bebf1e540" loc="54:TestPowerManagerC.nc">
      <component-ref qname="TestPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource0" scoped="" ref="0x7f6bebf1e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6bebf1e8c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f6bebf1ea50"/>
        <function-ref name="request" scoped="" ref="0x7f6bebf1ebe0"/>
        <function-ref name="granted" scoped="" ref="0x7f6bebf1ed70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6bebf22020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f6bebf249a0" loc="53:TestPowerManagerC.nc">
      <component-ref qname="TestPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f6bebf249a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f6bebf24d20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f6bebf2f020"/>
        <function-ref name="led1On" scoped="" ref="0x7f6bebf2f1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f6bebf2f340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f6bebf2f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebf2f660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f6bebf2f7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f6bebf2fe30"/>
        <function-ref name="set" scoped="" ref="0x7f6bebf2f980"/>
        <function-ref name="led0On" scoped="" ref="0x7f6bebf2fb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f6bebf2fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource1" ref="0x7f6bebf22370" loc="55:TestPowerManagerC.nc">
      <component-ref qname="TestPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource1" scoped="" ref="0x7f6bebf22370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6bebf226f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f6bebf22880"/>
        <function-ref name="request" scoped="" ref="0x7f6bebf22a10"/>
        <function-ref name="granted" scoped="" ref="0x7f6bebf22ba0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6bebf22d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f6bebeff280" loc="50:MyComponentC.nc">
      <component-ref qname="MyComponentC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f6bebeff280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6bebeff600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f6bebeff790"/>
        <function-ref name="request" scoped="" ref="0x7f6bebeff920"/>
        <function-ref name="granted" scoped="" ref="0x7f6bebeffab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6bebeffc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f6bebef6e40" loc="49:MyComponentP.nc">
      <component-ref qname="MyComponentP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f6bebef6e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f6bebefa1e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f6bebefa370"/>
        <function-ref name="start" scoped="" ref="0x7f6bebefa500"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebefa690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StopTimer" ref="0x7f6bebeebad0" loc="56:MyComponentP.nc">
      <component-ref qname="MyComponentP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StopTimer" scoped="" ref="0x7f6bebeebad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebee6110"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebee95b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebee74a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebee7020"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebee6a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebee6590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebee9a30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebeea750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebee7ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebeeac20"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebee9130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f6bebef0c60" loc="54:MyComponentP.nc">
      <component-ref qname="MyComponentP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f6bebef0c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f6bebef9020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f6bebef91b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f6bebef9340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f6bebef94d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f6bebef9660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebef97f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f6bebef9980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f6bebef5020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebef9b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f6bebef9ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f6bebef9e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f6bebef0450" loc="51:MyComponentP.nc">
      <component-ref qname="MyComponentP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6bebef0450"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f6bebef07d0"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebef0960"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartTimer" ref="0x7f6bebef54c0" loc="55:MyComponentP.nc">
      <component-ref qname="MyComponentP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartTimer" scoped="" ref="0x7f6bebef54c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebeeca20"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebeee020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebeeeda0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebeee920"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebeeb4a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebeeb020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebeee4a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebeef0d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebeec410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebeef5a0"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebeefa70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f6bebef2230" loc="50:MyComponentP.nc">
      <component-ref qname="MyComponentP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f6bebef2230"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f6bebef25b0"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebef2740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f6bebefbca0" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f6bebefbca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f6bebed20a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f6bebed2230"/>
        <function-ref name="led1On" scoped="" ref="0x7f6bebed23c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f6bebed2550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f6bebed26e0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebed2870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f6bebed2a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f6bebed11b0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebed2b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f6bebed2d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f6bebed1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f6bebec6ce0" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f6bebec6ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebecb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebecb230"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebecb3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebecb550"/>
        <function-ref name="get" scoped="" ref="0x7f6bebecb6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebecb870"/>
        <function-ref name="set" scoped="" ref="0x7f6bebecba00"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebecbb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bebece110" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bebece110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebece490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f6bebeca020" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f6bebeca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebeca3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebeca530"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebeca6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebeca850"/>
        <function-ref name="get" scoped="" ref="0x7f6bebeca9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebecab70"/>
        <function-ref name="set" scoped="" ref="0x7f6bebecad00"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebec4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f6bebece710" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f6bebece710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f6bebecea90"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f6bebecec20"/>
        <function-ref name="led1On" scoped="" ref="0x7f6bebecedb0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f6bebecd020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f6bebecd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebecd340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f6bebecd4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f6bebecdb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebecd660"/>
        <function-ref name="led0On" scoped="" ref="0x7f6bebecd7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f6bebecd980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f6bebec4340" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f6bebec4340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebec46c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebec4850"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebec49e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebec4b70"/>
        <function-ref name="get" scoped="" ref="0x7f6bebec4d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebec3020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebec31b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebec3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f6bebecf990" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f6bebecf990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebecfd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebea8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebea81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebea8340"/>
        <function-ref name="get" scoped="" ref="0x7f6bebea84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebea8660"/>
        <function-ref name="set" scoped="" ref="0x7f6bebea87f0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebea8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f6bebea8ce0" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f6bebea8ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebea70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebea7230"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebea73c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebea7550"/>
        <function-ref name="get" scoped="" ref="0x7f6bebea76e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebea7870"/>
        <function-ref name="set" scoped="" ref="0x7f6bebea7a00"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebea7b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f6bebea52e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bebea52e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebea5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f6bebea6020" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f6bebea6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebea63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebea6530"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebea66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebea6850"/>
        <function-ref name="get" scoped="" ref="0x7f6bebea69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebea6b70"/>
        <function-ref name="set" scoped="" ref="0x7f6bebea6d00"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebea5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f6bebe8f810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f6bebe8f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe8fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe8fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe8e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe8e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe8e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe8e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe8e660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe8e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe8e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe8eb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe8eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe8ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe8d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe8d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe8d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f6bebe7b810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f6bebe7b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe7bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe7bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe7a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe7a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe7a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe7a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe7a660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe7a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe7a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe7ab10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe7aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe7ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe79020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe792b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe79440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f6bebe31ca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f6bebe31ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe300a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe30230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe303c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe30550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe306e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe30870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe30a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe30b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe30d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe2f020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe2f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe2f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe2f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe2f760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe2f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f6bebe0dcb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f6bebe0dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe0c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe0c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe0c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe0c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe0c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe0c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe0ca00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe0cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe0cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe0b020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe0b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe0b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe0b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe0b760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe0b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f6bebe2fcc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f6bebe2fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe2e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe2e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe2e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe2e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe2e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe2e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe2ea00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe2eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe2ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe2d020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe2d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe2d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe2d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe2d760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe2d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f6bebe77810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f6bebe77810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe77b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe77d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe76020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe761b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe76340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe764d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe76660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe767f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe76980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe76b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe76ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe76e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe75020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe752b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe75440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f6bebe639a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f6bebe639a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe63d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe61020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe611b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe61340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe614d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe61660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe617f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe61980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe61b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe61ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe61e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe60020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe601b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe60440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe605d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f6bebe4e9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f6bebe4e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe4ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe4d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe4d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe4d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe4d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe4d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe4d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe4d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe4db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe4dca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe4de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe4c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe4c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe4c440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe4c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f6bebe3e9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f6bebe3e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe3ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe3d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe3d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe3d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe3d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe3d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe3d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe3d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe3db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe3dca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe3de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe3c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe3c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe3c440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe3c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f6bebe29cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f6bebe29cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe280a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe28230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe283c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe28550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe286e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe28870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe28a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe28b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe28d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe27020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe271b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe27340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe274d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe27760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe278f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f6bebe19cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f6bebe19cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe180a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe18230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe183c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe18550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe186e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe18870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe18a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe18b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe18d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe17020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe171b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe17340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe174d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe17760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe178f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f6bebe05cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f6bebe05cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe030a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe03230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe033c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe03550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe036e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe03870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe03a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe03b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe03d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe02020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe021b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe02340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe024d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe02760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe028f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f6bebe89810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f6bebe89810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe89b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe89d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe88020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe881b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe88340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe884d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe88660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe887f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe88980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe88b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe88ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe88e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe87020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe872b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe87440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f6bebe27cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f6bebe27cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe260a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe26230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe263c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe26550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe266e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe26870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe26a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe26b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe26d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe25020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe251b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe25340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe254d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe25760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe258f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f6bebe85810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f6bebe85810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe85b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe85d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe84020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe84340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe844d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe84660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe847f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe84980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe84b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe84ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe84e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe83020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe832b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe83440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f6bebe71810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f6bebe71810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe71b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe71d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe70020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe701b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe70340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe704d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe70660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe707f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe70980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe70b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe70ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe70e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe6f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe6f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe6f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f6bebe5c9a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f6bebe5c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe5cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe5b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe5b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe5b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe5b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe5b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe5b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe5b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe5bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe5bca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe5be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe5a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe5a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe5a440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe5a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f6bebe489a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f6bebe489a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe48d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe47020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe471b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe47340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe474d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe47660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe477f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe47980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe47b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe47ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe47e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe46020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe461b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe46440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe465d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f6bebe389a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f6bebe389a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe38d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe37020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe371b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe37340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe374d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe37660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe377f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe37980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe37b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe37ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe37e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe36020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe361b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe36440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe365d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f6bebe94810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f6bebe94810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe94b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe94d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe93020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe931b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe93340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe934d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe93660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe937f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe93980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe93b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe93ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe93e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe92020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe922b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe92440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f6bebe7f810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f6bebe7f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe7fc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe7fe20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe7e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe7e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe7e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe7e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe7e660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe7e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe7e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe7eb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe7eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe7ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe7d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe7d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe7d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f6bebe6b810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f6bebe6b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe6bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe6bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe6a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe6a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe6a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe6a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe6a660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe6a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe6a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe6ab10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe6aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe6ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe69020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe692b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe69440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f6bebe34cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f6bebe34cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe320a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe32230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe323c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe32550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe326e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe32870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe32a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe32b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe32d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe31020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe311b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe31340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe314d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe31760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe318f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f6bebe13cb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f6bebe13cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe120a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe12230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe123c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe12550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe126e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe12870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe12a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe12b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe12d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe11020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe111b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe11340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe114d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe11760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe118f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f6bebe07cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f6bebe07cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe060a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe06230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe063c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe06550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe066e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe06870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe06a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe06b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe06d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe05020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe051b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe05340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe054d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe05760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe058f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f6bebe1fcc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f6bebe1fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe1e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe1e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe1e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe1e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe1e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe1e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe1ea00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe1eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe1ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe1d020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe1d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe1d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe1d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe1d760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe1d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f6bebe67810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f6bebe67810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe67d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe66020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe661b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe66340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe664d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe66660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe667f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe66980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe66b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe66ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe66e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe65020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe651b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe65440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe655d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f6bebe529a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f6bebe529a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe52d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe51020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe511b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe51340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe514d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe51660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe517f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe51980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe51b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe51ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe51e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe50020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe501b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe50440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe505d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f6bebe429a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f6bebe429a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe42d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe41020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe411b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe41340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe414d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe41660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe417f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe41980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe41b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe41ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe41e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe40020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe401b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe40440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe405d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f6bebe11cb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f6bebe11cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe100a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe10230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe103c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe10550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe106e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe10870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe10a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe10b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe10d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe0f020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe0f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe0f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe0f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe0f760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe0f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f6bebe25cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f6bebe25cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe240a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe24230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe243c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe24550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe246e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe24870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe24a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe24b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe24d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe23020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe231b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe23340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe234d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe23760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe238f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f6bebe8d810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f6bebe8d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe8db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe8dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe8c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe8c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe8c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe8c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe8c660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe8c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe8c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe8cb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe8cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe8ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe8b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe8b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe8b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f6bebe79810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f6bebe79810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe79b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe79d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe78020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe781b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe78340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe784d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe78660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe787f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe78980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe78b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe78ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe78e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe77020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe772b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe77440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f6bebe469a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f6bebe469a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe46d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe45020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe451b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe45340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe454d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe45660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe457f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe45980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe45b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe45ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe45e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe44020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe441b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe44440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe445d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f6bebe75810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f6bebe75810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe75b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe75d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe74020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe741b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe74340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe744d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe74660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe747f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe74980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe74b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe74ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe74e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe73020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe732b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe73440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f6bebe609a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f6bebe609a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe60d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe5f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe5f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe5f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe5f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe5f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe5f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe5f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe5fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe5fca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe5fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe5e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe5e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe5e440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe5e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f6bebe4c9a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f6bebe4c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe4cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe4b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe4b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe4b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe4b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe4b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe4b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe4b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe4bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe4bca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe4be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe4a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe4a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe4a440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe4a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f6bebe3c9a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f6bebe3c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe3cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe3b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe3b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe3b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe3b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe3b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe3b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe3b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe3bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe3bca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe3be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe3a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe3a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe3a440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe3a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f6bebe21cc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f6bebe21cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe200a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe20230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe203c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe20550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe206e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe20870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe20a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe20b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe20d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe1f020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe1f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe1f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe1f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe1f760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe1f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f6bebe96870" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f6bebe96870"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe96bf0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe96d80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebea1020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebea11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebea1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebea14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebea1660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebea17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebea1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebea1b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebea1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebea1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebea0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebea02b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebea0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f6bebe83810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f6bebe83810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe83b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe83d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe82020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe821b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe82340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe824d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe82660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe827f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe82980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe82b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe82ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe82e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe81020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe812b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe81440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f6bebe6f810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f6bebe6f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe6fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe6fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe6e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe6e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe6e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe6e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe6e660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe6e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe6e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe6eb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe6eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe6ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe6d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe6d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe6d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f6bebe5a9a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f6bebe5a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe5ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe59020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe591b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe59340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe594d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe59660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe597f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe59980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe59b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe59ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe59e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe58020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe581b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe58440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe585d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f6bebe1dcc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f6bebe1dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe1c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe1c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe1c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe1c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe1c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe1c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe1ca00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe1cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe1cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe1b020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe1b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe1b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe1b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe1b760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe1b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f6bebe17cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f6bebe17cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe160a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe16230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe163c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe16550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe166e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe16870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe16a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe16b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe16d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe15020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe151b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe15340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe154d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe15760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe158f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f6bebe0bcb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f6bebe0bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe0a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe0a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe0a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe0a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe0a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe0a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe0aa00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe0ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe0ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe09020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe091b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe09340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe094d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe09760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe098f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f6bebe569a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f6bebe569a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe56d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe55020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe551b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe55340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe554d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe55660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe557f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe55980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe55b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe55ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe55e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe54020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe541b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe54440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe545d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f6bebe1bcc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f6bebe1bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe1a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe1a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe1a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe1a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe1a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe1a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe1aa00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe1ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe1ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe19020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe191b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe19340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe194d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe19760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe198f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f6bebe92810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f6bebe92810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe92b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe92d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe90020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe901b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe90340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe904d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe90660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe907f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe90980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe90b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe90ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe90e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe8f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe8f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe8f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f6bebe7d810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f6bebe7d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe7db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe7dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe7c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe7c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe7c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe7c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe7c660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe7c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe7c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe7cb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe7cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe7ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe7b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe7b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe7b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f6bebe69810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f6bebe69810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe69b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe69d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe68020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe68340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe68660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe687f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe68980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe68b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe68ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe68e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe67020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe672b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe67440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f6bebe23cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f6bebe23cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe220a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe22230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe223c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe22550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe226e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe22870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe22a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe22b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe22d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe21020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe211b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe21340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe214d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe21760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe218f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f6bebe0fcb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f6bebe0fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe0e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe0e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe0e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe0e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe0e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe0e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe0ea00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe0eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe0ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe0d020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe0d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe0d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe0d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe0d760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe0d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f6bebe659a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f6bebe659a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe65d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe64020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe641b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe64340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe644d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe64660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe647f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe64980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe64b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe64ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe64e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe63020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe631b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe63440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe635d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f6bebe509a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f6bebe509a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe50d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe4f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe4f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe4f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe4f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe4f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe4f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe4f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe4fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe4fca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe4fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe4e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe4e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe4e440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe4e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f6bebe409a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f6bebe409a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe40d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe3f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe3f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe3f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe3f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe3f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe3f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe3f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe3fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe3fca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe3fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe3e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe3e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe3e440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe3e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f6bebe8b810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f6bebe8b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe8bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe8bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe8a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe8a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe8a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe8a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe8a660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe8a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe8a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe8ab10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe8aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe8ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe89020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe892b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe89440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f6bebe449a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f6bebe449a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe44d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe43020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe431b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe43340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe434d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe43660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe437f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe43980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe43b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe43ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe43e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe42020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe421b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe42440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe425d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f6bebe87810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f6bebe87810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe87b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe87d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe86020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe861b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe86340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe864d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe86660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe867f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe86980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe86b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe86ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe86e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe85020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe852b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe85440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f6bebe73810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f6bebe73810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe73b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe73d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe72020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe721b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe72340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe724d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe72660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe727f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe72980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe72b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe72ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe72e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe71020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe712b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe71440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f6bebe5e9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f6bebe5e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe5ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe5d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe5d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe5d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe5d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe5d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe5d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe5d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe5db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe5dca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe5de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe5c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe5c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe5c440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe5c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f6bebe4a9a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f6bebe4a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe4ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe49020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe491b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe49340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe494d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe49660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe497f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe49980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe49b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe49ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe49e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe48020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe48440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe485d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f6bebe3a9a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f6bebe3a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe3ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe39020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe391b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe39340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe394d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe39660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe397f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe39980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe39b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe39ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe39e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe38020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe381b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe38440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe385d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f6bebea0810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f6bebea0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebea0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebea0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe95020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe951b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe95340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe954d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe95660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe957f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe95980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe95b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe95ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe95e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe94020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe942b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe94440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f6bebe81810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f6bebe81810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe81b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe81d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe80020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe801b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe80340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe804d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe80660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe807f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe80980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe80b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe80ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe80e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe7f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe7f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe7f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f6bebe6d810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f6bebe6d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe6db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe6dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe6c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe6c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe6c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe6c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe6c660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe6c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe6c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe6cb10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe6cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe6ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe6b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe6b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe6b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f6bebe589a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f6bebe589a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe58d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe57020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe571b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe57340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe574d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe57660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe577f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe57980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe57b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe57ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe57e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe56020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe561b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe56440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe565d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f6bebe2bca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f6bebe2bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe2a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe2a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe2a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe2a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe2a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe2a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe2aa00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe2ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe2ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe29020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe29340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe29760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f6bebe15cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f6bebe15cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe140a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe14230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe143c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe14550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe146e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe14870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe14a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe14b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe14d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe13020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe131b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe13340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe134d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe13760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe138f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f6bebe2dcc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f6bebe2dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe2c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe2c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe2c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe2c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe2c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe2c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe2ca00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe2cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe2cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe2b020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe2b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe2b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe2b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe2b760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe2b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f6bebe549a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f6bebe549a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe54d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe53020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe531b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe53340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe534d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe53660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe537f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe53980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe53b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe53ca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe53e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe52020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe521b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe52440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe525d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f6bebe09cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f6bebe09cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe080a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe08230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe083c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe08550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe086e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe08870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe08a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe08b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe08d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe07020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe071b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe07340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe074d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe07760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe078f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f6bebe02cc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f6bebe02cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe010a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe01230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe013c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe01550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe016e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe01870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe01a00"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe01b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe01d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe00020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe001b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe00340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe004d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe00760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe008f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f6bebe369f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f6bebe369f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebe351c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebe35350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebe354e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebe35670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebe35800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebe35990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebe35b20"/>
        <function-ref name="get" scoped="" ref="0x7f6bebe35cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebe35e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebe34020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebe341b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebe34340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebe344d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebe34760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebe348f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdfdd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdfdd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdd60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdd6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdd6400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdd6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdd6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdd68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdd6a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdd6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdd6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdd5020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdd51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdd5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdd54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdd5760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdd58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdd2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdd2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdd2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdd2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdd2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdd1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdd11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdd1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdd14d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdd1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdd17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdd1980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdd1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdd1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdd1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdd0120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdd02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdcd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdcd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdcd480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdcd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdcd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdcd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdcdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdcdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdcdde0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdcc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdcc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdcc340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdcc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdcc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdcc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdcca80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdccc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdc9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdc9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdc80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdc8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdc8400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdc8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdc8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdc88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdc8a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdc8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdc8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdc7020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdc71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdc7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdc74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdc7760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdc78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdc4740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdc4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdc4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdc4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdc4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdc3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdc31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdc3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdc34d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdc3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdc37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdc3980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdc3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdc3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdc3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdc2120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdc22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdbf100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdbf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdbf480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdbf610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdbf7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdbf930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdbfac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdbfc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdbfde0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdbe020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdbe1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdbe340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdbe4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdbe660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdbe7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdbea80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdbec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdbbd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdbbd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdb90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdb9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdb9400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdb9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdb9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdb98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdb9a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdb9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdb9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdb8020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdb81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdb8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdb84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdb8760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdb88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdb5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdb5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdb5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdb5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdb5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdb4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdb41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdb4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdb44d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdb4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdb47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdb4980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdb4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdb4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdb4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdb3120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdb32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdb0100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdb0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdb0480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdb0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdb07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdb0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdb0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdb0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdb0de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdaf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdaf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdaf340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdaf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdaf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdaf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdafa80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdafc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebdacd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebdacd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebdab0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebdab270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebdab400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebdab590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebdab720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebdab8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebdaba40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebdabbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebdabd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebdaa020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebdaa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebdaa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebdaa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebdaa760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebdaa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebda7740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebda7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebda7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebda7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebda7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebda6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebda61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebda6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebda64d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebda6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebda67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebda6980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebda6b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebda6ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebda6e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebda5120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebda52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebda2100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebda2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebda2480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebda2610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebda27a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebda2930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebda2ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebda2c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebda2de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebda1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebda11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebda1340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebda14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebda1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebda17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebda1a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebda1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd9ed80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd9ed80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd9d180"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd9d310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd9d4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd9d630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd9d7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd9d950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd9dae0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd9dc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd9de00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd9c020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd9c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd9c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd9c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd9c760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd9c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd99740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd99740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd99ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd99c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd99de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd98020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd981b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd98340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd984d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd98660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd987f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd98980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd98b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd98ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd98e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd97120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd972b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd93100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd93100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd93480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd93610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd937a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd93930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd93ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd93c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd93de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd92020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd921b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd92340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd924d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd92660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd927f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd92a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd92c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd8fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd8fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd8e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd8e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd8e400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd8e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd8e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd8e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd8ea40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd8ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd8ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd8d020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd8d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd8d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd8d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd8d760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd8d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd8a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd8a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd8aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd8ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd8ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd89020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd891b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd89340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd894d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd89660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd897f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd89980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd89b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd89ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd89e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd88120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd882b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd85100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd85100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd85480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd85610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd857a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd85930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd85ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd85c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd85de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd84020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd841b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd84340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd844d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd84660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd847f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd84a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd84c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd81d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd81d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd800e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd80270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd80400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd80590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd80720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd808b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd80a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd80bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd80d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd7f020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd7f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd7f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd7f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd7f760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd7f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd7c740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd7c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd7cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd7cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd7cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd7b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd7b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd7b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd7b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd7b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd7b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd7b980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd7bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd7bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd7be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd7a120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd7a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd77100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd77100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd77480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd77610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd777a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd77930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd77ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd77c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd77de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd76020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd761b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd76340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd764d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd76660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd767f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd76a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd76c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd73d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd73d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd710e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd71270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd71400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd71590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd71720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd718b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd71a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd71bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd71d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd70020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd701b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd70340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd704d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd70760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd708f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd6d740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd6d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd6dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd6dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd6dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd6c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd6c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd6c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd6c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd6c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd6c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd6c980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd6cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd6cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd6ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd6b120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd6b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd68100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd68100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd68480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd68610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd687a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd68930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd68ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd68c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd68de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd67020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd671b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd67340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd674d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd67660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd677f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd67a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd67c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd64e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd64e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd63210"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd633a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd63530"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd636c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd63850"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd639e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd63b70"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd63d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd62020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd621b0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd62340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd624d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd62660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd628f0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd62a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd5f9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd5f9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd5fd70"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd5e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd5e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd5e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd5e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd5e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd5e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd5e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd5eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd5eca0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd5ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd5d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd5d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd5d440"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd5d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd5a460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd5a460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd5a7e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd5a970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd5ab00"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd5ac90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd5ae20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd59020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd591b0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd59340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd594d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd59660"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd597f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd59980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd59b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd59da0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd58020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd56e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd56e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd551c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd55350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd554e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd55670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd55800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd55990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd55b20"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd55cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd55e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd54020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd541b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd54340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd544d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd54760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd548f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd51740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd51740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd51ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd51c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd51de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd50020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd501b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd50340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd504d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd50660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd507f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd50980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd50b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd50ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd50e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd4f120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd4f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd4c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd4c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd4c480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd4c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd4c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd4c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd4cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd4cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd4cde0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd4a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd4a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd4a340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd4a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd4a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd4a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd4aa80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd4ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd47d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd47d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd460e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd46270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd46400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd46590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd46720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd468b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd46a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd46bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd46d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd45020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd451b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd45340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd454d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd45760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd458f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd42740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd42740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd42ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd42c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd42de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd41020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd411b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd41340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd414d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd41660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd417f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd41980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd41b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd41ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd41e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd40120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd402b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd3d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd3d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd3d480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd3d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd3d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd3d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd3dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd3dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd3dde0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd3c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd3c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd3c340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd3c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd3c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd3c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd3ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd3cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd39d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd39d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd380e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd38270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd38400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd38590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd38720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd388b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd38a40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd38bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd38d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd37020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd371b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd37340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd374d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd37760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd378f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd34740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd34740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd34ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd34c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd34de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd33020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd331b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd33340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd334d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd33660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd337f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd33980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd33b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd33ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd33e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd32120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd322b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd2f100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd2f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd2f480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd2f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd2f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd2f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd2fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd2fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd2fde0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd2e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd2e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd2e340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd2e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd2e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd2e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd2ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd2ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd2bd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd2bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd2a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd2a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd2a400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd2a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd2a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd2a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd2aa40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd2abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd2ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd29020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd29340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd29760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd25740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd25740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd25ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd25c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd25de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd24020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd241b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd24340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd244d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd24660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd247f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd24980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd24b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd24ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd24e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd23120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd232b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd20100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd20100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd20480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd20610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd207a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd20930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd20ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd20c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd20de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd1f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd1f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd1f340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd1f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd1f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd1f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd1fa80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd1fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd1cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd1cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd1b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd1b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd1b400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd1b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd1b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd1b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd1ba40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd1bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd1bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd1a020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd1a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd1a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd1a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd1a760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd1a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd17740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd17740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd17ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd17c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd17de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd16020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd161b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd16340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd164d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd16660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd167f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd16980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd16b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd16ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd16e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd15120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd152b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd12100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd12100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd12480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd12610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd127a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd12930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd12ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd12c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd12de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd11020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd111b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd11340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd114d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd11660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd117f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd11a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd11c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd0ed10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd0ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd0d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd0d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd0d400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd0d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd0d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd0d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd0da40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd0dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd0dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd0c020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd0c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd0c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd0c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd0c760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd0c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd09740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd09740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd09ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd09c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd09de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd08020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd081b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd08340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd084d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd08660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd087f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd08980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd08b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd08ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd08e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd07120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd072b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebd04100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebd04100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebd04480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebd04610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebd047a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebd04930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebd04ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebd04c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebd04de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebd02020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebd021b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebd02340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebd024d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebd02660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebd027f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebd02a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebd02c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebcffd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebcffd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebcfe0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebcfe270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebcfe400"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebcfe590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebcfe720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebcfe8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebcfea40"/>
        <function-ref name="get" scoped="" ref="0x7f6bebcfebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebcfed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebcfd020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebcfd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebcfd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebcfd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebcfd760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebcfd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebcfa740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebcfa740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebcfaac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebcfac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebcfade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebcf9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebcf91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebcf9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebcf94d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebcf9660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebcf97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebcf9980"/>
        <function-ref name="set" scoped="" ref="0x7f6bebcf9b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebcf9ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebcf9e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebcf8120"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebcf82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f6bebcf5100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f6bebcf5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebcf5480"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebcf5610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebcf57a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebcf5930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebcf5ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebcf5c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebcf5de0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebcf4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebcf41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebcf4340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebcf44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebcf4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebcf47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebcf4a80"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebcf4c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f6bebc7d2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f6bebc7d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebc7d670"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebc7d800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebc7d990"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebc7db20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebc7dcb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebc7de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebc7c020"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc7c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebc7c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebc7c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebc7c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebc7c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebc7c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebc7cc10"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebc7cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f6bebc8e020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f6bebc8e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebc8e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebc8e530"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebc8e6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebc8e850"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc8e9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebc8eb70"/>
        <function-ref name="set" scoped="" ref="0x7f6bebc8ed00"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebc7d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f6bebc79de0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f6bebc79de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebc78180"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebc78310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebc784a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebc78630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebc787c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebc78950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebc78ae0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc78c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebc78e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebc77020"/>
        <function-ref name="set" scoped="" ref="0x7f6bebc771b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebc77340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebc774d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebc77760"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebc778f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f6bebc7ab90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f6bebc7ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebc79020"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebc791b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebc79340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebc794d0"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc79660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebc797f0"/>
        <function-ref name="set" scoped="" ref="0x7f6bebc79980"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebc79b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f6bebc74930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f6bebc74930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebc74cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebc74e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f6bebc72020"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebc721b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebc72340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f6bebc724d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebc72660"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc727f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f6bebc72980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f6bebc72b10"/>
        <function-ref name="set" scoped="" ref="0x7f6bebc72ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f6bebc72e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f6bebc71020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f6bebc712b0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebc71440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f6bebc75710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f6bebc75710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f6bebc75a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f6bebc75c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f6bebc75db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f6bebc74020"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc741b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f6bebc74340"/>
        <function-ref name="set" scoped="" ref="0x7f6bebc744d0"/>
        <function-ref name="clr" scoped="" ref="0x7f6bebc74660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6bebc65640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MyComponentC.StartTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebc65640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebab5c40"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebab61e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebab5020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebab6ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebab4590"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebab4110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebab6660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebab8390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebab5630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebab8860"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebab8d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f6bebc5c610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc5c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebc59c40"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebc5a1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebc59020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebc5aae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebc57590"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebc57110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebc5a660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebc5b390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebc59630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebc5b860"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebc5bd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f6bebc52610" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f6bebc52610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebc4fc40"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebc501e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebc4f020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebc50ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebc4e590"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebc4e110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebc50660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebc51390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebc4f630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebc51860"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebc51d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f6bebc4c1a0" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f6bebc4c1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebc4cdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bebc56840" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bebc56840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebc56bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f6bebb54020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f6bebb54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebb51870"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebb53840"/>
        <function-ref name="startAt" scoped="" ref="0x7f6bebb51220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebb53d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f6bebb51d30"/>
        <function-ref name="start" scoped="" ref="0x7f6bebb54e30"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebb53380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6bebb55760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6bebb55760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6bebb55ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f6beb515ce0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f6beb515ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb512670"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb513550"/>
        <function-ref name="startAt" scoped="" ref="0x7f6beb512020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb513a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f6beb512b30"/>
        <function-ref name="start" scoped="" ref="0x7f6beb514b60"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb513090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6beb515490" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6beb515490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6beb515810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f6beb4fc5d0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f6beb4fc5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6beb4fc950"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6beb4fcae0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6beb4fcc70"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6beb4fce00"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb4fb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f6beb500c50" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f6beb500c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6beb4fe020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6beb4fe1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6beb4fe340"/>
        <function-ref name="get" scoped="" ref="0x7f6beb4fe4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6beb4fe660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6beb4fe7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6beb4fe980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6beb4feb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f6beb4feca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6beb4fee30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6beb4fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f6beb4fd2b0" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6beb4fd2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6beb4fd630"/>
        <function-ref name="getControl" scoped="" ref="0x7f6beb4fd7c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6beb4fd950"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6beb4fdae0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6beb4fdc70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6beb4fde00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6beb4fc020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6beb4fc1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f6beb4fc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f6bebc26210" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f6bebc26210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6bebc26590"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6bebc26720"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6bebc268b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6bebc26a40"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebc26bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f6bebc2dbf0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebc2dbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebc2a020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebc2a1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebc2a340"/>
        <function-ref name="get" scoped="" ref="0x7f6bebc2a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebc2a660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebc2a7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebc2a980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebc2ab10"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebc2aca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebc2ae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebc29020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f6bebc298b0" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6bebc298b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6bebc29c30"/>
        <function-ref name="getControl" scoped="" ref="0x7f6bebc29dc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebc27020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6bebc271b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6bebc27340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebc274d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6bebc27660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6bebc277f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f6bebc27980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f6beb4f2440" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f6beb4f2440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f6beb4f27c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f6beb4f2950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f6beb4f2ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f6beb4f2c70"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb4f2e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f6beb4f5910" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f6beb4f5910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6beb4f5c90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6beb4f5e20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6beb4f4020"/>
        <function-ref name="get" scoped="" ref="0x7f6beb4f41b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6beb4f4340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6beb4f44d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f6beb4f4660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6beb4f47f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6beb4f4980"/>
        <function-ref name="setMode" scoped="" ref="0x7f6beb4f4b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6beb4f4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f6beb4f8720" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f6beb4f8720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb4f5020"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb4f6020"/>
        <function-ref name="startAt" scoped="" ref="0x7f6beb4f69a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb4f64e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f6beb4f54e0"/>
        <function-ref name="start" scoped="" ref="0x7f6beb4f75b0"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb4f7ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6beb4fae60" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6beb4fae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6beb4f8210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f6beb4f3020" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f6beb4f3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f6beb4f33a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f6beb4f3530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6beb4f36c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f6beb4f3850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f6beb4f39e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6beb4f3b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f6beb4f3d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f6beb4f2020"/>
        <function-ref name="setControl" scoped="" ref="0x7f6beb4f21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f6bebbd3020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f6bebbd3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebbd3e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebbd2800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebbd2340"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebbd2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f6bebbca020" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f6bebbca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebbcae30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebbc9800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebbc9340"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebbc9cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f6bebbb62c0" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f6bebbb62c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f6bebbb6640"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f6bebbb67d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f6bebbb6960"/>
        <function-ref name="get" scoped="" ref="0x7f6bebbb6af0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f6bebbb6c80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebbb6e10"/>
        <function-ref name="getMode" scoped="" ref="0x7f6bebbb5020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebbb51b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebbb5340"/>
        <function-ref name="setMode" scoped="" ref="0x7f6bebbb54d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f6bebbb5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f6bebbc50a0" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f6bebbc50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebbb8020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebbb89a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebbb84e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebbb8e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f6bebb93540" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f6bebb93540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebb923d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebb92d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebb92890"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebb91260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f6bebb960f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f6bebb960f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebb95020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebb959a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebb954e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebb95e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f6beb50e140" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f6beb50e140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb50cb30"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb50d9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f6beb50c4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb50c020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f6beb50b020"/>
        <function-ref name="start" scoped="" ref="0x7f6beb50d020"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb50d530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f6beb508b90" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f6beb508b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31830"/>
            <typename><typedef-ref name="T32khz" ref="0x7f6bebf31ba0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb5054e0"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb5064e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f6beb506e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb5069a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f6beb5059a0"/>
        <function-ref name="start" scoped="" ref="0x7f6beb5079d0"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb506020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f6beb50b690" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f6beb50b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6beb50a5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6beb508020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6beb50aa70"/>
        <function-ref name="overflow" scoped="" ref="0x7f6beb5084e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f6bebb1f490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f6bebb1f490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6bebb1f810"/>
        <function-ref name="runTask" scoped="" ref="0x7f6bebb1f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f6bebb221d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f6bebb221d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebb20b30"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebb219f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f6bebb204e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebb20020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f6bebb1f020"/>
        <function-ref name="start" scoped="" ref="0x7f6bebb21020"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebb21530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6bebb29cf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebb29cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebb24220"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebb267c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebb25590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebb25110"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebb24b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebb246a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebb26c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebb27940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebb25ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebb27e10"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebb26340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f6bebacee80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f6bebacee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6bebacd220"/>
        <function-ref name="runTask" scoped="" ref="0x7f6bebacd3b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f6bebad4c30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f6bebad4c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebace110"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebad16a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebad04a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebad0020"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebacea10"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebace590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebad1b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebad2860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebad0ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebad2d30"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebad1220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6bebada690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebada690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebad5cf0"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebad7260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebad5090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebad7ba0"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebad4680"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebad41e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebad7700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebad8390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebad56c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebad8880"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebad8d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f6bebacbcf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f6bebacbcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebaca980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f6bebac0020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f6bebac0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f6bebac0e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f6bebabf800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f6bebabf340"/>
        <function-ref name="overflow" scoped="" ref="0x7f6bebabfcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6bebab2060" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MyComponentC.StopTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6bebab2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6bebaae630"/>
        <function-ref name="fired" scoped="" ref="0x7f6bebab1ac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6bebaaf920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6bebaaf4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f6bebaad020"/>
        <function-ref name="gett0" scoped="" ref="0x7f6bebaaeab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6bebaaf020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6bebab2c50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6bebaae020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6bebab1170"/>
        <function-ref name="stop" scoped="" ref="0x7f6bebab1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f6beba2f6c0" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="MyComponentC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f6beba2f6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f6beba2fa60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f6beba2fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f6beba2d3e0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="MyComponentC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f6beba2d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f6beba2d780"/>
        <function-ref name="configure" scoped="" ref="0x7f6beba2d910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f6beba2fe40" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="MyComponentC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beba2fe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6beba2e1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f6beba2e370"/>
        <function-ref name="granted" scoped="" ref="0x7f6beba2e500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6beba2e690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f6beba2e820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f6beba307e0" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="MyComponentC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f6beba307e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6beba30b80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f6beba30d10"/>
        <function-ref name="request" scoped="" ref="0x7f6beba2f020"/>
        <function-ref name="granted" scoped="" ref="0x7f6beba2f1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6beba2f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f6beba2ea70" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="MyComponentC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beba2ea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f6beba2edf0"/>
        <function-ref name="userId" scoped="" ref="0x7f6beba2d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f6beb460730" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="MyComponentC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f6beb460730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f6beb460ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f6beb460d40" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="MyComponentC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f6beb460d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f6beb45f0e0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f6beb45f270"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f6beb45f400"/>
        <function-ref name="dequeue" scoped="" ref="0x7f6beb45f590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f6beb45cd80" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f6beb45cd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f6beb45b180"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f6beb45b310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f6beb45ab60" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f6beb45ab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f6beb459020"/>
        <function-ref name="configure" scoped="" ref="0x7f6beb4591b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f6beb459440" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f6beb459440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f6beb4597c0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f6beb459950"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f6beb459ae0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f6beb459c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f6beb45b560" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb45b560"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6beb45b8e0"/>
        <function-ref name="requested" scoped="" ref="0x7f6beb45ba70"/>
        <function-ref name="granted" scoped="" ref="0x7f6beb45bc00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6beb45bd90"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f6beb45a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f6beb458020" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f6beb458020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f6beb4583a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f6beb458530"/>
        <function-ref name="led1On" scoped="" ref="0x7f6beb4586c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f6beb458850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f6beb4589e0"/>
        <function-ref name="get" scoped="" ref="0x7f6beb458b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f6beb458d00"/>
        <function-ref name="led0On" scoped="" ref="0x7f6beb4574d0"/>
        <function-ref name="set" scoped="" ref="0x7f6beb4571b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f6beb457020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f6beb457340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f6beb45c020" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f6beb45c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6beb45c3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f6beb45c550"/>
        <function-ref name="request" scoped="" ref="0x7f6beb45c6e0"/>
        <function-ref name="granted" scoped="" ref="0x7f6beb45c870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6beb45ca00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f6beb45a270" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb45a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f6beb45a5f0"/>
        <function-ref name="userId" scoped="" ref="0x7f6beb45a780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f6beb4577a0" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="MyComponentC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f6beb4577a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6beb457b20"/>
        <function-ref name="runTask" scoped="" ref="0x7f6beb457cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f6beb9f4780" loc="75:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <component-ref qname="MyComponentC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f6beb9f4780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f6beb9f4b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f6beb9f4d50" loc="76:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <component-ref qname="MyComponentC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb9f4d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6beb9f3100"/>
        <function-ref name="requested" scoped="" ref="0x7f6beb9f3290"/>
        <function-ref name="granted" scoped="" ref="0x7f6beb9f3420"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6beb9f35b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f6beb9f3740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f6beb9f4020" loc="73:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <component-ref qname="MyComponentC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6beb9f4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f6beb9f43a0"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb9f4530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f6beb9f3990" loc="77:../../../tos/lib/power/AsyncStdControlDeferredPowerManagerC.nc">
      <component-ref qname="MyComponentC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb9f3990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f6beb9f3d10"/>
        <function-ref name="userId" scoped="" ref="0x7f6beb9f2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6beb426490" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MyComponentC.PowerManager.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6beb426490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb423a20"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb424020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6beb424da0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6beb424920"/>
        <function-ref name="getdt" scoped="" ref="0x7f6beb4224a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f6beb422020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb4244a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6beb4250d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6beb423410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6beb4255a0"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb425a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerMilli" ref="0x7f6beb41d1c0" loc="69:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f6beb41d1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb419630"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb41cc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6beb41b9d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6beb41b550"/>
        <function-ref name="getdt" scoped="" ref="0x7f6beb418020"/>
        <function-ref name="gett0" scoped="" ref="0x7f6beb419ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb41b0d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6beb41ddb0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6beb419020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6beb41c2e0"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb41c7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f6beb41f5f0" loc="66:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f6beb41f5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f6beb41f970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTimerTask" ref="0x7f6beb418c70" loc="76:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopTimerTask" scoped="" ref="0x7f6beb418c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6beb417020"/>
        <function-ref name="runTask" scoped="" ref="0x7f6beb4171b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="timerTask" ref="0x7f6beb418490" loc="81:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="timerTask" scoped="" ref="0x7f6beb418490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f6beb418810"/>
        <function-ref name="runTask" scoped="" ref="0x7f6beb4189a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f6beb41fbc0" loc="67:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f6beb41fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f6beb41e020"/>
        <function-ref name="requested" scoped="" ref="0x7f6beb41e1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f6beb41e340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f6beb41e4d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f6beb41e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f6beb420e50" loc="64:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f6beb420e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f6beb41f210"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb41f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f6beb41e8b0" loc="68:../../../tos/lib/power/AsyncDeferredPowerManagerP.nc">
      <component-ref qname="MyComponentC.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f6beb41e8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f6beb41ec30"/>
        <function-ref name="userId" scoped="" ref="0x7f6beb41edc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f6beb9eb140" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestPowerManagerAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f6beb9eb140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f6bebf31080"/>
            <typename><typedef-ref name="TMilli" ref="0x7f6bebf313f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f6beb9e8630"/>
        <function-ref name="fired" scoped="" ref="0x7f6beb9eab70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f6beb9e9920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f6beb9e94a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f6beb9e6020"/>
        <function-ref name="gett0" scoped="" ref="0x7f6beb9e8ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f6beb9e9020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f6beb9ebd30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f6beb9e8020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f6beb9ea220"/>
        <function-ref name="stop" scoped="" ref="0x7f6beb9ea6f0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f6bec10ca00" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f6bec10a5d0" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f6bec0cc0e0" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f6bec0cf350" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f6bec0ce990" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f6bec0d0bf0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f6bec0cfac0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f6bec0d3df0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f6bec0d0510" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f6bec0ce270" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f6bec3ea020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f6bec6ab3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f6bec07b020" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f6bec07ccc0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f6bec07f390" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f6bec0c5b60"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f6bec0c4650"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f6bec07b890" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f6bec0797b0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f6bec07c560" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f6bec079020" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f6bec07fb30" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f6bec07d350" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f6bec07dda0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f6bec0c5b60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f6bec0c4650"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f6bec07db20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f6bec0c5b60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f6bec0c4650"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f6bec06d0e0" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f6bec06b730" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f6bec06b4b0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f6bec0692e0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f6bec069060" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f6bec06cca0" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f6bec06c3e0" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f6bec06da90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f6bec06d810" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f6bec0743e0" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f6bec074d60" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f6bec074ae0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f6bec073790" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f6bec073510" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f6bec0722a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f6bec072020" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f6bec072990" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f6bec084960" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f6bec0822a0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f6bec082020" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f6bec0830e0" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f6bec08ab50" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f6bec083820" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f6bec087a90" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f6bec084270" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f6bec087350" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f6bec0861f0" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f6bec086b00" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f6bec086880" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f6bec082cb0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f6bec082a30" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f6bed144520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f6bec0441f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f6bec13c7f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f6bec139020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f6bec13c020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f6bec5c4810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f6bec76a020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f6bec769020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f6bec76a790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f6bec75e270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f6bec75eac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebf217e0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebf217e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f6bebf144a0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f6bebf19da0" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f6bebf17b70" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f6bebf175a0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f6bebf178e0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f6bebf18dc0" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f6bebf13500" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f6bebf14c30" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f6bebf185d0" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f6bebf1b390" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f6bebf1b110" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f6bebf15b20" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f6bebf15550" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f6bebf15890" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f6bebf1be50" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f6bebf1bbd0" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f6bebf19690" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f6bebf1f660" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f6bebf20660" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f6bebf2ecc0" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f6bebf20e50" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f6bebf1e0e0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f6bebf2aa00" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f6bebf291f0" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f6bebf299d0" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f6bebf27940" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f6bebf25120" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f6bebf25930" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f6bebf27190" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f6bebf244c0" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f6bebf24240" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f6bebf2a270" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f6bebf26190" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f6bebf26920" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f6bebef7460" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f6bebef71e0" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f6bebef6ab0" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f6bebef6830" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f6bebef87b0" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f6bebef7cb0" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f6bebef17b0" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f6bebef0030" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f6bebef4570" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f6bebef4d80" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f6bebec7390" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f6bebec7ac0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f6bebec8540" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f6bebec69b0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f6bebec8c40" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f6bebec6270" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f6bebecc750" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f6bebecce20" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f6bebe9c7c0" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f6bebe9b020" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f6bebe97b10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f6bebe97890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f6bebe9d020" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f6bebe99020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f6bebe96490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f6bebe9b760" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f6bebe9c020" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f6bebe98770" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f6bebe9d7c0" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f6bebe9e020" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f6bebe997a0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f6bebe97020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f6bebe98020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f6bebe9e750" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebc4a350" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebc4a350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f6bebc4ac70" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f6bed144920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebc47c70" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebc47c70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f6bebc43020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f6bebc40c50" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f6bebc42ba0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f6bebc402b0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f6bebc41bd0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f6bebc40020" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f6bebc413b0" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f6bebc3e480" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f6bebc43b80" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f6bebc43900" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebc43020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f6bebc423e0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f6bebbd14f0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f6bebbd14f0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f6bebbd1730" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebbd1730"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f6bebbd0070" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f6bebbd1730"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f6bebbcf190" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f6bebbd08f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f6bebbcf8f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f6bebaa4390" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f6bebaa4cc0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f6beba9a510" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f6bebaa2cb0" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f6bebaa13b0" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f6beba9f480" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f6bebaa6b00" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f6bebaa1c20" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f6beba9fdb0" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f6bebaa5b30" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f6beba9c3b0" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f6bed144160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f6beba90540" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f6bec765c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f6beba9b5d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f6beba902c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f6beba9b5d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f6beba93560" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f6beba920b0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f6bec76e090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f6beba9b5d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f6beba93de0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f6beba9b5d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f6beba929c0" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f6beba9b5d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f6beba24470" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
