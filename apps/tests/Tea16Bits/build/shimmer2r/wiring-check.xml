<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="55:Tea16BitsAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f44abe076e0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f44aceebde0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f44aceebde0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f44acd14590"/></to>
    </wire>
    <wire loc="56:Tea16BitsAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44abe07e50"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44abdf21e0"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44abdf21e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0c8020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:Tea16BitsAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44abe010f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44ac661020"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44ac661020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44ac65da70"/></to>
    </wire>
    <wire loc="58:Tea16BitsAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f44abe00940"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f44ac3ece00"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer/DemoSensorC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f44ac3ece00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f44ab781020"/></to>
    </wire>
    <wire loc="59:Tea16BitsAppC.nc">
      <from><interface-ref name="TEA" scoped="" ref="0x7f44abdfd020"/></from>
      <to><interface-ref name="TEA" scoped="" ref="0x7f44ac3e6bc0"/></to>
    </wire>
    <wire loc="6:../../../tos/platforms/shimmer2r/TEAC.nc">
      <from><interface-ref name="TEA" scoped="" ref="0x7f44ac3e6bc0"/></from>
      <to><interface-ref name="TEA" scoped="" ref="0x7f44ac3e42b0"/></to>
    </wire>
    <wire loc="37:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44abef1bc0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ac0c3e50"/></to>
    </wire>
    <wire loc="96:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ab737060"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ac30e660"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ac3fa020"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ab7cec00"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44acbef540"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ac428a60"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f44acd14c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f44ad5a73a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f44ad5a73a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f44acf7fc30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f44acd136c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44acee92f0"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44acee92f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44acee3110"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acd13dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f44acee3820"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f44acee4500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f44acee4500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44aceac440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f44acee2020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44aced3080"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f44acee2700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ac6342e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44aceac440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ace923c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f44acea29e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f44ace92a70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f44ad2284c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f44ace91cc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f44ace4ea50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd8c6d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f44ace3c410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd84b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f44ace45d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd91160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f44ace28020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd6bcb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f44ace4a020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd92480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f44ace30570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd6b020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f44ace25020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd53cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f44ace37a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd64220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f44ace55020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acde19d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f44ace2a020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd7a2f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f44ace32890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd7b610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f44ace3b8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd7c220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f44ace44c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd8a7a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f44ace27020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd622f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f44ace39020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd746d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f44ace4ada0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd8bac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f44ace577b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acdef540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f44ace2f3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd63610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f44ace545a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd93020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f44ace35020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd5d6d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f44ace3fdc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd9aa90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f44ace29020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd727a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f44ace4b140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd9bde0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f44ace31700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd73ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f44ace26020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd5b7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f44ace385a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd6db30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f44ace2e1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd5cac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f44ace2b020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f44acd82cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f44ace2d020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd53020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f44ace33a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f44acd82020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f44ace345a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f44acd55b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f44acded450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acdeed80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f44acdedaa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f44acd4ea90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f44acdec120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f44acd4b260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd99930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acdef540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd96020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acdeed80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd90020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acdef540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd8f7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acdeed80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd89610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acdef540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd87c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acdeed80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f44acde62f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f44acde6940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f44acd4b9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f44acde5020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f44acd4a240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd81b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd7f2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd79160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd787a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd71610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd70c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd6ab40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd682f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd61160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd607a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd5a610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd59c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44acd52b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f44acd502f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44acf7eb70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f44acf772c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f44ad5993b0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f44ac421a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f44ac451bf0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f44ac41e440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f44ac458020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f44ac458020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f44abc67210"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f44ac41d0c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f44ac458c30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f44ac458c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f44acc5d7e0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f44ac400be0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f44ac4211a0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f44acc5d7e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f44acbf5d60"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f44ac4568b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f44acc5b470"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f44acc5b470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f44acbf66c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f44ac454020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f44acc59b20"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f44acc59b20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f44acbf3a10"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f44abc67e80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f44accbbce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f44abc66ab0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f44acc5b470"/></to>
    </wire>
    <wire loc="54:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f44accbbce0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f44acc6f580"/></to>
    </wire>
    <wire loc="55:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f44acc6e400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f44acc643f0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f44acc643f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f44acc4b300"/></to>
    </wire>
    <wire loc="56:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f44acc6d060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f44acc5b470"/></to>
    </wire>
    <wire loc="57:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f44acc6c720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f44acc5d7e0"/></to>
    </wire>
    <wire loc="169:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f44acc6b480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f44acc6bc60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f44acc603b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f44acbefb90"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f44acbefb90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f44acbddc40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f44acc5d1d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f44acbf60d0"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44acbef540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44acbdd5f0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44acbe92b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44acc4c330"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f44acbf24a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f44acbeb790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f44acbf1120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f44acbecc60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f44acbe4970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f44ac46fa30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f44acbeb790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f44acaabde0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f44acbecc60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f44acaab6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f44acaaac20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f44acbe4970"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44acbd5760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44acbe92b0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44acaa8920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44acbe92b0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44aca9ecc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44acbe92b0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f44acaa9590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f44acbd1530"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f44acaa9e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f44acbd6a40"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f44acbcc7e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f44acaa4e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f44acbc7780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f44aca780c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f44aca780c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f44ac4840c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f44aca94d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f44aca788d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f44aca788d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f44ac48a440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f44acb746e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f44acbac4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f44acb78c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f44acb71a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f44acaa6020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f44acaa6800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f44aca76020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f44ac489440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f44ac489440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f44aca0ed00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f44ac48a440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f44aca0f670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac488020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac484920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ac483020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac48b020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ac48b020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44aca15c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac48bc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f44abba5a90"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f44abba5a90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac5e72c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44aca081d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac488020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44abb96020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44aca0c8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f44aca0ae50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44abba6e00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44abba6e00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac5e8020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f44aca04710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f44abb9e440"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f44abb9e440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f44ac5eb4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44aca0c8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac978dc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f44aca0ed00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f44ac976890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f44aca0f670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f44ac9776d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44aca15c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac978020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac9743e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44aca081d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f44ac9755b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f44aca0ae50"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f44ac96f5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f44aca04710"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f44ac974a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f44ac965b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f44ac965b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f44ac959360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f44ac96e020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f44ac683d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f44ac683d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f44ac67ed90"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f44ac96b120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f44ac661020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f44ac95dbd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac954970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f44ac95e6d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f44ac954020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f44ac919860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f44ac830cc0"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f44ac830cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac781100"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f44ac923800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f44ac82ccc0"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f44ac82ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac77dd10"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f44ac916800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f44ac82acc0"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f44ac82acc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac778740"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f44ac914800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f44ac824cc0"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f44ac824cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac76fd10"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f44ac912800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f44ac826cc0"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f44ac826cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac773100"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f44ac92abc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f44ac544940"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f44ac88c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7c0740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f44ac877810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac790100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f44ac82eca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac781100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f44ac809cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f7740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f44ac873810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac787740"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f44ac85f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac756460"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f44ac84a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac727d10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f44ac83a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac700100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f44ac815cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac713740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f44ac801cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f2100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f44ac886810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7b2740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f44ac882810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7a9d10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f44ac86d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac778740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f44ac8599a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac748100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f44ac8449a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac719d10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f44ac8349a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f2100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f44ac890810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7c9100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f44ac87c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac79ad80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f44ac867810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac76a740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f44ac80fcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac705740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f44ac803cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f2100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f44ac81bcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac72b100"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f44ac863810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac761e60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f44ac84f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac730740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f44ac83e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac70ad10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f44ac80dcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac700100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f44ac822cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac73a100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f44ac88a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7bb100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f44ac875810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac78cd10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f44ac8429a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac713740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f44ac871810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac781100"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f44ac85d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac752e00"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f44ac8489a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac722740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f44ac8389a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6fcd10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f44ac81ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac730740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f44ac896800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7fad10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f44ac880810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7a3740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f44ac86b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac773100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f44ac8579a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac744d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f44ac819cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac76a740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f44ac813cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac70e100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f44ac807cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f2100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f44ac8539a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac73a100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f44ac817cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac765100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f44ac88e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7c5d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f44ac879810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac795740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f44ac865810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac765100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f44ac820cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac735d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f44ac80bcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6fcd10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f44ac8619a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac75b9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f44ac84d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac72b100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f44ac83c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac705740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f44ac888810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7b7d10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f44ac8409a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac70e100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f44ac884810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7ad100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f44ac86f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac77dd10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f44ac85b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac74d740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f44ac8469a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac71d100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f44ac8369a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f7740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f44ac892810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac7cf740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f44ac87e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac79e100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f44ac869810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac76fd10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f44ac8559a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac73f740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f44ac828ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac778740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f44ac811cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac70ad10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f44ac8519a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac735d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f44ac805cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac6f7740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f44ac7ffcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac719d10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f44ac8329f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f44ac787740"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f44ac67ed90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f44ac677e50"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac665020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44ac6342e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ac65d470"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f44ac65a060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f44ac65eb10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f44ac65eb10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f44ac631020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f44ac659340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f44ac637e70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f44ac637e70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f44ac61db90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f44ac654660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f44ac6350f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f44ac6350f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f44ac618710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f44ac6202f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f44ac863810"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f44ac61cde0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f44ac85f9a0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f44ac616930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f44ac85d9a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f44abb9ebe0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac5ea3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f44abb9d2b0"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f44ac54ed70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f44ac54ed70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f44ac544940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f44abba4a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f44ac965b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44abba42b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac5e7ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac5e7ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac556400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac5e68a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44abb96020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac5e72c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac557020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac557020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ab7c73a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f44ac5eb4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f44ac5e4d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ac5e8020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac558210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ac558210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ab7c84d0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac5ea3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac5e3710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac556400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ab7c68b0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac556cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac5e68a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac5d1bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac556400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f44ac5e3d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f44ac95e6d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f44ac5d15e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f44ac95dbd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f44ac5577a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f44ab7c7b20"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ab7c5210"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac556cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f44ab7c59d0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f44ab7cd2b0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f44ab7c3c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f44ac53b700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f44ac959360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f44ac536250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f44ac830cc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f44ac5341f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f44ac82acc0"/></to>
    </wire>
    <wire loc="114:../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f44ac417500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f44ac3fa680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f44ac400be0"/></to>
    </wire>
    <wire loc="44:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f44ac3f4380"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f44aceebde0"/></to>
    </wire>
    <wire loc="47:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f44ac3f4aa0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f44acc603b0"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer/VoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f44ab781020"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f44ab77e020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f44ab77e020"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f44ab7738d0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f44ab7738d0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f44ac38c390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f44ab778140"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f44ab7679d0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f44ab7679d0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f44ac389210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f44ab77d7b0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f44ab76e4f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f44ab76e4f0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f44abefd9f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ab779340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ab768c60"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ab768c60"/></from>
      <to><interface-ref name="ResourceReadNow" scoped="" ref="0x7f44ac387020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab7711c0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abe35a10"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab76b260"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abe35a10"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab765280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abe35a10"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f44ac383d40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab7711c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac37f450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab75e400"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab75e400"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac3171d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7f44ac385390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ab75f660"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ab75f660"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f44ac17fd20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab75c660"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab7711c0"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x7f44ac354e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f44ab75d400"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac316960"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f44ab75dcf0"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f44ac315920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f44ac17a1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac324cc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f44ab74b2a0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab75c660"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f44ac179740"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f44ab74d020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac316960"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac30caf0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7f44ac3131d0"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7f44ac309910"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f44ac315920"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f44ac30bab0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac3171d0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac30d370"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ac324cc0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac198520"/></to>
    </wire>
    <wire loc="98:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ac198520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ab7356c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f44ac308280"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac197b20"/></to>
    </wire>
    <wire loc="100:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac197b20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ab733cb0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac2fa0d0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac227020"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f44ac2f5be0"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7f44ac8429a0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f44ac2f3c80"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7f44ac8409a0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f44ac2f1c80"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7f44ac83e9a0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f44ac2eec80"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7f44ac83c9a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f44ac2ecc80"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7f44ac83a9a0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f44ac2eac80"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7f44ac8389a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f44ac2e8c80"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7f44ac8369a0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f44ac2e6c80"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7f44ac8349a0"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f44ac306020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f44ace577b0"/></to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f44ac2f9880"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7f44ace55020"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f44ac2f8d30"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7f44ace545a0"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f44ac2f6120"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7f44ace4b140"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f44ac2f6e60"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7f44ace4a020"/></to>
    </wire>
    <wire loc="99:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac1973a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ab733530"/></to>
    </wire>
    <wire loc="101:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ab732610"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac196570"/></to>
    </wire>
    <wire loc="103:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f44ab732dd0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f44ab737670"/></to>
    </wire>
    <wire loc="68:../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f44ab731900"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7f44ac17fd20"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f44ac1096f0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f44ac108ad0"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7f44ac17a1d0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f44ac104920"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f44ac179740"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f44ac107860"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f44ac170240"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f44ac105540"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f44ac170e00"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f44ac16c2b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44abf41370"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44abf41370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0c8020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f44ac15e840"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44abf3ad10"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44abf3ad10"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0c8020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f44ac159d00"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44abf33750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f44abf33750"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0c8020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac16f9a0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac227020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7f44ac1012a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0c8020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0bfc30"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0bfc30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44abf61150"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44ac0c3e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44abfdd020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f44ac0b5500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f44abf53790"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44abfdd020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ab6fe860"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f44abf5b640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f44abfb02f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f44abfab850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44abfdd870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f44abfdd870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44ab6f75f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f44abf52a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f44ac041b70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f44ac041b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f44ac039cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44ab6fe860"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ab6e1360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f44ab6f1d20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44ab6fd140"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f44ab6fd140"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44ab6e1bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f44ab6f49b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f44ac041b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab6dedd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab6e7020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab6e7020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab6dc440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab6e6760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab6e6760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab6da760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab6e4a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab6e4a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f44ace3c410"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f44ace33a20"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f44ace3b8c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f44ace32890"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f44ace39020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f44ace31700"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f44ace385a0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f44ace30570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f44ace37a50"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f44ace2f3e0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f44ace35020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f44ace2e1f0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f44ace345a0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f44ace2d020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f44ac01b0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f44ac67ed90"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f44abfa79c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f44abf56a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab657020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab76b260"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abef8020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab76b260"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44abef6ce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ab65a020"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ab65a020"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f44ac17fd20"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44abef7720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab65ac30"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab65ac30"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac3171d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f44abefd9f0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f44abe7ccb0"/></to>
    </wire>
    <wire loc="32:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abeea580"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abef8020"/></to>
    </wire>
    <wire loc="33:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44abe4b8f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44abef6ce0"/></to>
    </wire>
    <wire loc="35:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x7f44abe4fbf0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f44abef09c0"/></to>
    </wire>
    <wire loc="38:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f44abeedd50"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44abef7720"/></to>
    </wire>
    <wire loc="39:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f44abee9900"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44abe824f0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f44abe824f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44ab645a90"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="bufferDone" scoped="" ref="0x7f44abebf020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamDone" scoped="" ref="0x7f44abecd600"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamFail" scoped="" ref="0x7f44abec7d50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44abe84b10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ab64a020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f44ab64a020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f44ab62f660"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f44ab63e210"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44ab64a870"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f44ab64a870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f44ab62e020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f44ab641e10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f44ac041b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab62a190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab634450"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab634450"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab629770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab633a80"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab633a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab628a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab632da0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab632da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f44ab659bd0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac316960"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f44ab658590"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f44ac315920"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f44ac17a1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac324cc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f44ab5e5cc0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab657020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f44ac179740"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f44ab5e7a60"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f44ac383d40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab765280"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac37f450"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab5dade0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab5dade0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac3171d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f44ac3846e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ab5da1d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f44ab5da1d0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f44ac17fd20"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab5d7020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab765280"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f44ab5d9d30"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac316960"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f44ab5d8650"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f44ac315920"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f44ac17a1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f44ac324cc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f44ab5c89e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab5d7020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f44ac179740"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f44ab5c9670"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TEAC" loc="1:../../../tos/platforms/shimmer2r/TEAC.nc">
      <configuration/>
    </component>
    <component qname="TEAP" loc="1:../../../tos/platforms/shimmer2r/TEAP.nc" safe="">
      <module/>
    </component>
    <component qname="Tea16BitsAppC.Sensor" loc="49(Tea16BitsAppC.Sensor):../../../tos/platforms/shimmer/DemoSensorC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorC.nc">
        <short> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorC on the telosb platform provides a&#10; voltage reading, using VoltageC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10; &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor" loc="43(Tea16BitsAppC.Sensor.DemoSensor):../../../tos/platforms/shimmer/VoltageC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC" loc="43(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC):../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InternalVoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC" loc="47(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC):../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcP" loc="36:../../../tos/chips/msp430/adc12/AdcP.nc" safe="">
      <module/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient" loc="43(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../tos/system/RoundRobinResourceQueueC.nc">
      <documentation loc="33:../../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC" loc="47(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC):../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP" loc="19:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <documentation loc="10:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
        <short>&#10; Support component for AdcReadStreamClientC.</short>
        <long>&#10; Support component for AdcReadStreamClientC.&#10;&#10; @author David Gay&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AdcStreamP" loc="46:../../../tos/chips/msp430/adc12/AdcStreamP.nc" safe="">
      <documentation loc="39:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
        <short>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).</short>
        <long>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm" loc="41(WireAdcStreamP.Alarm):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom" loc="41(WireAdcStreamP.Alarm.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer" loc="37(WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm" loc="43(WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm.Transform" loc="51(WireAdcStreamP.Alarm.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.ArbitrateReadStream" loc="23(WireAdcStreamP.ArbitrateReadStream):../../../tos/system/ArbitratedReadStreamC.nc">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadStreamC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient" loc="43(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430InternalVoltageP" loc="34:../../../tos/chips/msp430/sensors/Msp430InternalVoltageP.nc">
      <module/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC" loc="47(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC):../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient" loc="43(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Tea16BitsC" loc="46:Tea16BitsC.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Tea16BitsAppC.TimerMilliC" loc="44(Tea16BitsAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f44ace21970" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f44ace21d10" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f44ace20110" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f44ace20490" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f44ace20810" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f44ace20b80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f44ace1f020" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f44ace1f3b0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f44ace1f780" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f44acde3e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f44acde0270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f44acd063c0" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f44accd70d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f44accb40d0" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f44ac7f9190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f44ac7f9540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f44ac7f98f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f44ac7f9ca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f44ac7f8060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f44ac678e60" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f44ac678e60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f44ac5cc5b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f44ac5bf5b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f44ac5a6d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f44ac452490" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f44ac452490"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f44ac452810" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="DemoSensorC" loc="49:../../../tos/platforms/shimmer/DemoSensorC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorC.nc">
        <short> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorC on the telosb platform provides a&#10; voltage reading, using VoltageC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10; &#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageC" loc="43:../../../tos/platforms/shimmer/VoltageC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430InternalVoltageC" loc="43:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadClientC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f44ac1f0850" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x7f44ac1e83b0" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f44ac0713b0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f44ac0713b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f44ac0386b0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f44ac0386b0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f44ac038e80" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f44ac038e80"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f44ac036290" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f44ac036290"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f44ac036a70" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f44ac036a70"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f44ac036e40" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f44ac035670" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f44ac035670"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f44ac03f6d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f44ac03f6d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f44ac014020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f44ac014020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f44ac014410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f44ac014410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f44ac014bf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f44ac014bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f44ac012020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44abfd8cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44abfd8cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44abfa2230" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44abfa2230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f44abfa2560" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44abf54dd0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44abf54dd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadStreamClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ArbitratedReadStreamC" loc="23:../../../tos/system/ArbitratedReadStreamC.nc" abstract="">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="nClients" ref="0x7f44abe7b3b0" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </constant>
        <typedef name="val_t" ref="0x7f44abe7b700" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44abe7b700"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f44acee7320" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acee7320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee76a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f44aceebde0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f44aceebde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f44aceea180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44acee92f0" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44acee92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee9670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f44acee2020" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f44acee2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44acee3110" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44acee3110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee3490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f44acee3820" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f44acee3820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee3ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f44acee2700" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f44acee2700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee2a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44aced3080" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44aced3080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44aced3400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f44acee4500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f44acee4500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acee4880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f44acea29e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f44acea29e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f44acea8980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f44acea8020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f44acea81b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f44acea8340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f44acea2d60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f44acea84d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f44acea8660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f44acea87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44aceac440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44aceac440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44aceac7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f44ace92a70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f44ace92a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f44ace91980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f44ace91020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f44ace911b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f44ace91340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f44ace92df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f44ace914d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f44ace91660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f44ace917f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f44ace91cc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f44ace91cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f44ace900a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ace923c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ace923c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ace92740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f44ace4ea50" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f44ace4ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace4edd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace4d020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace4d1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace4d340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace4d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace4d660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace4d7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace4d980"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace4db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f44ace3c410" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f44ace3c410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace3c790"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace3c920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace3cab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace3cc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace3cdd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace3b020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace3b1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace3b340"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace3b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f44ace45d10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f44ace45d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace440e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace44270"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace44400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace44590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace44720"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace448b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f44ace28020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f44ace28020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace283a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace28530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace286c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace28850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace289e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace28b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f44ace4a020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f44ace4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace4a3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace4a530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace4a6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace4a850"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace4a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f44ace30570" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f44ace30570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace308f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace30a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace30c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace30da0"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace2f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f44ace25020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f44ace25020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace253a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace25530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace256c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace25850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace259e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace25b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f44ace37a50" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f44ace37a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace37dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace36020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace361b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace36340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace364d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace36660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace367f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace36980"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace36b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f44ace55020" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f44ace55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace553a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace55530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace556c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace55850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace559e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace55b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace55d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace54020"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace541b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f44ace2a020" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f44ace2a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace2a3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace2a530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace2a6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace2a850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace2a9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace2ab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f44ace32890" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f44ace32890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace32c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace32da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace31020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace311b0"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace31340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f44ace3b8c0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f44ace3b8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace3bd40"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace3a020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace3a1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace3a340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace3a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace3a660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace3a7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace3a980"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace3ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f44ace44c70" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f44ace44c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace3e020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace3e1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace3e340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace3e4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace3e660"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace3e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f44ace27020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f44ace27020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace273a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace27530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace276c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace27850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace279e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace27b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f44ace39020" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f44ace39020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace393a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace39530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace396c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace39850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace399e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace39b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace39d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace38020"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace381b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f44ace4ada0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f44ace4ada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace46180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace46310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace464a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace46630"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace467c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f44ace577b0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f44ace577b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ace57b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ace57cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace57e50"/>
        <function-ref name="get" scoped="" ref="0x7f44ace5f020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace5f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace5f340"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ace5f4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace5f660"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ace5f7f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ace5f980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ace5fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f44ace2f3e0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f44ace2f3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace2f760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace2f8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace2fa80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace2fc10"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace2fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f44ace545a0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f44ace545a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace54920"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace54ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace54c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace54dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace4e020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace4e1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace4e340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace4e4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace4e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f44ace35020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f44ace35020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace353a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace35530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace356c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace35850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace359e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace35b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace35d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace34020"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace341b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f44ace3fdc0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f44ace3fdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace45180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace45310"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace454a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace45630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace457c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace45950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f44ace29020" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f44ace29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace293a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace29530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace296c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace29850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace299e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace29b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f44ace4b140" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f44ace4b140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace4b4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace4b650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace4b7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace4b970"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace4bb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f44ace31700" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f44ace31700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace31a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace31c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace31da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace30020"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace301b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f44ace26020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f44ace26020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace263a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace26530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace266c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace26850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace269e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace26b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f44ace385a0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f44ace385a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace38920"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace38ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace38c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace38dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace37020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace371b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace37340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace374d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace37660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f44ace3eb70" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f44ace3eb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ace3d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ace3d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace3d340"/>
        <function-ref name="get" scoped="" ref="0x7f44ace3d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace3d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace3d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ace3d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace3db10"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ace3dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ace3de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ace3c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f44ace2e1f0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f44ace2e1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace2e570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace2e700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace2e890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace2ea20"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace2ebb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f44ace2b020" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f44ace2b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace2b3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44ace2b530"/>
        <function-ref name="captured" scoped="" ref="0x7f44ace2b6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ace2b850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ace2b9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44ace2bb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f44ace2d020" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f44ace2d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace2d5a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace2d730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace2d8c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace2da50"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace2dbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f44ace33a20" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f44ace33a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ace33da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ace32020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ace321b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ace32340"/>
        <function-ref name="fired" scoped="" ref="0x7f44ace324d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f44ace345a0" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f44ace345a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ace34920"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ace34ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ace34c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ace34dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ace33020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ace331b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ace33340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ace334d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ace33660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f44acdedaa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f44acdedaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acdede20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f44acded450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f44acded450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acded7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f44acdec120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f44acdec120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acdec4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f44acdeed80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acdeed80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acded180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44acdef540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acdef540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acdef8c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acdefa50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acdefbe0"/>
        <function-ref name="get" scoped="" ref="0x7f44acdefd70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acdee020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acdee1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acdee340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acdee4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acdee660"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acdee7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acdee980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f44acde6940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f44acde6940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acde6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f44acde62f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f44acde62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acde6670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f44acde5020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f44acde5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acde53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f44acde7bf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acde7bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acde6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44acde83e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acde83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acde8760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acde88f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acde8a80"/>
        <function-ref name="get" scoped="" ref="0x7f44acde8c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acde8da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acde7020"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acde71b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acde7340"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acde74d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acde7660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acde77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd9aa90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd9aa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd9ae10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd99020"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd991b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd99340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd994d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd99660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acde19d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acde19d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acde1d50"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd9b020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd9b1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd9b340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd9b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd9b660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd9b7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd9b980"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd9bb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd96020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd96020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd963a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd9bde0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd9bde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd9a180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd9a310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd9a4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd9a630"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd9a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd99930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd99930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd99cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd99e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd97020"/>
        <function-ref name="get" scoped="" ref="0x7f44acd971b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd97340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd974d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd97660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd977f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd97980"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd97b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd97ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd91160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd91160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd914e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd91670"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd91800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd91990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd91b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd91cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd93020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd93020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd933a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd93530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd936c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd93850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd939e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd93b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd93d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd92020"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd8f7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd8f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd8fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd92480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd92480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd92800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd92990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd92b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd92cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd92e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd90020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd90020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd903a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd90530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd906c0"/>
        <function-ref name="get" scoped="" ref="0x7f44acd90850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd909e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd90b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd90d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd8f020"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd8f1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd8f340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd8f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd8a7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd8a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd8ab20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd8acb0"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd8ae40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd89020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd891b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd89340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd8c6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd8c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd8ca50"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd8cbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd8cd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd8b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd8b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd8b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd8b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd8b660"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd8b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd87c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd87c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd86020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd8bac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd8bac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd8be40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd8a020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd8a1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd8a340"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd8a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd89610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd89610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd89990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd89b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd89cb0"/>
        <function-ref name="get" scoped="" ref="0x7f44acd89e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd87020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd871b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd87340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd874d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd87660"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd877f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd87980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd82cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd82cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd810a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd81230"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd813c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd81550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd816e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd81870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd84b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd84b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd83020"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd831b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd83340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd834d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd83660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd837f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd83980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd83b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd83ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd7f2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd7f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd7f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd82020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd82020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd823a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd82530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd826c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd82850"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd829e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd81b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd81b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd80020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd801b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd80340"/>
        <function-ref name="get" scoped="" ref="0x7f44acd804d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd80660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd807f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd80980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd80b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd80ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd80e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd7f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd7a2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd7a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd7a670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd7a800"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd7a990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd7ab20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd7acb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd7ae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd7c220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd7c220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd7c5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd7c730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd7c8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd7ca50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd7cbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd7cd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd7b020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd7b1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd7b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd787a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd787a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd78b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd7b610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd7b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd7b990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd7bb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd7bcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd7be40"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd7a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd79160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd79160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd794e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd79670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd79800"/>
        <function-ref name="get" scoped="" ref="0x7f44acd79990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd79b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd79cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd79e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd78020"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd781b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd78340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd784d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd727a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd727a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd72b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd72cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd72e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd71020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd711b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd71340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd746d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd746d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd74a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd74be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd74d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd73020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd731b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd73340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd734d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd73660"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd737f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd70c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd70c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd6f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd73ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd73ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd73e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd72020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd721b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd72340"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd724d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd71610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd71610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd71990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd71b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd71cb0"/>
        <function-ref name="get" scoped="" ref="0x7f44acd71e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd70020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd701b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd70340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd704d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd70660"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd707f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd70980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd6bcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd6bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd6a0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd6a230"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd6a3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd6a550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd6a6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd6a870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd6db30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd6db30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd6c020"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd6c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd6c340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd6c4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd6c660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd6c7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd6c980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd6cb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd6cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd682f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd682f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd68670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd6b020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd6b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd6b3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd6b530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd6b6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd6b850"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd6b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd6ab40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd6ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd69020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd691b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd69340"/>
        <function-ref name="get" scoped="" ref="0x7f44acd694d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd69660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd697f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd69980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd69b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd69ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd69e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd68020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd622f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd622f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd62670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd62800"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd62990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd62b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd62cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd62e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd64220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd64220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd645a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd64730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd648c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd64a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd64be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd64d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd63020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd631b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd63340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd607a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd607a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd60b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd63610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd63610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd63990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd63b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd63cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd63e40"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd62020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd61160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd61160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd614e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd61670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd61800"/>
        <function-ref name="get" scoped="" ref="0x7f44acd61990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd61b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd61cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd61e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd60020"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd601b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd60340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd604d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd5b7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd5b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd5bb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd5bcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd5be40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd5a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd5a1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd5a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd5d6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd5d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd5da50"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd5dbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd5dd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd5c020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd5c1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd5c340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd5c4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd5c660"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd5c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd59c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd59c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd58020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd5cac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd5cac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd5ce40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd5b020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd5b1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd5b340"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd5b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd5a610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd5a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd5a990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd5ab20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd5acb0"/>
        <function-ref name="get" scoped="" ref="0x7f44acd5ae40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd59020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd591b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd59340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd594d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd59660"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd597f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd59980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f44acd53cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f44acd53cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd520a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f44acd52230"/>
        <function-ref name="captured" scoped="" ref="0x7f44acd523c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd52550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd526e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f44acd52870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f44acd55b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f44acd55b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44acd54020"/>
        <function-ref name="getControl" scoped="" ref="0x7f44acd541b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd54340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44acd544d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44acd54660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd547f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44acd54980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44acd54b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f44acd54ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f44acd502f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f44acd502f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd50670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f44acd53020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f44acd53020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44acd533a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44acd53530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44acd536c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44acd53850"/>
        <function-ref name="fired" scoped="" ref="0x7f44acd539e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44acd52b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44acd52b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acd51020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44acd511b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44acd51340"/>
        <function-ref name="get" scoped="" ref="0x7f44acd514d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44acd51660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44acd517f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44acd51980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44acd51b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f44acd51ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44acd51e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44acd50020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f44acd4a240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f44acd4a240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd4a5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f44acd4ea90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f44acd4ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd4ee10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f44acd4b260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f44acd4b260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd4b5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f44acd4b9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f44acd4b9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44acd4bd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f44ad2284c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f44ad2284c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f44ad228840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f44ad5993b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f44ad5993b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f44ad599730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f44ad5998c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f44ad599a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f44ad402bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f44ad402bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f44ad53e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f44acd13dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f44acd13dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acd12180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f44acd14590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f44acd14590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f44acd14910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f44acd136c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f44acd136c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acd13a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f44acd14c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f44acd14c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acd13020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f44acd131b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f44acd13340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f44ad616410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f44ad616410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44ad616790"/>
        <function-ref name="runTask" scoped="" ref="0x7f44ad616920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f44ad5a73a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f44ad5a73a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ad5a7720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f44ad5a78b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f44ad5a7a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f44acf7eb70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f44acf7eb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acf7d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acf7d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f44acf772c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f44acf772c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f44acf77640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f44acf777d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f44acf77960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f44acf7fc30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f44acf7fc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acf7e020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f44acf7e1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f44acf7e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f44ac458020" loc="49:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f44ac458020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44ac4583a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44ac458530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44ac4586c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44ac458850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44ac4589e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f44ac458c30" loc="50:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f44ac458c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ac456020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f44ac4561b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44ac456340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44ac4564d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f44ac456660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f44ac4568b0" loc="51:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f44ac4568b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f44ac456c30"/>
        <function-ref name="source" scoped="" ref="0x7f44ac456dc0"/>
        <function-ref name="address" scoped="" ref="0x7f44ac455020"/>
        <function-ref name="destination" scoped="" ref="0x7f44ac4551b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f44ac455340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f44ac4554d0"/>
        <function-ref name="type" scoped="" ref="0x7f44ac455660"/>
        <function-ref name="setType" scoped="" ref="0x7f44ac4557f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f44ac455980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f44ac455b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f44ac455ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f44ac454020" loc="52:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f44ac454020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f44ac4543a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f44ac454530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f44ac4546c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f44abc67210" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f44abc67210"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44abc67590"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44abc67720"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44abc678b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44abc67a40"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44abc67bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f44abc67e80" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f44abc67e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44abc66220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44abc663b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44abc66540"/>
        <function-ref name="cancel" scoped="" ref="0x7f44abc666d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44abc66860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f44abc66ab0" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f44abc66ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f44abc66e30"/>
        <function-ref name="source" scoped="" ref="0x7f44abc64020"/>
        <function-ref name="address" scoped="" ref="0x7f44abc641b0"/>
        <function-ref name="destination" scoped="" ref="0x7f44abc64340"/>
        <function-ref name="setSource" scoped="" ref="0x7f44abc644d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f44abc64660"/>
        <function-ref name="type" scoped="" ref="0x7f44abc647f0"/>
        <function-ref name="setType" scoped="" ref="0x7f44abc64980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f44abc64b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f44abc64ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f44abc64e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f44accbbce0" loc="44:../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f44accbbce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44accb80a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44accb8230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44accb83c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44accb8550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44accb86e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f44acc6e400" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f44acc6e400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acc6e7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acc6e930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acc6eac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acc6ec50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acc6ede0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f44acc6f580" loc="46:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f44acc6f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acc6f920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acc6fab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acc6fc40"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acc6fdd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acc6e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f44acc6c720" loc="50:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f44acc6c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acc6caa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f44acc6cc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acc6cdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acc6b020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f44acc6b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f44acc6b480" loc="169:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f44acc6b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acc6b800"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acc6b990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f44acc6bc60" loc="126:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f44acc6bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acc69020"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acc691b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f44acc6d060" loc="49:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f44acc6d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f44acc6d3e0"/>
        <function-ref name="source" scoped="" ref="0x7f44acc6d570"/>
        <function-ref name="address" scoped="" ref="0x7f44acc6d700"/>
        <function-ref name="destination" scoped="" ref="0x7f44acc6d890"/>
        <function-ref name="setSource" scoped="" ref="0x7f44acc6da20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f44acc6dbb0"/>
        <function-ref name="type" scoped="" ref="0x7f44acc6dd40"/>
        <function-ref name="setType" scoped="" ref="0x7f44acc6c020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f44acc6c1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f44acc6c340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f44acc6c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f44acc603b0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f44acc603b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44acc60730"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44acc608c0"/>
        <function-ref name="start" scoped="" ref="0x7f44acc60a50"/>
        <function-ref name="stop" scoped="" ref="0x7f44acc60be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f44acc643f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f44acc643f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acc64770"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acc64900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acc64a90"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acc64c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acc64db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f44acc5d7e0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f44acc5d7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acc5db60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f44acc5dcf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acc5de80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acc5b030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f44acc5b1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f44acc5d1d0" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f44acc5d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f44acc5d550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44acc4c330" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44acc4c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44acc4c6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44acc4c840"/>
        <function-ref name="led1On" scoped="" ref="0x7f44acc4c9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44acc4cb60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44acc4ccf0"/>
        <function-ref name="get" scoped="" ref="0x7f44acc4ce80"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44acc57030"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44acc57670"/>
        <function-ref name="set" scoped="" ref="0x7f44acc571c0"/>
        <function-ref name="led0On" scoped="" ref="0x7f44acc57350"/>
        <function-ref name="led2On" scoped="" ref="0x7f44acc574e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f44acc59b20" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f44acc59b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f44acc58020"/>
        <function-ref name="noAck" scoped="" ref="0x7f44acc581b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f44acc58340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f44acc5b470" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f44acc5b470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f44acc5b7f0"/>
        <function-ref name="source" scoped="" ref="0x7f44acc5b980"/>
        <function-ref name="address" scoped="" ref="0x7f44acc5bb10"/>
        <function-ref name="destination" scoped="" ref="0x7f44acc5bca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f44acc5be30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f44acc59020"/>
        <function-ref name="type" scoped="" ref="0x7f44acc591b0"/>
        <function-ref name="setType" scoped="" ref="0x7f44acc59340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f44acc594d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f44acc59660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f44acc597f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f44acbf24a0" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f44acbf24a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acbf2820"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acbf29b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acbf2b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acbf2cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acbf2e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f44acbf1120" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f44acbf1120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f44acbf14a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f44acc4b300" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f44acc4b300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acc4b6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acc4b830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acc4b9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acc4bb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acc4bce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f44acbf5d60" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f44acbf5d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44acbf3180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f44acbf3310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acbf34a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acbf3630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f44acbf37c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f44acbf60d0" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f44acbf60d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f44acbf6470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f44acbf3a10" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f44acbf3a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f44acbf3d90"/>
        <function-ref name="noAck" scoped="" ref="0x7f44acbf2020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f44acbf21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f44acbf66c0" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f44acbf66c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f44acbf6a40"/>
        <function-ref name="source" scoped="" ref="0x7f44acbf6bd0"/>
        <function-ref name="address" scoped="" ref="0x7f44acbf6d60"/>
        <function-ref name="destination" scoped="" ref="0x7f44acbf5020"/>
        <function-ref name="setSource" scoped="" ref="0x7f44acbf51b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f44acbf5340"/>
        <function-ref name="type" scoped="" ref="0x7f44acbf54d0"/>
        <function-ref name="setType" scoped="" ref="0x7f44acbf5660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f44acbf57f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f44acbf5980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f44acbf5b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f44acbefb90" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f44acbefb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44acbec020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44acbec1b0"/>
        <function-ref name="start" scoped="" ref="0x7f44acbec340"/>
        <function-ref name="stop" scoped="" ref="0x7f44acbec4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f44acbeb790" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f44acbeb790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f44aceff0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acbebb10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acbebca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acbebe30"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acbea020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acbea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44acbef540" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44acbef540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acbef8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f44acbecc60" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f44acbecc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f44aceff0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f44acbeb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44acbe92b0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44acbe92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44acbe9630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44acbe97c0"/>
        <function-ref name="led1On" scoped="" ref="0x7f44acbe9950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44acbe9ae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44acbe9c70"/>
        <function-ref name="get" scoped="" ref="0x7f44acbe9e00"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44acbe8020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44acbe8660"/>
        <function-ref name="set" scoped="" ref="0x7f44acbe81b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f44acbe8340"/>
        <function-ref name="led2On" scoped="" ref="0x7f44acbe84d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f44acbe4970" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f44acbe4970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f44aceff0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f44acbe4cf0"/>
        <function-ref name="offset" scoped="" ref="0x7f44acbe4e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f44acbe9030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f44acbddc40" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f44acbddc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44acbdc020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44acbdc1b0"/>
        <function-ref name="start" scoped="" ref="0x7f44acbdc340"/>
        <function-ref name="stop" scoped="" ref="0x7f44acbdc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f44acb746e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f44acb746e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acb74a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acb74bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f44acbc7780" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f44acbc7780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f44acbc7b00"/>
        <function-ref name="stop" scoped="" ref="0x7f44acbc7c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f44acbac4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f44acbac4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acbac870"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acbaca00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44acbdd5f0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44acbdd5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44acbdd970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f44acbc5360" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f44acbc5360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f44acbc56e0"/>
        <function-ref name="flush" scoped="" ref="0x7f44acbc5870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f44acb78c70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f44acb78c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acb77020"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acb771b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f44acbcc7e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f44acbcc7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f44acbccb60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f44acbcccf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f44acbcce80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f44acbd5030"/>
        <function-ref name="putData" scoped="" ref="0x7f44acbd51c0"/>
        <function-ref name="putDone" scoped="" ref="0x7f44acbd5350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f44acbd54e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44acbd5760" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44acbd5760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44acbd5ae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44acbd5c70"/>
        <function-ref name="led1On" scoped="" ref="0x7f44acbd5e00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44acbd0020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44acbd01b0"/>
        <function-ref name="get" scoped="" ref="0x7f44acbd0340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44acbd04d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44acbd0b10"/>
        <function-ref name="set" scoped="" ref="0x7f44acbd0660"/>
        <function-ref name="led0On" scoped="" ref="0x7f44acbd07f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f44acbd0980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f44acb71a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f44acb71a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acb71d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acb70020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f44acbd6a40" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f44acbd6a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f44acbd6dc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f44acbdb020"/>
        <function-ref name="startSend" scoped="" ref="0x7f44acbdb1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f44acbdb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f44acbd1530" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f44acbd1530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f44acbd18b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f44acbd1a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7f44acbd1bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f44acaa6020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f44acaa6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acaa63a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acaa6530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f44acaabde0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f44acaabde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f44aceff0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44acaaa1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44acaaa350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44acaaa4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44acaaa670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44acaaa800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f44acaa6800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f44acaa6800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44acaa6b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f44acaa6d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f44acaab6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f44acaab6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f44aceff0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f44acaaba60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f44acaaac20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f44acaaac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f44aceff0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f44acaa9020"/>
        <function-ref name="offset" scoped="" ref="0x7f44acaa91b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f44acaa9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44acaa8920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44acaa8920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44acaa8ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44acaa8e30"/>
        <function-ref name="led1On" scoped="" ref="0x7f44acaa7020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44acaa71b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44acaa7340"/>
        <function-ref name="get" scoped="" ref="0x7f44acaa74d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44acaa7660"/>
        <function-ref name="led2On" scoped="" ref="0x7f44acaa7ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44acaa7980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44acaa77f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f44acaa7b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f44acaa9e80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f44acaa9e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f44acaa8220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f44acaa83b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f44acaa8540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f44acaa86d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f44acaa9590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f44acaa9590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f44acaa9910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f44acaa9aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f44acaa9c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f44aca94d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f44aca94d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44aca9e0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f44aca9e270"/>
        <function-ref name="receive" scoped="" ref="0x7f44aca9e400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f44aca9e590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f44aca9e720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f44aca9e8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44aca9ea40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f44acaa4e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f44acaa4e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f44acaa01c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f44acaa0350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f44acaa04e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f44acaa0670"/>
        <function-ref name="putData" scoped="" ref="0x7f44acaa0800"/>
        <function-ref name="putDone" scoped="" ref="0x7f44acaa0990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f44acaa0b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44aca9ecc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44aca9ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44aca9d0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44aca9d230"/>
        <function-ref name="led1On" scoped="" ref="0x7f44aca9d3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44aca9d550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44aca9d6e0"/>
        <function-ref name="get" scoped="" ref="0x7f44aca9d870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44aca9da00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44aca931b0"/>
        <function-ref name="set" scoped="" ref="0x7f44aca9db90"/>
        <function-ref name="led0On" scoped="" ref="0x7f44aca9dd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f44aca93020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f44aca76020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f44aca76020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44aca763a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f44aca76530"/>
        <function-ref name="receive" scoped="" ref="0x7f44aca766c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f44aca76850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f44aca788d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f44aca788d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44aca78c50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f44aca78de0"/>
        <function-ref name="receive" scoped="" ref="0x7f44aca77020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f44aca771b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f44aca77340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f44aca774d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44aca77660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f44aca780c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f44aca780c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f44aca78440"/>
        <function-ref name="stop" scoped="" ref="0x7f44aca785d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44ac48bc70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac48bc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44ac48a020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ac48a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f44ac489440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f44ac489440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44ac4897c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f44ac489950"/>
        <function-ref name="receive" scoped="" ref="0x7f44ac489ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f44ac489c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f44ac488020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac488020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f44ac4883a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f44ac48a440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f44ac48a440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44ac48a7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f44ac48a950"/>
        <function-ref name="receive" scoped="" ref="0x7f44ac48aae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f44ac48ac70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f44ac48ae00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f44ac489020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44ac4891b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ac48b020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac48b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac48b3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac48b530"/>
        <function-ref name="request" scoped="" ref="0x7f44ac48b6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac48b850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac48b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f44aca0c8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44aca0c8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44aca0cc60"/>
        <function-ref name="configure" scoped="" ref="0x7f44aca0cdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f44aca0ed00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f44aca0ed00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44aca0a0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f44aca0a230"/>
        <function-ref name="receive" scoped="" ref="0x7f44aca0a3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f44aca0a550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f44aca081d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44aca081d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f44aca08550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f44aca0f670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f44aca0f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44aca0f9f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f44aca0fb80"/>
        <function-ref name="receive" scoped="" ref="0x7f44aca0fd10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f44aca0e020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f44aca0e1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f44aca0e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44aca0e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f44aca0ae50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f44aca0ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44aca09210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44aca093a0"/>
        <function-ref name="request" scoped="" ref="0x7f44aca09530"/>
        <function-ref name="granted" scoped="" ref="0x7f44aca096c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44aca09850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44aca15c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44aca15c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44aca110a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44aca11230"/>
        <function-ref name="request" scoped="" ref="0x7f44aca113c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44aca11550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44aca116e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f44aca04710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f44aca04710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44aca04a90"/>
        <function-ref name="txDone" scoped="" ref="0x7f44aca04c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f44ac978dc0" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac978dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44ac977180"/>
        <function-ref name="configure" scoped="" ref="0x7f44ac977310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f44ac976890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f44ac976890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44ac976c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f44ac976dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f44ac975020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f44ac9751b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f44ac9743e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac9743e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f44ac974780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f44ac974a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f44ac974a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f44ac974dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f44ac973020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f44ac9731b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f44ac973340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f44ac9734d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f44ac973660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f44ac9737f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f44ac973980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f44ac973b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f44ac973ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f44ac973e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f44ac972020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f44ac9721b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f44ac972440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f44ac9725d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f44ac972760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f44ac9728f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f44ac972a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f44ac972c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f44ac972da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f44ac971020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f44ac9711b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f44ac971340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f44ac9714d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac971660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f44ac9719f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f44ac971b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f44ac971d10"/>
        <function-ref name="tx" scoped="" ref="0x7f44ac970020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f44ac9701b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f44ac970340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f44ac9704d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f44ac970660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f44ac9707f0"/>
        <function-ref name="rx" scoped="" ref="0x7f44ac970980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f44ac970b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f44ac970ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f44ac970e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f44ac96f020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f44ac96f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f44ac9776d0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f44ac9776d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44ac977a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f44ac977c00"/>
        <function-ref name="receive" scoped="" ref="0x7f44ac977d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f44ac976020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f44ac9761b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f44ac976340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44ac9764d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f44ac96e020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ac96e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac96ee30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac96d800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac96d340"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac96dcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f44ac9755b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f44ac9755b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac975950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac975ae0"/>
        <function-ref name="request" scoped="" ref="0x7f44ac975c70"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac975e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac974020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ac978020" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac978020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac9783c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac978550"/>
        <function-ref name="request" scoped="" ref="0x7f44ac9786e0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac978870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac978a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f44ac96f5b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f44ac96f5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44ac96f950"/>
        <function-ref name="txDone" scoped="" ref="0x7f44ac96fae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44ac96b120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44ac96b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44ac96b4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44ac96b630"/>
        <function-ref name="led1On" scoped="" ref="0x7f44ac96b7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44ac96b950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44ac96bae0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac96bc70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44ac96be00"/>
        <function-ref name="led2On" scoped="" ref="0x7f44ac96a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac96a1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44ac96a020"/>
        <function-ref name="led0On" scoped="" ref="0x7f44ac96a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f44ac95dbd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f44ac95dbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44ac95c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f44ac95e6d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f44ac95e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44ac95ea50"/>
        <function-ref name="txDone" scoped="" ref="0x7f44ac95ebe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f44ac965b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f44ac965b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f44ac962020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f44ac9621b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f44ac962340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f44ac9624d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f44ac962660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f44ac9627f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f44ac962980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f44ac962b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f44ac962ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f44ac962e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f44ac961020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f44ac9611b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f44ac961340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f44ac9615d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f44ac961760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f44ac9618f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f44ac961a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f44ac961c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f44ac961da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f44ac960020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f44ac9601b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f44ac960340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f44ac9604d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f44ac960660"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac9607f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f44ac960b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f44ac960d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f44ac95f020"/>
        <function-ref name="tx" scoped="" ref="0x7f44ac95f1b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f44ac95f340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f44ac95f4d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f44ac95f660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f44ac95f7f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f44ac95f980"/>
        <function-ref name="rx" scoped="" ref="0x7f44ac95fb10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f44ac95fca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f44ac95fe30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f44ac95e020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f44ac95e1b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f44ac95e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f44ac916800" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f44ac916800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac916b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac916d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac915020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac9151b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac915340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac9154d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac915660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac9157f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac915980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac915b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac915ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac915e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac914020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac9142b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac914440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f44ac954020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f44ac954020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44ac9543a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f44ac954530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f44ac914800" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f44ac914800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac914b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac914d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac913020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac9131b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac913340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac9134d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac913660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac9137f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac913980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac913b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac913ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac913e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac912020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac9122b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac912440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f44ac912800" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f44ac912800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac912b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac912d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac911020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac9111b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac911340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac9114d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac911660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac9117f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac911980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac911b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac911ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac911e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac910020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac9102b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac910440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f44ac959360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f44ac959360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f44ac9596e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f44ac959870"/>
        <function-ref name="setUctl" scoped="" ref="0x7f44ac959a00"/>
        <function-ref name="enableUart" scoped="" ref="0x7f44ac959b90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f44ac959d20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f44ac958020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f44ac9581b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f44ac958340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f44ac9584d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f44ac958660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f44ac9587f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f44ac958980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f44ac958b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f44ac958da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f44ac957020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f44ac9571b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f44ac957340"/>
        <function-ref name="isUart" scoped="" ref="0x7f44ac9574d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f44ac957660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f44ac9577f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f44ac957980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f44ac957b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f44ac957ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f44ac957e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac956020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f44ac9563b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f44ac956540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f44ac9566d0"/>
        <function-ref name="tx" scoped="" ref="0x7f44ac956860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f44ac9569f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f44ac956b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f44ac956d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f44ac955020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f44ac9551b0"/>
        <function-ref name="rx" scoped="" ref="0x7f44ac955340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f44ac9554d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f44ac955660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f44ac9557f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f44ac955980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f44ac955b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44ac910700" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44ac910700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44ac910a80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44ac910c10"/>
        <function-ref name="led1On" scoped="" ref="0x7f44ac910da0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44ac90f020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44ac90f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac90f340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44ac90f4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44ac90fb10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac90f660"/>
        <function-ref name="led0On" scoped="" ref="0x7f44ac90f7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f44ac90f980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f44ac92abc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f44ac92abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f44ac952020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f44ac9521b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f44ac952340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f44ac9524d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f44ac952660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f44ac9527f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f44ac952980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f44ac952b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ac952ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f44ac952e30"/>
        <function-ref name="getData" scoped="" ref="0x7f44ac951020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f44ac9511b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f44ac951340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f44ac9515d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f44ac951760"/>
        <function-ref name="getIV" scoped="" ref="0x7f44ac9518f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f44ac951a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f44ac951c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f44ac951da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f44ac929020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f44ac9291b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f44ac929340"/>
        <function-ref name="isI2C" scoped="" ref="0x7f44ac9294d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f44ac929660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f44ac9297f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f44ac929b80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f44ac929d10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f44ac928020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f44ac9281b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f44ac928340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f44ac9284d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f44ac928660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f44ac9287f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f44ac928980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f44ac928b10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f44ac928ca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f44ac928e30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f44ac927020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f44ac9271b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f44ac927340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f44ac9274d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f44ac927660"/>
        <function-ref name="setData" scoped="" ref="0x7f44ac9277f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f44ac927980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f44ac927b10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f44ac927ca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f44ac927e30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f44ac926020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f44ac9261b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f44ac926740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f44ac9268d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f44ac926a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f44ac926bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f44ac926d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f44ac925020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f44ac9251b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f44ac925340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f44ac9254d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f44ac925660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f44ac923800" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f44ac923800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac923b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac923d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac917020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac9171b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac917340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac9174d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac917660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac9177f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac917980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac917b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac917ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac917e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac916020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac9162b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac916440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f44ac954970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac954970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44ac954cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f44ac919860" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f44ac919860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac919be0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac919d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac924020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac9241b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac924340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac9244d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac924660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac9247f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac924980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac924b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac924ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac924e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac923020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac9232b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac923440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f44ac88c810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f44ac88c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac88cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac88cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac88b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac88b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac88b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac88b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac88b660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac88b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac88b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac88bb10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac88bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac88be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac88a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac88a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac88a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f44ac877810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f44ac877810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac877b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac877d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac876020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8761b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac876340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8764d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac876660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8767f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac876980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac876b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac876ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac876e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac875020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8752b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac875440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f44ac82eca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f44ac82eca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac82d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac82d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac82d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac82d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac82d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac82d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac82da00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac82db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac82dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac82c020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac82c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac82c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac82c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac82c760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac82c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f44ac809cb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f44ac809cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8080a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac808230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8083c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac808550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8086e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac808870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac808a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac808b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac808d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac807020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8071b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac807340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8074d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac807760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8078f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f44ac82ccc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f44ac82ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac82b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac82b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac82b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac82b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac82b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac82b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac82ba00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac82bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac82bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac82a020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac82a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac82a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac82a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac82a760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac82a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f44ac873810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f44ac873810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac873b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac873d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac872020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8721b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac872340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8724d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac872660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8727f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac872980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac872b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac872ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac872e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac871020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8712b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac871440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f44ac85f9a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f44ac85f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac85fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac85e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac85e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac85e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac85e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac85e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac85e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac85e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac85eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac85eca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac85ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac85d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac85d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac85d440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac85d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f44ac84a9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f44ac84a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac84ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac849020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8491b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac849340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8494d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac849660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8497f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac849980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac849b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac849ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac849e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac848020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac848440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8485d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f44ac83a9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f44ac83a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac83ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac839020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8391b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac839340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8394d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac839660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8397f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac839980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac839b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac839ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac839e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac838020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8381b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac838440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8385d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f44ac826cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f44ac826cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8250a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac825230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8253c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac825550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8256e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac825870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac825a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac825b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac825d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac824020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8241b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac824340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8244d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac824760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8248f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f44ac815cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f44ac815cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8140a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac814230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8143c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac814550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8146e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac814870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac814a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac814b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac814d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac813020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8131b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac813340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8134d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac813760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8138f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f44ac801cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f44ac801cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8000a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac800230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8003c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac800550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8006e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac800870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac800a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac800b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac800d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7ff020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7ff1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7ff340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7ff4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7ff760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7ff8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f44ac886810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f44ac886810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac886b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac886d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac885020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8851b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac885340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8854d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac885660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8857f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac885980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac885b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac885ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac885e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac884020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8842b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac884440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f44ac824cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f44ac824cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8230a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac823230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8233c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac823550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8236e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac823870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac823a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac823b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac823d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac822020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8221b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac822340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8224d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac822760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8228f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f44ac882810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f44ac882810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac882b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac882d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac881020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8811b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac881340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8814d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac881660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8817f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac881980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac881b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac881ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac881e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac880020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8802b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac880440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f44ac86d810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f44ac86d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac86db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac86dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac86c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac86c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac86c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac86c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac86c660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac86c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac86c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac86cb10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac86cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac86ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac86b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac86b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac86b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f44ac8599a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f44ac8599a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac859d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac858020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8581b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac858340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8584d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac858660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8587f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac858980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac858b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac858ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac858e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac857020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8571b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac857440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8575d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f44ac8449a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f44ac8449a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac844d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac843020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8431b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac843340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8434d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac843660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8437f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac843980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac843b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac843ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac843e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac842020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8421b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac842440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8425d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f44ac8349a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f44ac8349a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac834d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac833020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8331b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac833340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8334d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac833660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8337f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac833980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac833b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac833ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac833e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac832020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8321b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac832440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8325d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f44ac890810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f44ac890810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac890b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac890d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac88f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac88f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac88f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac88f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac88f660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac88f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac88f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac88fb10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac88fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac88fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac88e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac88e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac88e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f44ac87c810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f44ac87c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac87cc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac87ce20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac87a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac87a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac87a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac87a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac87a660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac87a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac87a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac87ab10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac87aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac87ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac879020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8792b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac879440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f44ac867810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f44ac867810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac867b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac867d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac866020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8661b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac866340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8664d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac866660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8667f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac866980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac866b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac866ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac866e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac865020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8652b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac865440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f44ac830cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f44ac830cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac82f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac82f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac82f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac82f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac82f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac82f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac82fa00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac82fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac82fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac82e020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac82e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac82e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac82e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac82e760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac82e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f44ac80fcb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f44ac80fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac80e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac80e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac80e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac80e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac80e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac80e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac80ea00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac80eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac80ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac80d020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac80d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac80d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac80d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac80d760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac80d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f44ac803cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f44ac803cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8020a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac802230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8023c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac802550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8026e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac802870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac802a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac802b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac802d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac801020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8011b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac801340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8014d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac801760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8018f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f44ac81bcc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f44ac81bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac81a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac81a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac81a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac81a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac81a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac81a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac81aa00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac81ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac81ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac819020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8191b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac819340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8194d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac819760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8198f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f44ac863810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f44ac863810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac863d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac862020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8621b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac862340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8624d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac862660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8627f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac862980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac862b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac862ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac862e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac861020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8611b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac861440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8615d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f44ac84f9a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f44ac84f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac84fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac84e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac84e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac84e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac84e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac84e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac84e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac84e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac84eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac84eca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac84ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac84d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac84d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac84d440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac84d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f44ac83e9a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f44ac83e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac83ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac83d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac83d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac83d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac83d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac83d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac83d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac83d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac83db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac83dca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac83de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac83c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac83c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac83c440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac83c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f44ac80dcb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f44ac80dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac80c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac80c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac80c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac80c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac80c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac80c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac80ca00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac80cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac80cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac80b020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac80b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac80b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac80b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac80b760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac80b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f44ac822cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f44ac822cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8210a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac821230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8213c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac821550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8216e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac821870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac821a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac821b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac821d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac820020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8201b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac820340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8204d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac820760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8208f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f44ac88a810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f44ac88a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac88ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac88ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac889020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8891b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac889340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8894d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac889660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8897f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac889980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac889b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac889ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac889e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac888020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8882b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac888440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f44ac875810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f44ac875810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac875b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac875d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac874020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8741b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac874340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8744d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac874660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8747f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac874980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac874b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac874ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac874e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac873020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8732b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac873440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f44ac8429a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f44ac8429a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac842d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac841020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8411b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac841340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8414d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac841660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8417f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac841980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac841b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac841ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac841e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac840020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8401b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac840440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8405d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f44ac871810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f44ac871810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac871b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac871d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac870020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8701b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac870340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8704d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac870660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8707f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac870980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac870b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac870ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac870e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac86f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac86f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac86f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f44ac85d9a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f44ac85d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac85dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac85c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac85c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac85c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac85c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac85c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac85c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac85c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac85cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac85cca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac85ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac85b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac85b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac85b440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac85b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f44ac8489a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f44ac8489a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac848d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac847020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8471b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac847340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8474d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac847660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8477f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac847980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac847b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac847ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac847e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac846020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8461b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac846440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8465d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f44ac8389a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f44ac8389a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac838d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac837020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8371b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac837340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8374d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac837660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8377f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac837980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac837b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac837ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac837e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac836020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8361b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac836440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8365d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f44ac81ecc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f44ac81ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac81c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac81c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac81c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac81c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac81c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac81c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac81ca00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac81cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac81cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac81b020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac81b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac81b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac81b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac81b760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac81b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f44ac896800" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f44ac896800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac896b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac896d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac893020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8931b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac893340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8934d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac893660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8937f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac893980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac893b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac893ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac893e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac892020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8922b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac892440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f44ac880810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f44ac880810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac880b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac880d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac87f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac87f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac87f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac87f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac87f660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac87f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac87f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac87fb10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac87fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac87fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac87e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac87e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac87e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f44ac86b810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f44ac86b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac86bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac86bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac86a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac86a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac86a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac86a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac86a660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac86a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac86a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac86ab10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac86aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac86ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac869020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8692b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac869440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f44ac8579a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f44ac8579a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac857d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac856020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8561b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac856340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8564d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac856660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8567f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac856980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac856b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac856ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac856e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac855020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8551b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac855440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8555d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f44ac819cc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f44ac819cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8180a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac818230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8183c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac818550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8186e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac818870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac818a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac818b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac818d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac817020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8171b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac817340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8174d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac817760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8178f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f44ac813cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f44ac813cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8120a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac812230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8123c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac812550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8126e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac812870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac812a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac812b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac812d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac811020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8111b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac811340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8114d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac811760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8118f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f44ac807cb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f44ac807cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8060a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac806230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8063c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac806550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8066e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac806870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac806a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac806b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac806d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac805020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8051b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac805340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8054d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac805760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8058f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f44ac8539a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f44ac8539a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac853d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac852020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8521b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac852340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8524d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac852660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8527f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac852980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac852b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac852ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac852e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac851020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8511b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac851440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8515d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f44ac817cc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f44ac817cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8160a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac816230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8163c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac816550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8166e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac816870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac816a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac816b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac816d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac815020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8151b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac815340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8154d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac815760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8158f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f44ac88e810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f44ac88e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac88eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac88ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac88d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac88d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac88d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac88d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac88d660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac88d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac88d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac88db10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac88dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac88de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac88c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac88c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac88c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f44ac879810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f44ac879810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac879b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac879d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac878020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8781b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac878340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8784d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac878660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8787f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac878980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac878b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac878ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac878e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac877020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8772b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac877440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f44ac865810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f44ac865810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac865b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac865d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac864020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8641b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac864340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8644d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac864660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8647f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac864980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac864b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac864ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac864e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac863020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8632b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac863440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f44ac820cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f44ac820cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac81f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac81f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac81f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac81f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac81f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac81f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac81fa00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac81fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac81fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac81e020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac81e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac81e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac81e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac81e760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac81e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f44ac80bcb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f44ac80bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac80a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac80a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac80a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac80a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac80a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac80a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac80aa00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac80ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac80ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac809020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8091b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac809340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8094d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac809760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8098f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f44ac8619a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f44ac8619a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac861d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac860020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8601b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac860340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8604d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac860660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8607f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac860980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac860b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac860ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac860e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac85f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac85f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac85f440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac85f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f44ac84d9a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f44ac84d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac84dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac84b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac84b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac84b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac84b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac84b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac84b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac84b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac84bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac84bca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac84be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac84a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac84a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac84a440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac84a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f44ac83c9a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f44ac83c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac83cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac83b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac83b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac83b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac83b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac83b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac83b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac83b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac83bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac83bca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac83be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac83a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac83a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac83a440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac83a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f44ac888810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f44ac888810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac888b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac888d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac887020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8871b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac887340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8874d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac887660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8877f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac887980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac887b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac887ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac887e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac886020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8862b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac886440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f44ac8409a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f44ac8409a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac840d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac83f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac83f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac83f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac83f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac83f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac83f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac83f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac83fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac83fca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac83fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac83e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac83e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac83e440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac83e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f44ac884810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f44ac884810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac884b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac884d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac883020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8831b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac883340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8834d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac883660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8837f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac883980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac883b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac883ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac883e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac882020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8822b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac882440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f44ac86f810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f44ac86f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac86fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac86fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac86e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac86e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac86e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac86e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac86e660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac86e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac86e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac86eb10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac86eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac86ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac86d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac86d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac86d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f44ac85b9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f44ac85b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac85bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac85a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac85a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac85a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac85a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac85a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac85a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac85a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac85ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac85aca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac85ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac859020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8591b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac859440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8595d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f44ac8469a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f44ac8469a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac846d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac845020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8451b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac845340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8454d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac845660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8457f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac845980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac845b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac845ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac845e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac844020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8441b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac844440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8445d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f44ac8369a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f44ac8369a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac836d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac835020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8351b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac835340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8354d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac835660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8357f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac835980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac835b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac835ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac835e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac834020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8341b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac834440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8345d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f44ac892810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f44ac892810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac892b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac892d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac891020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8911b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac891340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8914d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac891660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8917f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac891980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac891b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac891ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac891e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac890020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8902b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac890440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f44ac87e810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f44ac87e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac87eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac87ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac87d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac87d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac87d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac87d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac87d660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac87d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac87d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac87db10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac87dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac87de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac87c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac87c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac87c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f44ac869810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f44ac869810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac869b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac869d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac868020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac8681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac868340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac8684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac868660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac8687f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac868980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac868b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac868ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac868e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac867020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac8672b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac867440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f44ac8559a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f44ac8559a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac855d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac854020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8541b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac854340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8544d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac854660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8547f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac854980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac854b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac854ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac854e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac853020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8531b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac853440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8535d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f44ac828ca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f44ac828ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8270a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac827230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8273c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac827550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8276e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac827870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac827a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac827b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac827d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac826020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8261b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac826340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8264d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac826760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8268f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f44ac811cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f44ac811cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8100a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac810230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8103c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac810550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8106e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac810870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac810a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac810b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac810d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac80f020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac80f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac80f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac80f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac80f760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac80f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f44ac82acc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f44ac82acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8290a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac829230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8293c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac829550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8296e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac829870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac829a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac829b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac829d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac828020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8281b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac828340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8284d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac828760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8288f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f44ac8519a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f44ac8519a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac851d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac850020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8501b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac850340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8504d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac850660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac8507f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac850980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac850b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac850ca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac850e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac84f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac84f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac84f440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac84f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f44ac805cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f44ac805cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8040a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac804230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8043c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac804550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac8046e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac804870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac804a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac804b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac804d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac803020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8031b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac803340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8034d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac803760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8038f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f44ac7ffcc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f44ac7ffcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7fe0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7fe230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7fe3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7fe550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7fe6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7fe870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7fea00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7feb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7fed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7fd020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7fd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7fd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7fd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7fd760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7fd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f44ac8329f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f44ac8329f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac8311c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac831350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac8314e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac831670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac831800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac831990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac831b20"/>
        <function-ref name="get" scoped="" ref="0x7f44ac831cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac831e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac830020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac8301b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac830340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac8304d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac830760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac8308f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7fad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7fad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7d30e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7d3270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7d3400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7d3590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7d3720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7d38b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7d3a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7d3bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7d3d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7d2020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7d21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7d2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7d24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7d2760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7d28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7cf740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7cf740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7cfac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7cfc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7cfde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7cd020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7cd1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7cd340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7cd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7cd660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7cd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7cd980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7cdb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7cdca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7cde30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7cc120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7cc2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7c9100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7c9100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7c9480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7c9610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7c97a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7c9930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7c9ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7c9c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7c9de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7c8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7c81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7c8340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7c84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7c8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7c87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7c8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7c8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7c5d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7c5d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7c40e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7c4270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7c4400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7c4590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7c4720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7c48b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7c4a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7c4bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7c4d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7c3020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7c31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7c3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7c34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7c3760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7c38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7c0740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7c0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7c0ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7c0c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7c0de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7bf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7bf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7bf340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7bf4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7bf660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7bf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7bf980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7bfb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7bfca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7bfe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7be120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7be2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7bb100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7bb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7bb480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7bb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7bb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7bb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7bbac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7bbc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7bbde0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7ba020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7ba1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7ba340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7ba4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7ba660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7ba7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7baa80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7bac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7b7d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7b7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7b60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7b6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7b6400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7b6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7b6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7b68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7b6a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7b6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7b6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7b5020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7b51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7b5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7b54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7b5760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7b58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7b2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7b2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7b2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7b2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7b2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7b1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7b11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7b1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7b14d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7b1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7b17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7b1980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7b1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7b1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7b1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7b0120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7b02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7ad100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7ad100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7ad480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7ad610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7ad7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7ad930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7adac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7adc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7adde0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7ac020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7ac1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7ac340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7ac4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7ac660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7ac7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7aca80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7acc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7a9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7a9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7a70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7a7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7a7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7a7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7a7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7a78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7a7a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7a7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7a7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7a6020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7a61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7a6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7a64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7a6760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7a68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac7a3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac7a3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7a3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac7a3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7a3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac7a2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7a21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7a2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7a24d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac7a2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7a27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac7a2980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7a2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac7a2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7a2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac7a1120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7a12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac79e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac79e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac79e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac79e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac79e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac79e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac79eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac79ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac79ede0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac79d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac79d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac79d340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac79d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac79d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac79d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac79da80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac79dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac79ad80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac79ad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac799180"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac799310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7994a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac799630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7997c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac799950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac799ae0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac799c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac799e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac798020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7981b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac798340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7984d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac798760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7988f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac795740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac795740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac795ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac795c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac795de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac794020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7941b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac794340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7944d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac794660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7947f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac794980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac794b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac794ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac794e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac793120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7932b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac790100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac790100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac790480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac790610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7907a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac790930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac790ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac790c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac790de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac78f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac78f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac78f340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac78f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac78f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac78f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac78fa80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac78fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac78cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac78cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac78b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac78b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac78b400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac78b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac78b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac78b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac78ba40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac78bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac78bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac78a020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac78a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac78a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac78a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac78a760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac78a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac787740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac787740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac787ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac787c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac787de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac786020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7861b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac786340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7864d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac786660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7867f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac786980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac786b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac786ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac786e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac785120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7852b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac781100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac781100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac781480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac781610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7817a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac781930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac781ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac781c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac781de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac780020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7801b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac780340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7804d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac780660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7807f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac780a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac780c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac77dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac77dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac77c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac77c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac77c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac77c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac77c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac77c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac77ca40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac77cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac77cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac77b020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac77b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac77b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac77b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac77b760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac77b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac778740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac778740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac778ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac778c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac778de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac777020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7771b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac777340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7774d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac777660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7777f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac777980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac777b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac777ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac777e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac776120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7762b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac773100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac773100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac773480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac773610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7737a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac773930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac773ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac773c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac773de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac772020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7721b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac772340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7724d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac772660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7727f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac772a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac772c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac76fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac76fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac76e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac76e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac76e400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac76e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac76e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac76e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac76ea40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac76ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac76ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac76d020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac76d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac76d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac76d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac76d760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac76d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac76a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac76a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac76aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac76ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac76ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac769020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7691b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac769340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7694d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac769660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7697f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac769980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac769b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac769ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac769e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac768120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7682b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac765100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac765100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac765480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac765610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7657a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac765930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac765ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac765c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac765de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac764020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7641b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac764340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7644d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac764660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7647f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac764a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac764c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac761e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac761e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac75f210"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac75f3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac75f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac75f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac75f850"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac75f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac75fb70"/>
        <function-ref name="get" scoped="" ref="0x7f44ac75fd00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac75e020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac75e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac75e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac75e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac75e660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac75e8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac75ea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac75b9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac75b9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac75bd70"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac75a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac75a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac75a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac75a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac75a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac75a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac75a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac75ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac75aca0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac75ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac759020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7591b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac759440"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7595d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac756460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac756460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7567e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac756970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac756b00"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac756c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac756e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac755020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7551b0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac755340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7554d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac755660"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7557f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac755980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac755b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac755da0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac754020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac752e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac752e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7511c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac751350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7514e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac751670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac751800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac751990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac751b20"/>
        <function-ref name="get" scoped="" ref="0x7f44ac751cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac751e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac750020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7501b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac750340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7504d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac750760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7508f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac74d740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac74d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac74dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac74dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac74dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac74c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac74c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac74c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac74c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac74c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac74c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac74c980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac74cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac74cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac74ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac74b120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac74b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac748100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac748100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac748480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac748610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7487a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac748930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac748ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac748c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac748de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac747020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7471b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac747340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7474d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac747660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7477f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac747a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac747c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac744d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac744d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7430e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac743270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac743400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac743590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac743720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7438b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac743a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac743bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac743d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac742020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7421b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac742340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7424d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac742760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7428f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac73f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac73f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac73fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac73fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac73fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac73e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac73e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac73e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac73e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac73e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac73e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac73e980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac73eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac73eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac73ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac73d120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac73d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac73a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac73a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac73a480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac73a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac73a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac73a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac73aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac73ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac73ade0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac738020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7381b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac738340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7384d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac738660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7387f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac738a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac738c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac735d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac735d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7340e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac734270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac734400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac734590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac734720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7348b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac734a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac734bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac734d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac733020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7331b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac733340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7334d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac733760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7338f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac730740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac730740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac730ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac730c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac730de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac72f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac72f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac72f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac72f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac72f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac72f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac72f980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac72fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac72fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac72fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac72e120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac72e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac72b100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac72b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac72b480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac72b610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac72b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac72b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac72bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac72bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac72bde0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac72a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac72a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac72a340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac72a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac72a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac72a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac72aa80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac72ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac727d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac727d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7260e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac726270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac726400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac726590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac726720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7268b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac726a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac726bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac726d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac725020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7251b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac725340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7254d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac725760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7258f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac722740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac722740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac722ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac722c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac722de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac721020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7211b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac721340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7214d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac721660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7217f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac721980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac721b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac721ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac721e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac720120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7202b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac71d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac71d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac71d480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac71d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac71d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac71d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac71dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac71dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac71dde0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac71c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac71c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac71c340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac71c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac71c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac71c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac71ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac71cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac719d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac719d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7180e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac718270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac718400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac718590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac718720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7188b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac718a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac718bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac718d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac717020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7171b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac717340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7174d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac717760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7178f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac713740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac713740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac713ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac713c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac713de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac712020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7121b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac712340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7124d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac712660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7127f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac712980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac712b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac712ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac712e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac711120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7112b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac70e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac70e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac70e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac70e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac70e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac70e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac70eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac70ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac70ede0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac70d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac70d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac70d340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac70d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac70d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac70d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac70da80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac70dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac70ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac70ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac7090e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac709270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac709400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac709590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac709720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac7098b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac709a40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac709bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac709d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac708020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac7081b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac708340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac7084d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac708760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7088f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac705740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac705740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac705ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac705c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac705de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac704020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac7041b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac704340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac7044d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac704660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac7047f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac704980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac704b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac704ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac704e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac703120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac7032b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac700100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac700100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac700480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac700610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac7007a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac700930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac700ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac700c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac700de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6ff020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac6ff1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac6ff340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6ff4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac6ff660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac6ff7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac6ffa80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac6ffc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac6fcd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac6fcd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac6fb0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac6fb270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac6fb400"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac6fb590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac6fb720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac6fb8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac6fba40"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6fbbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac6fbd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac6fa020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6fa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac6fa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac6fa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac6fa760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac6fa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac6f7740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac6f7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac6f7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac6f7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac6f7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac6f6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac6f61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac6f6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac6f64d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6f6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac6f67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac6f6980"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6f6b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac6f6ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac6f6e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac6f5120"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac6f52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f44ac6f2100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f44ac6f2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac6f2480"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac6f2610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac6f27a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac6f2930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac6f2ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac6f2c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac6f2de0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6f0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac6f01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac6f0340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6f04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac6f0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac6f07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac6f0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac6f0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f44ac683d20" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ac683d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac680b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac67f550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac67f090"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac67fa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f44ac67ed90" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f44ac67ed90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac67bbc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac679590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac6790d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac679a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f44ac665020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac665020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ac6653a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ac665530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ac6656c0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac665850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ac6659e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac665b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac665d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac664020"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac6641b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ac664340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ac6644d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f44ac677e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ac677e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac676ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac666670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac6661b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac666b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f44ac661020" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44ac661020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44ac6613a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44ac661530"/>
        <function-ref name="led1On" scoped="" ref="0x7f44ac6616c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44ac661850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44ac6619e0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac661b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44ac661d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44ac6604d0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac660020"/>
        <function-ref name="led0On" scoped="" ref="0x7f44ac6601b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f44ac660340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f44ac65a060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f44ac65a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac65a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac65a570"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac65a700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac65a890"/>
        <function-ref name="get" scoped="" ref="0x7f44ac65aa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac65abb0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac65ad40"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac659020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ac65d470" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ac65d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ac65d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f44ac659340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f44ac659340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac6596c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac659850"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac6599e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac659b70"/>
        <function-ref name="get" scoped="" ref="0x7f44ac659d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac654020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6541b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac654340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f44ac65da70" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44ac65da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44ac65ddf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44ac65c020"/>
        <function-ref name="led1On" scoped="" ref="0x7f44ac65c1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44ac65c340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44ac65c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac65c660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44ac65c7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44ac65ce30"/>
        <function-ref name="set" scoped="" ref="0x7f44ac65c980"/>
        <function-ref name="led0On" scoped="" ref="0x7f44ac65cb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f44ac65cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f44ac654660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f44ac654660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac6549e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac654b70"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac654d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac653020"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6531b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac653340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6534d0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac653660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f44ac65eb10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f44ac65eb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac637020"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac6371b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac637340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac6374d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac637660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac6377f0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac637980"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac637b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f44ac637e70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f44ac637e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac636220"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac6363b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac636540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac6366d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac636860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac6369f0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac636b80"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac636d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f44ac6342e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ac6342e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ac634660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f44ac6350f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f44ac6350f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac635470"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac635600"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac635790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac635920"/>
        <function-ref name="get" scoped="" ref="0x7f44ac635ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac635c40"/>
        <function-ref name="set" scoped="" ref="0x7f44ac635dd0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac634020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f44ac6202f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f44ac6202f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac620670"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac620800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac620990"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac620b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac620cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac620e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac61f020"/>
        <function-ref name="get" scoped="" ref="0x7f44ac61f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac61f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac61f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac61f660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac61f7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac61f980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac61fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac61fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f44ac631020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f44ac631020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac6313a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac631530"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac6316c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac631850"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6319e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac631b70"/>
        <function-ref name="set" scoped="" ref="0x7f44ac631d00"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac620020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f44ac61cde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f44ac61cde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac61b180"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac61b310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac61b4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac61b630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac61b7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac61b950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac61bae0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac61bc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac61be00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac61a020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac61a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac61a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac61a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac61a760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac61a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f44ac61db90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f44ac61db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac61c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac61c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac61c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac61c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac61c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac61c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac61c980"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac61cb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f44ac616930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f44ac616930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac616cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac616e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac615020"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac6151b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac615340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac6154d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac615660"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6157f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac615980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac615b10"/>
        <function-ref name="set" scoped="" ref="0x7f44ac615ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac615e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac614020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac6142b0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac614440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f44ac618710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f44ac618710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac618a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac618c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac618db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac616020"/>
        <function-ref name="get" scoped="" ref="0x7f44ac6161b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac616340"/>
        <function-ref name="set" scoped="" ref="0x7f44ac6164d0"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac616660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44abba5a90" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44abba5a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44abba5e10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44abba4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f44abb9ebe0" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f44abb9ebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44abb9d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f44abb96020" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44abb96020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44abb963a0"/>
        <function-ref name="configure" scoped="" ref="0x7f44abb96530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f44abb9d2b0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f44abb9d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f44abb9d630"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f44abb9d7c0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f44abb9d950"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f44abb9dae0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f44abb9dc70"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f44abb9de00"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f44abb9c020"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f44abb9c1b0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44abb9c340"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f44abb9c4d0"/>
        <function-ref name="getData" scoped="" ref="0x7f44abb9c660"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f44abb9c7f0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f44abb9c980"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f44abb9cc10"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f44abb9cda0"/>
        <function-ref name="getIV" scoped="" ref="0x7f44abb9b020"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f44abb9b1b0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f44abb9b340"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f44abb9b4d0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f44abb9b660"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f44abb9b7f0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f44abb9b980"/>
        <function-ref name="isI2C" scoped="" ref="0x7f44abb9bb10"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f44abb9bca0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f44abb9be30"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f44abb9a220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f44abb9a3b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f44abb9a540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f44abb9a6d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f44abb9a860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f44abb9a9f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f44abb9ab80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f44abb9ad10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f44abb99020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f44abb991b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f44abb99340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f44abb994d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f44abb99660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f44abb997f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f44abb99980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f44abb99b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f44abb99ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f44abb99e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f44abb98020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f44abb981b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f44abb98340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f44abb984d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f44abb98660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f44abb987f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f44abb98d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f44abb97020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f44abb971b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f44abb97340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f44abb974d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f44abb97660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f44abb977f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f44abb97980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f44abb97b10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f44abb97ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f44abb9e440" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f44abb9e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44abb9e7c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f44abb9e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44abba6e00" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44abba6e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44abba51c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44abba5350"/>
        <function-ref name="request" scoped="" ref="0x7f44abba54e0"/>
        <function-ref name="granted" scoped="" ref="0x7f44abba5670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44abba5800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f44abba4a50" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f44abba4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f44abba4dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f44abba2020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f44abba21b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f44abba2340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f44abba24d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f44abba2660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f44abba27f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f44abba2980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f44abba2b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f44abba2ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f44abba2e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f44abba1020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f44abba11b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f44abba1440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f44abba15d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f44abba1760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f44abba18f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f44abba1a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f44abba1c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f44abba1da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f44abba0020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f44abba01b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f44abba0340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f44abba04d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44abba0660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f44abba09f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f44abba0b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f44abba0d10"/>
        <function-ref name="tx" scoped="" ref="0x7f44abb9f020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f44abb9f1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f44abb9f340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f44abb9f4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f44abb9f660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f44abb9f7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f44abb9f980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f44abb9fb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f44abb9fca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f44abb9fe30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f44abb9e020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f44abb9e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f44abba42b0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44abba42b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44abba4630"/>
        <function-ref name="userId" scoped="" ref="0x7f44abba47c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44ac5e72c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac5e72c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44ac5e7640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ac5e77d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f44ac5e68a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac5e68a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44ac5e6c20"/>
        <function-ref name="configure" scoped="" ref="0x7f44ac5e6db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f44ac5eb4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f44ac5eb4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44ac5eb850"/>
        <function-ref name="txDone" scoped="" ref="0x7f44ac5eb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ac5e8020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac5e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac5e83a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac5e8530"/>
        <function-ref name="request" scoped="" ref="0x7f44ac5e86c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac5e8850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac5e89e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f44ac5ea3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac5ea3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44ac5ea770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f44ac5e7ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac5e7ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ac5e7e50"/>
        <function-ref name="userId" scoped="" ref="0x7f44ac5e6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f44ac5d1bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac5d1bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ac5d0020"/>
        <function-ref name="userId" scoped="" ref="0x7f44ac5d01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f44ac5e4d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f44ac5e4d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44ac5e3180"/>
        <function-ref name="txDone" scoped="" ref="0x7f44ac5e3310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f44ac5d15e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f44ac5d15e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44ac5d1960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f44ac5e3710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f44ac5e3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f44ac5e3ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f44ac5e3d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f44ac5e3d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f44ac5d1180"/>
        <function-ref name="txDone" scoped="" ref="0x7f44ac5d1310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44ac557020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac557020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44ac5573c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ac557550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f44ac556cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac556cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44ac5550a0"/>
        <function-ref name="configure" scoped="" ref="0x7f44ac555230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f44ac5577a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f44ac5577a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac557b20"/>
        <function-ref name="requested" scoped="" ref="0x7f44ac557cb0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac557e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac556020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ac5561b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ac558210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac558210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac5585b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac558740"/>
        <function-ref name="request" scoped="" ref="0x7f44ac5588d0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac558a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac558bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f44ac556400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac556400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ac556780"/>
        <function-ref name="userId" scoped="" ref="0x7f44ac556910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ab7cec00" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ab7cec00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ab7cd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f44ab7cd2b0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f44ab7cd2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f44ab7cd630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f44ab7cd7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f44ab7cd950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f44ab7cdae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44ab7c73a0" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ab7c73a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44ab7c7740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ab7c78d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f44ab7c5210" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ab7c5210"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44ab7c55b0"/>
        <function-ref name="configure" scoped="" ref="0x7f44ab7c5740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f44ab7c59d0" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f44ab7c59d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f44ab7c5d50"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f44ab7c4020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f44ab7c41b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f44ab7c4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f44ab7c7b20" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f44ab7c7b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab7c6020"/>
        <function-ref name="requested" scoped="" ref="0x7f44ab7c61b0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab7c6340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab7c64d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ab7c6660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44ab7c4590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44ab7c4590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44ab7c4910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44ab7c4aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f44ab7c4c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44ab7c4dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44ab7c3020"/>
        <function-ref name="get" scoped="" ref="0x7f44ab7c31b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44ab7c3340"/>
        <function-ref name="led0On" scoped="" ref="0x7f44ab7c3980"/>
        <function-ref name="set" scoped="" ref="0x7f44ab7c3660"/>
        <function-ref name="led2On" scoped="" ref="0x7f44ab7c34d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44ab7c37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab7c84d0" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab7c84d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab7c8870"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab7c8a00"/>
        <function-ref name="request" scoped="" ref="0x7f44ab7c8b90"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab7c8d20"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab7c7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f44ab7c68b0" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ab7c68b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ab7c6c30"/>
        <function-ref name="userId" scoped="" ref="0x7f44ab7c6dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f44ab7c3c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f44ab7c3c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44ab7c2020"/>
        <function-ref name="runTask" scoped="" ref="0x7f44ab7c21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f44ac54ed70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f44ac54ed70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f44ac54b180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f44ac54b310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f44ac54b4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f44ac54b630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f44ac54b7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f44ac54b950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f44ac54bae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f44ac54bc70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ac54be00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f44ac54a020"/>
        <function-ref name="getData" scoped="" ref="0x7f44ac54a1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f44ac54a340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f44ac54a4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f44ac54a760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f44ac54a8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f44ac54aa80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f44ac54ac10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f44ac54ada0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f44ac549020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f44ac5491b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f44ac549340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f44ac5494d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f44ac549660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f44ac5497f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f44ac549980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f44ac549d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f44ac548020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f44ac5481b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f44ac548340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f44ac5484d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f44ac548660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f44ac5487f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f44ac548980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f44ac548b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f44ac548ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f44ac548e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f44ac547020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f44ac5471b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f44ac547340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f44ac5474d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f44ac547660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f44ac5477f0"/>
        <function-ref name="setData" scoped="" ref="0x7f44ac547980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f44ac547b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f44ac547ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f44ac547e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f44ac546020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f44ac5461b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f44ac546340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f44ac5468d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f44ac546a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f44ac546bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f44ac546d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f44ac545020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f44ac5451b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f44ac545340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f44ac5454d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f44ac545660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f44ac5457f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f44ac53b700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f44ac53b700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f44ac53ba80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f44ac53bc10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f44ac53bda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f44ac53a020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f44ac53a1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f44ac53a340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f44ac53a4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f44ac53a660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f44ac53a7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f44ac53a980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f44ac53ab10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f44ac53aca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f44ac53ae30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f44ac539120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f44ac5392b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f44ac539440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f44ac5395d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f44ac539760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f44ac5398f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f44ac539a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f44ac539c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f44ac539da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f44ac538020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f44ac5381b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac538340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f44ac5386d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f44ac538860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f44ac5389f0"/>
        <function-ref name="tx" scoped="" ref="0x7f44ac538b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f44ac538d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f44ac537020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f44ac5371b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f44ac537340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f44ac5374d0"/>
        <function-ref name="rx" scoped="" ref="0x7f44ac537660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f44ac5377f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f44ac537980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f44ac537b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f44ac537ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f44ac537e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f44ac5341f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f44ac5341f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac534570"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac534700"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac534890"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac534a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac534bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac534d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac533020"/>
        <function-ref name="get" scoped="" ref="0x7f44ac5331b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac533340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac5334d0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac533660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac5337f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac533980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac533c10"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac533da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f44ac544940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f44ac544940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f44ac544cc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f44ac544e50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f44ac541020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f44ac5411b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f44ac541340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f44ac5414d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f44ac541660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f44ac5417f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ac541980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f44ac541b10"/>
        <function-ref name="getData" scoped="" ref="0x7f44ac541ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f44ac541e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f44ac540020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f44ac5402b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f44ac540440"/>
        <function-ref name="getIV" scoped="" ref="0x7f44ac5405d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f44ac540760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f44ac5408f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f44ac540a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f44ac540c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f44ac540da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f44ac53f020"/>
        <function-ref name="isI2C" scoped="" ref="0x7f44ac53f1b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f44ac53f340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f44ac53f4d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f44ac53f860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f44ac53f9f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f44ac53fb80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f44ac53fd10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f44ac53e020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f44ac53e1b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f44ac53e340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f44ac53e4d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f44ac53e660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f44ac53e7f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f44ac53e980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f44ac53eb10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f44ac53eca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f44ac53ee30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f44ac53d020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f44ac53d1b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f44ac53d340"/>
        <function-ref name="setData" scoped="" ref="0x7f44ac53d4d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f44ac53d660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f44ac53d7f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f44ac53d980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f44ac53db10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f44ac53dca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f44ac53de30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f44ac53c420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f44ac53c5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f44ac53c740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f44ac53c8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f44ac53ca60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f44ac53cbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f44ac53cd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f44ac53b020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f44ac53b1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f44ac53b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f44ac536250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f44ac536250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac5365d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac536760"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac5368f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac536a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac536c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac536da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac535020"/>
        <function-ref name="get" scoped="" ref="0x7f44ac5351b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac535340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac5354d0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac535660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac5357f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac535980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac535c10"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac535da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f44ac484920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f44ac484920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f44ac484ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f44ac483020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac483020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac4833a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac483530"/>
        <function-ref name="request" scoped="" ref="0x7f44ac4836c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac483850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac4839e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f44ac4840c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f44ac4840c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f44ac484440"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac4845d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f44ac46fa30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f44ac46fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f44ac46fdb0"/>
        <function-ref name="offset" scoped="" ref="0x7f44ac46c020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f44ac46c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f44ac451bf0" loc="43:../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f44ac451bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f44ac42cae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f44ac42b880"/>
        <function-ref name="element" scoped="" ref="0x7f44ac429020"/>
        <function-ref name="full" scoped="" ref="0x7f44ac42dce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f44ac42c660"/>
        <function-ref name="dequeue" scoped="" ref="0x7f44ac42b1d0"/>
        <function-ref name="empty" scoped="" ref="0x7f44ac42d860"/>
        <function-ref name="size" scoped="" ref="0x7f44ac42c1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f44ac421a20" loc="93:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f44ac421a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f44ac422920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f44ac41f6d0"/>
        <function-ref name="element" scoped="" ref="0x7f44ac41fd40"/>
        <function-ref name="full" scoped="" ref="0x7f44ac423af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f44ac4224a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f44ac41f020"/>
        <function-ref name="empty" scoped="" ref="0x7f44ac423670"/>
        <function-ref name="size" scoped="" ref="0x7f44ac422020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f44ac41e440" loc="94:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f44ac41e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f44ac41e7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44ac41e950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44ac41eae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f44ac41ec70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f44ac41ee00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f44ac41d0c0" loc="95:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f44ac41d0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ac41d440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f44ac41d5d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f44ac41d760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f44ac41d8f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f44ac41da80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f44ac417500" loc="114:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7f44ac417500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44ac417880"/>
        <function-ref name="runTask" scoped="" ref="0x7f44ac417a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ac428a60" loc="89:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ac428a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ac428de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44ac41dd00" loc="96:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44ac41dd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44ac41c0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44ac41c230"/>
        <function-ref name="led1On" scoped="" ref="0x7f44ac41c3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44ac41c550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44ac41c6e0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac41c870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44ac41ca00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44ac41b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f44ac41cb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f44ac41cd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f44ac41b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f44ac4211a0" loc="90:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f44ac4211a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f44ac421520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f44ac400be0" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f44ac400be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f44ac3fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ac3fa020" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ac3fa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ac3fa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f44ac3fa680" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f44ac3fa680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f44ac3faa00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f44ac3f4380" loc="39:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f44ac3f4380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f44ac3f4700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f44ac3f4aa0" loc="40:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f44ac3f4aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44ac3f4e20"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44ac3f1020"/>
        <function-ref name="start" scoped="" ref="0x7f44ac3f11b0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac3f1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TEA" ref="0x7f44ac3e6bc0" loc="2:../../../tos/platforms/shimmer2r/TEAC.nc">
      <component-ref qname="TEAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TEA" scoped="" ref="0x7f44ac3e6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TEA"/>
      </instance>
      <interface-functions>
        <function-ref name="decrypt" scoped="" ref="0x7f44ac3eb020"/>
        <function-ref name="lsb" scoped="" ref="0x7f44ac3eb1b0"/>
        <function-ref name="msb" scoped="" ref="0x7f44ac3eb340"/>
        <function-ref name="encrypt" scoped="" ref="0x7f44ac3eb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TEA" ref="0x7f44ac3e42b0" loc="2:../../../tos/platforms/shimmer2r/TEAP.nc">
      <component-ref qname="TEAP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TEA" scoped="" ref="0x7f44ac3e42b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TEA"/>
      </instance>
      <interface-functions>
        <function-ref name="decrypt" scoped="" ref="0x7f44ac3e4630"/>
        <function-ref name="lsb" scoped="" ref="0x7f44ac3e47c0"/>
        <function-ref name="msb" scoped="" ref="0x7f44ac3e4950"/>
        <function-ref name="encrypt" scoped="" ref="0x7f44ac3e4ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f44ac3ece00" loc="51:../../../tos/platforms/shimmer/DemoSensorC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f44ac3ece00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ac3e5a80"/>
        <function-ref name="readDone" scoped="" ref="0x7f44abe0a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f44ab781020" loc="44:../../../tos/platforms/shimmer/VoltageC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f44ab781020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ab781c10"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab7800d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f44ab77e020" loc="44:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f44ab77e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ab77ec10"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab77d0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f44ab778140" loc="48:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f44ab778140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ab778d70"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab777260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f44ab77d7b0" loc="45:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f44ab77d7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f44ab77a2a0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f44ab77b400"/>
        <function-ref name="read" scoped="" ref="0x7f44ab77bd70"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab77ad50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab779340" loc="47:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab779340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab7796c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab779850"/>
        <function-ref name="request" scoped="" ref="0x7f44ab7799e0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab779b70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab779d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f44ab7738d0" loc="48:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f44ab7738d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ab772560"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab7729e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44ab7711c0" loc="49:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab7711c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab771df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResourceReadNow" ref="0x7f44ac3846e0" loc="46:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f44ac3846e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac384a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac384bf0"/>
        <function-ref name="request" scoped="" ref="0x7f44ac384d80"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac383020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac3831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f44ac38c390" loc="38:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f44ac38c390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ac38b020"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ac38b4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f44ac389210" loc="39:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f44ac389210"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ac389e40"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ac388340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceReadNow" ref="0x7f44ac387020" loc="40:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceReadNow" scoped="" ref="0x7f44ac387020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac3873a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac387530"/>
        <function-ref name="request" scoped="" ref="0x7f44ac3876c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac387850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac3879e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f44ac383d40" loc="48:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f44ac383d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ac3829c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f44ac37f450" loc="49:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac37f450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ac37f7d0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44ac37f960"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44ac37faf0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44ac37fc80"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44ac37fe10"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44ac37e020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44ac37e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceRead" ref="0x7f44ac385390" loc="44:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRead" scoped="" ref="0x7f44ac385390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac385710"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac3858a0"/>
        <function-ref name="request" scoped="" ref="0x7f44ac385a30"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac385bc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac385d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x7f44ac354e40" loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x7f44ac354e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44ac3531e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f44ac353370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f44ab75d400" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f44ab75d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ab75d780"/>
        <function-ref name="configure" scoped="" ref="0x7f44ab75d910"/>
        <function-ref name="dataReady" scoped="" ref="0x7f44ab75daa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f44ab75e400" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab75e400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ab75e780"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44ab75e910"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44ab75eaa0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44ab75ec30"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44ab75edc0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44ab75d020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44ab75d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f44ab75dcf0" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f44ab75dcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f44ab75c0a0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f44ab75c230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44ab75c660" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab75c660"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab75a3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab75f660" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab75f660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab75f9e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab75fb70"/>
        <function-ref name="request" scoped="" ref="0x7f44ab75fd00"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab75e020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab75e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f44ac316960" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac316960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ac316ce0"/>
        <function-ref name="configure" scoped="" ref="0x7f44ac316e70"/>
        <function-ref name="dataReady" scoped="" ref="0x7f44ac315030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f44ac3131d0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f44ac3131d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f44ac313550"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac3136e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f44ac315920" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f44ac315920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f44ac315ca0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f44ac315e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f44ac3171d0" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac3171d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ac317550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44ac3176e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44ac317870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44ac317a00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44ac317b90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44ac317d20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44ac316020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ac324cc0" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac324cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac3190a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac319230"/>
        <function-ref name="request" scoped="" ref="0x7f44ac3193c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac319550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac3196e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f44ac30caf0" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f44ac30caf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ac30ce70"/>
        <function-ref name="configure" scoped="" ref="0x7f44ac30b030"/>
        <function-ref name="dataReady" scoped="" ref="0x7f44ac30b1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f44ac2fa0d0" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac2fa0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f44ac2fa450"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f44ac2fa5e0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f44ac2fa770"/>
        <function-ref name="isBusy" scoped="" ref="0x7f44ac2fa900"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f44ac2faa90"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f44ac2fac20"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f44ac2fadb0"/>
        <function-ref name="startConversion" scoped="" ref="0x7f44ac307020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f44ac3071b0"/>
        <function-ref name="getMem" scoped="" ref="0x7f44ac307340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f44ac3074d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f44ac307660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f44ac3077f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f44ac307a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f44ac307c10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7f44ac2ecc80" loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f44ac2ecc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2eb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2eb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2eb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2eb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2eb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2eb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2eba00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2ebb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2ebd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2ea020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2ea1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2ea340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2ea4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2ea760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2ea8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7f44ac2f6e60" loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f44ac2f6e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ac2f5210"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ac2f53a0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ac2f5530"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ac2f56c0"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac2f5850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7f44ac2f9880" loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f44ac2f9880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ac2f9c00"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ac2f9d90"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ac2f8020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ac2f81b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ac2f8340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ac2f84d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ac2f8660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ac2f87f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ac2f8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f44ac309910" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f44ac309910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f44ac309c90"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac309e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7f44ac2f1c80" loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f44ac2f1c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2ef0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2ef230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2ef3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2ef550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2ef6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2ef870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2efa00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2efb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2efd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2ee020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2ee1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2ee340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2ee4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2ee760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2ee8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f44ac30bab0" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f44ac30bab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f44ac30be30"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f44ac309020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7f44ac2e6c80" loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f44ac2e6c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2e50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2e5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2e53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2e5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2e56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2e5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2e5a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2e5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2e5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2e4020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2e41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2e4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2e44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2e4760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2e48f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7f44ac2f5be0" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f44ac2f5be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2f40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2f4230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2f43c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2f4550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2f46e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2f4870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2f4a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2f4b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2f4d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2f3020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2f31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2f3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2f34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2f3760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2f38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ac30e660" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ac30e660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ac30e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7f44ac2eac80" loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f44ac2eac80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2e90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2e9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2e93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2e9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2e96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2e9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2e9a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2e9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2e9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2e8020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2e81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2e8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2e84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2e8760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2e88f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7f44ac306020" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f44ac306020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ac3063a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ac306530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ac3066c0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac306850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ac3069e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac306b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac306d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac2f9020"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac2f91b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ac2f9340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ac2f94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7f44ac308280" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f44ac308280"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ac308600"/>
        <function-ref name="userId" scoped="" ref="0x7f44ac308790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7f44ac2f8d30" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f44ac2f8d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ac2f70e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ac2f7270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ac2f7400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ac2f7590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ac2f7720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ac2f78b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ac2f7a40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ac2f7bd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ac2f7d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f44ac30d370" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f44ac30d370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ac30d6f0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44ac30d880"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44ac30da10"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44ac30dba0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44ac30dd30"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44ac30c020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44ac30c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7f44ac2eec80" loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f44ac2eec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2ed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2ed230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2ed3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2ed550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2ed6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2ed870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2eda00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2edb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2edd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2ec020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2ec1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2ec340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2ec4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2ec760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2ec8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7f44ac2f6120" loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f44ac2f6120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ac2f64a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ac2f6630"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ac2f67c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ac2f6950"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac2f6ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7f44ac2f3c80" loc="55:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f44ac2f3c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2f20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2f2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2f23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2f2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2f26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2f2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2f2a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2f2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2f2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2f1020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2f11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2f1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2f14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2f1760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2f18f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7f44ac2e8c80" loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f44ac2e8c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f44ac2e70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f44ac2e7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f44ac2e73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f44ac2e7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f44ac2e76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f44ac2e7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f44ac2e7a00"/>
        <function-ref name="get" scoped="" ref="0x7f44ac2e7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f44ac2e7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f44ac2e6020"/>
        <function-ref name="set" scoped="" ref="0x7f44ac2e61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f44ac2e6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f44ac2e64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f44ac2e6760"/>
        <function-ref name="clr" scoped="" ref="0x7f44ac2e68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7f44ac227020" loc="46:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac227020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f44ac2273a0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f44ac227530"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f44ac2276c0"/>
        <function-ref name="isBusy" scoped="" ref="0x7f44ac227850"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f44ac2279e0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f44ac227b70"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f44ac227d00"/>
        <function-ref name="startConversion" scoped="" ref="0x7f44ac226020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f44ac2261b0"/>
        <function-ref name="getMem" scoped="" ref="0x7f44ac226340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f44ac2264d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f44ac226660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f44ac2267f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f44ac226a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f44ac226c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44ac1973a0" loc="86:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ac1973a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44ac197740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ac1978d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f44ac196570" loc="89:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ac196570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44ac196910"/>
        <function-ref name="configure" scoped="" ref="0x7f44ac196aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ac198520" loc="85:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ac198520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac1988c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac198a50"/>
        <function-ref name="request" scoped="" ref="0x7f44ac198be0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac198d70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac197020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f44ac197b20" loc="87:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ac197b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ac196020"/>
        <function-ref name="userId" scoped="" ref="0x7f44ac1961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ab737060" loc="44:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ab737060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ab7373e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7f44ab737670" loc="45:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f44ab737670"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f44ab7379f0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f44ab737b80"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f44ab737d10"/>
        <function-ref name="dequeue" scoped="" ref="0x7f44ab736020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f44ab733530" loc="52:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f44ab733530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f44ab7338d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f44ab733a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f44ab732610" loc="56:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f44ab732610"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f44ab7329b0"/>
        <function-ref name="configure" scoped="" ref="0x7f44ab732b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f44ab732dd0" loc="57:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f44ab732dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f44ab731180"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f44ab731310"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f44ab7314a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f44ab731630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab7356c0" loc="51:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab7356c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab735a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab735bf0"/>
        <function-ref name="request" scoped="" ref="0x7f44ab735d80"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab733020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab7331b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f44ab733cb0" loc="53:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f44ab733cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f44ab7320a0"/>
        <function-ref name="userId" scoped="" ref="0x7f44ab732230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f44ab731900" loc="68:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f44ab731900"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44ab731c80"/>
        <function-ref name="runTask" scoped="" ref="0x7f44ab731e10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f44ac179740" loc="55:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f44ac179740"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ac1783d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f44ac17a1d0" loc="54:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f44ac17a1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac17a550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac17a6e0"/>
        <function-ref name="request" scoped="" ref="0x7f44ac17a870"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac17aa00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac17ab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f44ac17fd20" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f44ac17fd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac17c0e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac17c270"/>
        <function-ref name="request" scoped="" ref="0x7f44ac17c400"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac17c590"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac17c720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f44ac16f9a0" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f44ac16f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f44ac16fd20"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f44ac16e020"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f44ac16e1b0"/>
        <function-ref name="isBusy" scoped="" ref="0x7f44ac16e340"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f44ac16e4d0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f44ac16e660"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f44ac16e7f0"/>
        <function-ref name="startConversion" scoped="" ref="0x7f44ac16e980"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f44ac16eb10"/>
        <function-ref name="getMem" scoped="" ref="0x7f44ac16eca0"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f44ac16ee30"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f44ac16d020"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f44ac16d1b0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f44ac16d440"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f44ac16d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7f44ac15e840" loc="45:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f44ac15e840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ac15acf0"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac15b300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44ac15a0d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44ac15bc00"/>
        <function-ref name="getdt" scoped="" ref="0x7f44ac159660"/>
        <function-ref name="gett0" scoped="" ref="0x7f44ac1591e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ac15b780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44ac15d480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44ac15a6e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44ac15d950"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac15de20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7f44ac170e00" loc="39:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f44ac170e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44ac16f1c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44ac16f350"/>
        <function-ref name="start" scoped="" ref="0x7f44ac16f4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac16f670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7f44ac159d00" loc="46:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f44ac159d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ac154220"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac1567c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44ac155590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44ac155110"/>
        <function-ref name="getdt" scoped="" ref="0x7f44ac154b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f44ac1546a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ac156c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44ac158940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44ac155ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44ac158e10"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac156340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7f44ac170240" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f44ac170240"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44ac1705c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44ac170750"/>
        <function-ref name="start" scoped="" ref="0x7f44ac1708e0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac170a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7f44ac16c2b0" loc="44:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f44ac16c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ac15f870"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac16be40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44ac160c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44ac160780"/>
        <function-ref name="getdt" scoped="" ref="0x7f44ac15e1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f44ac15fcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ac160300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44ac16b020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44ac15f260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44ac16b4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac16b9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f44ac104920" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f44ac104920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ac1035a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7f44ac105540" loc="42:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f44ac105540"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44ac1058c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44ac105a50"/>
        <function-ref name="start" scoped="" ref="0x7f44ac105be0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac105d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f44ac108ad0" loc="40:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f44ac108ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac108e50"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac107020"/>
        <function-ref name="request" scoped="" ref="0x7f44ac1071b0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac107340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac1074d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f44ac1096f0" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f44ac1096f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ac109a70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ac109c00"/>
        <function-ref name="request" scoped="" ref="0x7f44ac109d90"/>
        <function-ref name="granted" scoped="" ref="0x7f44ac108020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ac1081b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7f44ac1012a0" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7f44ac1012a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44ac101620"/>
        <function-ref name="runTask" scoped="" ref="0x7f44ac1017b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7f44ac107860" loc="41:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f44ac107860"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f44ac107be0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f44ac107d70"/>
        <function-ref name="start" scoped="" ref="0x7f44ac105020"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac1051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44abf41370" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abf41370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abf3d870"/>
        <function-ref name="fired" scoped="" ref="0x7f44abf3fe40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abf3ec00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abf3e780"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abf3c1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abf3dcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abf3e300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abf3f020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abf3d260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abf3f4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abf3f9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f44ac0c8020" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ac0c4630"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac0c6a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44ac0c5920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44ac0c54a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f44ac0c3020"/>
        <function-ref name="gett0" scoped="" ref="0x7f44ac0c4ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ac0c5020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44ac0c8c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44ac0c4020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44ac0c6110"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac0c65e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f44ac0bfc30" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f44ac0bfc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ac0ba110"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac0bd6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44ac0bb4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44ac0bb020"/>
        <function-ref name="getdt" scoped="" ref="0x7f44ac0baa10"/>
        <function-ref name="gett0" scoped="" ref="0x7f44ac0ba590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ac0bdb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44ac0be860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44ac0bbab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44ac0bed30"/>
        <function-ref name="stop" scoped="" ref="0x7f44ac0bd220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f44ac0b5500" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f44ac0b5500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac0b7170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ac0c3e50" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ac0c3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ac0bf210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44abfdd870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44abfdd870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abfd9090"/>
        <function-ref name="fired" scoped="" ref="0x7f44abfda090"/>
        <function-ref name="startAt" scoped="" ref="0x7f44abfdaa10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abfda550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44abfd9550"/>
        <function-ref name="start" scoped="" ref="0x7f44abfdb6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abfdbbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44abfdd020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44abfdd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44abfdd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44ab6fd140" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44ab6fd140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab6fbb30"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6fc9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab6fb4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab6fb020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab6f9020"/>
        <function-ref name="start" scoped="" ref="0x7f44ab6fc020"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab6fc530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ab6fe860" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ab6fe860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ab6febe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f44ab6e4a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab6e4a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ab6e4e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ab6e3020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ab6e31b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ab6e3340"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6e34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f44ab6e7020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab6e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ab6e73a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ab6e7530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab6e76c0"/>
        <function-ref name="get" scoped="" ref="0x7f44ab6e7850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab6e79e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ab6e7b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ab6e7d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ab6e6020"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ab6e61b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ab6e6340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ab6e64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f44ab6e6760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab6e6760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ab6e6ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ab6e6c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab6e6e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ab6e4020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ab6e41b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab6e4340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ab6e44d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ab6e4660"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ab6e47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f44ac0933f0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ac0933f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ac093770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ac093900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ac093a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ac093c20"/>
        <function-ref name="fired" scoped="" ref="0x7f44ac093db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f44ac09acd0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ac09acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ac0970a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ac097230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ac0973c0"/>
        <function-ref name="get" scoped="" ref="0x7f44ac097550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ac0976e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac097870"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ac097a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac097b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac097d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ac096020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ac0961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f44ac096a40" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ac096a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ac096dc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ac094020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ac0941b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ac094340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ac0944d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ac094660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ac0947f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ac094980"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ac094b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f44ab6da760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab6da760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ab6daae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ab6dac70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ab6dae00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ab6d9020"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6d91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f44ab6dedd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab6dedd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ab6dd180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ab6dd310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab6dd4a0"/>
        <function-ref name="get" scoped="" ref="0x7f44ab6dd630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab6dd7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ab6dd950"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ab6ddae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ab6ddc70"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ab6dde00"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ab6dc020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ab6dc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44ab6e1bf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44ab6e1bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab6de4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6df4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab6dfe60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab6df9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab6de9a0"/>
        <function-ref name="start" scoped="" ref="0x7f44ab6e0a80"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab6df020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ab6e1360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ab6e1360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ab6e16e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f44ab6dc440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab6dc440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ab6dc7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ab6dc950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab6dcae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ab6dcc70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ab6dce00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab6da020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ab6da1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ab6da340"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ab6da4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f44ac041b70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ac041b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac03d9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac03c360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac03de70"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac03c820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f44ac01b0f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f44ac01b0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac01a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac01a9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac01a4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac01ae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f44ac039cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ac039cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ac01db60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ac01c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ac01c090"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ac01ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44ab6f75f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44ab6f75f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab6f5e50"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6f6e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab6f5800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab6f5340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab6f4340"/>
        <function-ref name="start" scoped="" ref="0x7f44ab6f6430"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab6f6940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f44ab6f1d20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f44ab6f1d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab6ee670"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6ef550"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab6ee020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab6efa10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab6eeb30"/>
        <function-ref name="start" scoped="" ref="0x7f44ab6f0b60"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab6ef090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f44ab6f49b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ab6f49b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ab6f27e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ab6f11b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ab6f2ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ab6f1670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f44abfa79c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f44abfa79c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44abfa7d40"/>
        <function-ref name="runTask" scoped="" ref="0x7f44abfa6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f44abfab850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44abfab850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abfa7090"/>
        <function-ref name="fired" scoped="" ref="0x7f44abfa9090"/>
        <function-ref name="startAt" scoped="" ref="0x7f44abfa9a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abfa9550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44abfa7550"/>
        <function-ref name="start" scoped="" ref="0x7f44abfaa6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abfaabb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44abfb02f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abfb02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abfac870"/>
        <function-ref name="fired" scoped="" ref="0x7f44abfafe40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abfaec00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abfae780"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abfab1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abfaccf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abfae300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abfaf020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abfac260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abfaf4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abfaf9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f44abf56a00" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f44abf56a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44abf56d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f44abf55020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f44abf5b640" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f44abf5b640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abf57c40"/>
        <function-ref name="fired" scoped="" ref="0x7f44abf591e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abf57020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abf59ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abf56590"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abf56110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abf59660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abf5a390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abf57630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abf5a860"/>
        <function-ref name="stop" scoped="" ref="0x7f44abf5ad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44abf61150" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abf61150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abf5d700"/>
        <function-ref name="fired" scoped="" ref="0x7f44abf60c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abf5ea50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abf5e5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abf5b090"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abf5dba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abf5e110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abf61d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abf5d0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abf602a0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abf60790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f44abf53790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f44abf53790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44abf523f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f44abf52a60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44abf52a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44abf48890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44abf46260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44abf48d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f44abf46720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44abf3ad10" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abf3ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abf36220"/>
        <function-ref name="fired" scoped="" ref="0x7f44abf387c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abf37590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abf37110"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abf36b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abf366a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abf38c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abf39940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abf37ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abf39e10"/>
        <function-ref name="stop" scoped="" ref="0x7f44abf38340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44abf33750" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abf33750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abf30c40"/>
        <function-ref name="fired" scoped="" ref="0x7f44abf311e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abf30020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abf31ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abf2e590"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abf2e110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abf31660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abf32390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abf30630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abf32860"/>
        <function-ref name="stop" scoped="" ref="0x7f44abf32d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f44ab74d020" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f44ab74d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab74dc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f44ab74b2a0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f44ab74b2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab74a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44ab76b260" loc="49:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab76b260"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab769020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f44ab76e4f0" loc="48:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f44ab76e4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f44ab76c020"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f44ab76d110"/>
        <function-ref name="read" scoped="" ref="0x7f44ab76da80"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab76cad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Adc12SingleChannel" ref="0x7f44abef7720" loc="23:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44abef7720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44abef7aa0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44abef7c30"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44abef7dc0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44abef6020"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44abef61b0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44abef6340"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44abef64d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44abef8020" loc="22:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abef8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44abef8c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f44abefd9f0" loc="20:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f44abefd9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f44abefb4f0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f44abefc670"/>
        <function-ref name="read" scoped="" ref="0x7f44abefb020"/>
        <function-ref name="readDone" scoped="" ref="0x7f44abefa020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f44abef6ce0" loc="24:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44abef6ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44abef50a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44abef5230"/>
        <function-ref name="request" scoped="" ref="0x7f44abef53c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44abef5550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44abef56e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="bufferDone" ref="0x7f44abebf020" loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="bufferDone" scoped="" ref="0x7f44abebf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44abebf3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f44abebf530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamDone" ref="0x7f44abecd600" loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamDone" scoped="" ref="0x7f44abecd600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44abecd980"/>
        <function-ref name="runTask" scoped="" ref="0x7f44abecdb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamFail" ref="0x7f44abec7d50" loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamFail" scoped="" ref="0x7f44abec7d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f44abec6100"/>
        <function-ref name="runTask" scoped="" ref="0x7f44abec6290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f44abee9900" loc="54:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44abee9900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abee51b0"/>
        <function-ref name="fired" scoped="" ref="0x7f44abee61b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f44abee6b30"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abee6670"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44abee5670"/>
        <function-ref name="start" scoped="" ref="0x7f44abee7780"/>
        <function-ref name="stop" scoped="" ref="0x7f44abee7c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44abef1bc0" loc="48:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44abef1bc0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f44ad5ab800"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f44ad5ab800"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44abef0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44abeea580" loc="53:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abeea580"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44abee91f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f44abeedd50" loc="52:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f44abeedd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44abeeb100"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44abeeb290"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44abeeb420"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44abeeb5b0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44abeeb740"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44abeeb8d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44abeeba60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f44abef09c0" loc="49:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f44abef09c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f44abeee4f0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f44abeef5f0"/>
        <function-ref name="read" scoped="" ref="0x7f44abeee020"/>
        <function-ref name="readDone" scoped="" ref="0x7f44abeed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44abe824f0" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44abe824f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abe80db0"/>
        <function-ref name="fired" scoped="" ref="0x7f44abe81da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f44abe80760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abe802a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44abe7f2a0"/>
        <function-ref name="start" scoped="" ref="0x7f44abe813d0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abe818e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44abe84b10" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44abe84b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44abe82020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44ab64a870" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44ab64a870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab647090"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab648090"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab648a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab648550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab647550"/>
        <function-ref name="start" scoped="" ref="0x7f44ab6496a0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab649bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ab64a020" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ab64a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ab64a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f44ab632da0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab632da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ab631180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ab631310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ab6314a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ab631630"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6317c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f44ab634450" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab634450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ab6347d0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ab634960"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab634af0"/>
        <function-ref name="get" scoped="" ref="0x7f44ab634c80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab634e10"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ab633020"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ab6331b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ab633340"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ab6334d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ab633660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ab6337f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f44ab633a80" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab633a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ab633e00"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ab632020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab6321b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ab632340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ab6324d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab632660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ab6327f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ab632980"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ab632b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f44ab628a80" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f44ab628a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f44ab628e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f44ab627020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f44ab6271b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f44ab627340"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6274d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f44ab62a190" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f44ab62a190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f44ab62a510"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f44ab62a6a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab62a830"/>
        <function-ref name="get" scoped="" ref="0x7f44ab62a9c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab62ab50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ab62ace0"/>
        <function-ref name="getMode" scoped="" ref="0x7f44ab62ae70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ab629030"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ab6291c0"/>
        <function-ref name="setMode" scoped="" ref="0x7f44ab629350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f44ab6294e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44ab62e020" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44ab62e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab62b870"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab62d840"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab62b220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab62dd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab62bd30"/>
        <function-ref name="start" scoped="" ref="0x7f44ab62ee30"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab62d380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f44ab62f660" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f44ab62f660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f44ab62f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f44ab629770" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f44ab629770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f44ab629af0"/>
        <function-ref name="getControl" scoped="" ref="0x7f44ab629c80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f44ab629e10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f44ab628020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f44ab6281b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f44ab628340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f44ab6284d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f44ab628660"/>
        <function-ref name="setControl" scoped="" ref="0x7f44ab6287f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f44ab645a90" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f44ab645a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab6412e0"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab6422e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab642c60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab6427a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab6417a0"/>
        <function-ref name="start" scoped="" ref="0x7f44ab6448d0"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab644de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f44ab63e210" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f44ab63e210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca01950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f44aca01cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44ab63bb30"/>
        <function-ref name="fired" scoped="" ref="0x7f44ab63ca60"/>
        <function-ref name="startAt" scoped="" ref="0x7f44ab63b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44ab63b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f44ab63a020"/>
        <function-ref name="start" scoped="" ref="0x7f44ab63c090"/>
        <function-ref name="stop" scoped="" ref="0x7f44ab63c5a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f44ab641e10" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f44ab641e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f44ab640ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f44ab63f670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f44ab63f1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f44ab63fb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x7f44abe4fbf0" loc="26:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Service" scoped="" ref="0x7f44abe4fbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f44abe4c710"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f44abe4e860"/>
        <function-ref name="read" scoped="" ref="0x7f44abe4c220"/>
        <function-ref name="readDone" scoped="" ref="0x7f44abe4b220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f44abe7ccb0" loc="24:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f44abe7ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f44abe51850"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f44abe52940"/>
        <function-ref name="read" scoped="" ref="0x7f44abe51360"/>
        <function-ref name="readDone" scoped="" ref="0x7f44abe4f360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f44abe4b8f0" loc="27:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44abe4b8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44abe4bc90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44abe4be20"/>
        <function-ref name="request" scoped="" ref="0x7f44abe4a020"/>
        <function-ref name="granted" scoped="" ref="0x7f44abe4a1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44abe4a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f44ab659bd0" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f44ab659bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ab658020"/>
        <function-ref name="configure" scoped="" ref="0x7f44ab6581b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f44ab658340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f44ab65ac30" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab65ac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ab659020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44ab6591b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44ab659340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44ab6594d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44ab659660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44ab6597f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44ab659980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f44ab658590" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f44ab658590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f44ab658910"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f44ab658aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44ab657020" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab657020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab657c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab65a020" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab65a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab65a3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab65a530"/>
        <function-ref name="request" scoped="" ref="0x7f44ab65a6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab65a850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab65a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f44ab5e7a60" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f44ab5e7a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab5e56b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f44ab5e5cc0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f44ab5e5cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab5e4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f44abe35a10" loc="35:../../../tos/chips/msp430/sensors/Msp430InternalVoltageP.nc">
      <component-ref qname="Msp430InternalVoltageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44abe35a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44abe316b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f44ab7679d0" loc="50:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f44ab7679d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44ab766630"/>
        <function-ref name="readDone" scoped="" ref="0x7f44ab766af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44ab765280" loc="52:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab765280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab764020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab768c60" loc="49:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab768c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab767020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab7671b0"/>
        <function-ref name="request" scoped="" ref="0x7f44ab767340"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab7674d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab767660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f44ab5d9d30" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f44ab5d9d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ab5d80e0"/>
        <function-ref name="configure" scoped="" ref="0x7f44ab5d8270"/>
        <function-ref name="dataReady" scoped="" ref="0x7f44ab5d8400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f44ab5dade0" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f44ab5dade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f44ab5d9180"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f44ab5d9310"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f44ab5d94a0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f44ab5d9630"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f44ab5d97c0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f44ab5d9950"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f44ab5d9ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f44ab5d8650" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f44ab5d8650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f44ab5d89d0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f44ab5d8b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f44ab5d7020" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f44ab5d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab5d7c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f44ab5da1d0" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f44ab5da1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f44ab5da550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f44ab5da6e0"/>
        <function-ref name="request" scoped="" ref="0x7f44ab5da870"/>
        <function-ref name="granted" scoped="" ref="0x7f44ab5daa00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f44ab5dab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f44ab5c9670" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f44ab5c9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab5c83d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f44ab5c89e0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="Tea16BitsAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f44ab5c89e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f44ab5c66b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f44abe076e0" loc="48:Tea16BitsC.nc">
      <component-ref qname="Tea16BitsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f44abe076e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f44abe07a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x7f44abe00940" loc="51:Tea16BitsC.nc">
      <component-ref qname="Tea16BitsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f44abe00940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f44abdff560"/>
        <function-ref name="readDone" scoped="" ref="0x7f44abdff9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f44abe010f0" loc="50:Tea16BitsC.nc">
      <component-ref qname="Tea16BitsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f44abe010f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f44abe01470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f44abe01600"/>
        <function-ref name="led1On" scoped="" ref="0x7f44abe01790"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f44abe01920"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f44abe01ab0"/>
        <function-ref name="get" scoped="" ref="0x7f44abe01c40"/>
        <function-ref name="led1Off" scoped="" ref="0x7f44abe01dd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f44abe004d0"/>
        <function-ref name="set" scoped="" ref="0x7f44abe00020"/>
        <function-ref name="led0On" scoped="" ref="0x7f44abe001b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f44abe00340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TEA" ref="0x7f44abdfd020" loc="52:Tea16BitsC.nc">
      <component-ref qname="Tea16BitsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TEA" scoped="" ref="0x7f44abdfd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TEA"/>
      </instance>
      <interface-functions>
        <function-ref name="decrypt" scoped="" ref="0x7f44abdfd3a0"/>
        <function-ref name="lsb" scoped="" ref="0x7f44abdfd530"/>
        <function-ref name="msb" scoped="" ref="0x7f44abdfd6c0"/>
        <function-ref name="encrypt" scoped="" ref="0x7f44abdfd850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f44abe07e50" loc="49:Tea16BitsC.nc">
      <component-ref qname="Tea16BitsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abe07e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abe02390"/>
        <function-ref name="fired" scoped="" ref="0x7f44abe05970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abe03720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abe032a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abe02c90"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abe02810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abe05df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abe06a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abe03d30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abe05020"/>
        <function-ref name="stop" scoped="" ref="0x7f44abe054f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f44abdf21e0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Tea16BitsAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f44abdf21e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44aca011a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f44aca01510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f44abdee630"/>
        <function-ref name="fired" scoped="" ref="0x7f44abdf1c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f44abdf09d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f44abdf0550"/>
        <function-ref name="getdt" scoped="" ref="0x7f44abded020"/>
        <function-ref name="gett0" scoped="" ref="0x7f44abdeeab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f44abdf00d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f44abdf2dd0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f44abdee020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f44abdf12e0"/>
        <function-ref name="stop" scoped="" ref="0x7f44abdf17b0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f44aceeadc0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f44aceeba10" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f44acea2740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f44acea5990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f44acea2020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f44acea52b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f44acea4120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f44acea64d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f44acea6bb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f44acea4840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f44ad228020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f44ad4e93a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f44ace51500" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f44ace51280" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f44ace569c0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f44ace9a5a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f44ace99020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f44ace51d70" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f44ace4fc80" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f44ace52b00" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f44ace4f4f0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f44ace53190" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f44ace53920" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f44ace52390" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f44ace9a5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f44ace99020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f44ace52110" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f44ace9a5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f44ace99020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f44ace43560" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f44ace41ca0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f44ace41a20" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f44ace3f9d0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f44ace3f750" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f44ace41270" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f44ace42940" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f44ace42020" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f44ace43c90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f44ace4c890" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f44ace492a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f44ace49020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f44ace49c80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f44ace49a00" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f44ace486a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f44ace48420" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f44ace48d90" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f44ace59120" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f44ace58a10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f44ace58790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f44ace59850" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f44ace5d350" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f44ace58020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f44ace5c270" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f44ace5b9e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f44ace5dae0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f44ace5c980" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f44ace5b2e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f44ace5b060" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f44ace57450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f44ace571d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f44ace1a1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f44acf7a7f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f44acf77020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f44acf7a020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f44ad402810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f44ad5a8020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f44ad5a7020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f44ad5a8790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f44ad59c270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f44ad59cac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f44acd02bb0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f44acd02260" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f44acd025e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44acd02910" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f44accfd620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accfd020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44accfd350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f44accfc6d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f44acd002a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44acd00020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f44accff7f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accff210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f44accff560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f44accf8020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44acd04c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f44accf7110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accf8e10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f44accf3490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accf4e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44accf31c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f44accf4560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f44accf55e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accf5020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44accf5350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f44acce2d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f44acf02930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acce2ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f44acceda10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acced790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f44acd03e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f44accef950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44accef6d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f44accea3a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acceed70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f44accea110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f44accece50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44accec870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f44accecbc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f44acf02d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f44acce7810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acce7590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f44acce4b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acce45e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f44acce4900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f44acf02550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f44acce9600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acce9380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f44acce12f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f44acf02930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f44acce3cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f44acce1060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f44acf02930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f44acce0190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f44acf02930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f44accddad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accdd850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f44accdbcd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accdba50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f44accd9020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accdcce0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f44accd35e0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accd3020" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44accd3350" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f44acccebb0" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accce5b0" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44accce8e0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f44accd0d20" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f44accd1900" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44accd1680" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f44acccfe00" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44acccf820" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f44acccfb70" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f44acc62ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f44acc62830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f44acc60020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f44acc61d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f44acc65d60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f44acc61350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f44acc5c410" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
              <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44acc5fa80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f44acc5fdd0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44acc5c130" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f44acc52270" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f44acc52a20" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f44acc51270" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f44acc501f0" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f44acc4e940" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f44acc4d190" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f44acc51a00" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f44acc4dd00" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f44acc4da80" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f44acc53a60" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f44acc509d0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f44acc4e190" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f44acbe4020" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44acbe5960" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f44acbe5ce0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f44acbe7020" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f44acbe5020" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f44acbe78b0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f44acef2720"/>
                <typename><typedef-ref name="message_t" ref="0x7f44acef1d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f44acbe7c20" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f44acbcaa40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f44acbc7270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f44acbc5070" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f44acbc98e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f44acbdab20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f44acbce020" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f44acbcdc20" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44acbcd9a0" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f44acbce8a0" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f44acbcf6d0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44acbcf450" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f44acbcc4b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f44acbcd190" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f44acbd70e0" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f44acbd7a10" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f44acbd9720" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f44acbd94a0" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f44acbd65c0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f44acbd6340" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f44acbd47a0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f44acbd3400" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44acbd3180" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f44acbd1020" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f44acbd3c50" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f44aca9fdd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f44aca9f800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44aca9fb40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f44aca98ac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f44aca98840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f44aca97930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f44aca97360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44aca976a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f44aca99740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f44aca942c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f44aca95920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44aca95c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f44aca94020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f44aca98070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f44aca9b720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f44aca9cdb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f44aca9b130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f44aca9b480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f44aca745b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f44aca74330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f44aca74df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f44aca73cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f44aca73700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f44aca73a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f44aca71b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f44aca1eae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f44aca174e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f44aca14890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f44aca3de70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f44aca3c2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f44aca1b350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f44aca1c350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f44aca1f980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f44aca1cb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f44aca1bdb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f44aca0c020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f44aca0d750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f44aca05d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44aca05af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f44aca05350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f44ac9dc390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f44ac9e7020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f44ac9f7de0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca6cc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f44aca6b4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f44ac9f7b60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca6cc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f44aca6b4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f44ac9ea0e0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f44ac9f12a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca67c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f44aca664f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f44ac9f1020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca67c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f44aca664f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f44ac9e1750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f44ac9decf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f44ac9f3830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca6ab60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f44aca68390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f44ac9f1a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca67c30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f44aca664f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f44ac9ee830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f44ac9ee5b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f44ac9efe40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f44ac9e1020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f44ac9f3040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca6ab60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f44aca68390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f44ac9f4da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca6ab60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f44aca68390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f44ac9f0c80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f44ac9e1e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f44ac9ef690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f44ac9ef410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f44ac9eb190" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f44ac9eb910" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f44ac9e2070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f44ac9e5020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f44ac9e9070" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f44ac9e27b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f44ac9e7800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f44ac9e05c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f44ac9ec070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f44aca75320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f44aca6d320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f44ac9e0d60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f44ac9ddbd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f44ac9f04d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f44ac9f0250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f44ac9dcd30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44ac9dcab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f44ac9f4600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44aca6cc50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f44aca6b4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f44ac9ea850" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f44ac9e6020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f44ac9e3800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f44aca3de70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f44aca3c2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac9e3580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f44aca3de70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f44aca3c2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f44ac9e5af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f44aca4f020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f44aca4f440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac9e5870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f44aca4f020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f44aca4f440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f44ac9db730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f44ac9de570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f44ac9ec880" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f44ac9dd480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f44ac9e6790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f44ac9e9850" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44ac9d6ce0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44ac9d6ce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f44ac9d3020" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac9d3020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f44ac9d3940" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac9d3020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f44ac9d2a50" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f44ac9d21f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f44ac9d11f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f44ac95d930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f44ac91fa50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f44ac91e1f0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f44ac91ab10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f44ac91a890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f44ac9202d0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f44ac91c0e0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f44ac919490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f44ac91e930" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f44ac91f2b0" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f44ac91b7c0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f44ac920a70" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f44ac922420" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f44ac91c860" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f44ac91a020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f44ac91b070" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f44ac922b50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f44ac933780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f44ac946c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f44ac939020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f44ac93aca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f44ac94d390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f44ac9367a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f44ac93e020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f44ac947da0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f44ac944b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f44ac948d40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f44ac948ac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f44ac949270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f44ac942900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f44ac938020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f44ac933020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f44ac93a560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f44ac92e1f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f44ac92a880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f44ac94c270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f44ac942190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f44ac940a90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f44ac947650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f44ac94f190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f44ac93bd40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f44ac93bac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f44ac9539f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f44ac936020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f44ac931020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f44ac92c9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f44ac92a120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f44ac935790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f44ac931750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f44ac9397b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f44ac92f1f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f44ac94c990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f44ac93d1f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f44ac930630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f44ac934790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f44ac93f760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f44ac93f4e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f44ac92b190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f44ac93b390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f44ac935020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f44ac94fc10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f44aca29b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f44aca27020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac94f990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f44aca29b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f44aca27020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f44ac943a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f44ac94ba80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f44ac94b800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f44ac9402a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44ac940020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f44ac92f9c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f44ac9483b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f44ac94b120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f44ac93dbb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f44ac93d930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f44ac94dac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f44ac931e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f44ac934020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f44ac938790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f44ac93e9f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f44ac93e770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f44ac9432b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f44ac946530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f44ac92b900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f44ac949bf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f44ac949970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f44ac92e9b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f44ac944420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f44ac92c1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f44ac656730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f44ac656e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f44ac658880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f44ac655cf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f44ac656020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f44ac6555b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f44ac65ba90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f44ac658190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f44ac5fb020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f44ac5fb880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f44ac5c6e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f44ac5c4020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f44ac5c6570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f44ac5c56d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f44ac5c4950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f44ac5b8020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f44ac5bf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f44ac5bad20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f44ac5bf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f44ac5bb020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f44ac5bbb20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f44ac5bf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f44ac5bb8a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f44ac5bf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f44ac5ba470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f44ac5bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f44ac44fad0" loc="43:../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f44ac44fad0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f44ac44a270" loc="80:../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f44ac44fad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f44ac448cb0" loc="97:../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f44ac44fad0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f44ac448a30" loc="97:../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f44ac44fad0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f44adf88c30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7f44adf88c30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f44ac446c70" loc="108:../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f44ac44fad0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f44ac4469f0" loc="108:../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f44ac44cb20" loc="57:../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f44ac44bad0" loc="72:../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f44ac44ae50" loc="88:../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f44ac44fad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f44ac44c3b0" loc="50:../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f44ac44b2d0" loc="65:../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f44ac424dd0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f44ac424b50" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TEA" loc="1:../../../tos/platforms/shimmer2r/TEA.nc">
      <function command="" provided="0" name="decrypt" ref="0x7f44ac3e75e0" loc="3:../../../tos/platforms/shimmer2r/TEA.nc">
        <interfacedef-ref qname="TEA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7f44ac3e7020" loc="3:../../../tos/platforms/shimmer2r/TEA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7f44ac3e7350" loc="3:../../../tos/platforms/shimmer2r/TEA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="lsb" ref="0x7f44ac3e6020" loc="4:../../../tos/platforms/shimmer2r/TEA.nc">
        <interfacedef-ref qname="TEA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44ac3e7c60" loc="4:../../../tos/platforms/shimmer2r/TEA.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="msb" ref="0x7f44ac3e6920" loc="5:../../../tos/platforms/shimmer2r/TEA.nc">
        <interfacedef-ref qname="TEA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44ac3e66a0" loc="5:../../../tos/platforms/shimmer2r/TEA.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="encrypt" ref="0x7f44ac3e9840" loc="2:../../../tos/platforms/shimmer2r/TEA.nc">
        <interfacedef-ref qname="TEA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7f44ac3e9280" loc="2:../../../tos/platforms/shimmer2r/TEA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7f44ac3e95b0" loc="2:../../../tos/platforms/shimmer2r/TEA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f44ac3fbde0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3fbde0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f44ac3ca6c0" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f44ac3c9440" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3fbde0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f44ac3cae40" loc="63:../../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f44ac3c91b0" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3fbde0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f44ac3b35a0" loc="52:../../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3b35a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f44ac3b0020" loc="58:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f44ac3b0d90" loc="66:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3b35a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f44ac3b07e0" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f44ac3b0b00" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3b35a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadStream" loc="57:../../../tos/interfaces/ReadStream.nc">
      <documentation loc="33:../../../tos/interfaces/ReadStream.nc">
        <short>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices.</short>
        <long>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices. The type of the values being&#10; read is given as a template argument. &#10;&#10; &#60;p> To use this interface, allocate one or more buffers in your own&#10; space. Then, call postBuffer to pass these buffers into the&#10; device. Call read() to begin the sampling process. The buffers will&#10; be filled in the order originally posted, and a bufferDone() event&#10; will be signaled once each buffer has been filled with data. At any&#10; time while the read() is running, you may post new buffers to be&#10; filled. If the lower layer finishes signaling readDone() and then&#10; finds that no more buffers have been posted, it will consider the&#10; read to be finished, and signal readDone(). &#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f44ac3bc4a0" loc="57:../../../tos/interfaces/ReadStream.nc">
          <interfacedef-ref qname="ReadStream"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3bc4a0"/></type-var>
        </typedef>
      </parameters>
      <function event="" provided="0" name="bufferDone" ref="0x7f44ac3b9810" loc="89:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="80:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a previously posted buffer has been filled by the&#10; device.</short>
          <long>&#10; Signalled when a previously posted buffer has been filled by the&#10; device. In the event of a read error, result will not equal&#10; SUCCESS, and the buffer will be filled with zeroes.&#10;&#10; @param result SUCCESS if the buffer was filled without errors&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer that has been filled&#10; @param count the number of values actually read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3bc4a0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f44ac3bae50" loc="89:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f44ac3b9210" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3bc4a0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7f44ac3b9570" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="postBuffer" ref="0x7f44ac3bb3e0" loc="68:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="58:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer.</short>
          <long>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer. Make sure your count doesn't&#10; overrun the buffer.&#10;&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer&#10; @param count the number of values the buffer should hold&#10;&#10; @return SUCCESS if the post was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3bc4a0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f44ac3bcda0" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f44ac3bc4a0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7f44ac3bb150" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f44ac3ba630" loc="78:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="70:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period.</short>
          <long>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period. &#10; &#10; @param usPeriod the between-sample period in microseconds&#10; &#10; @return SUCCESS if the reading process began&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="usPeriod" ref="0x7f44ac3ba3b0" loc="78:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f44ac3b6df0" loc="102:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="92:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted.</short>
          <long>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted. In the event of a read error, all previously posted&#10; buffers will have their bufferDone() event signalled, and then&#10; this event will be signalled with a non-SUCCESS argument.&#10;&#10; @param result SUCCESS if all buffers were filled without errors&#10; @param usActualPeriod Actual sampling period used - may be different&#10;   from period requested at read time. Undefined if result != SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f44ac3b67b0" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
            </type-int>
          </variable>
          <variable name="usActualPeriod" ref="0x7f44ac3b6b60" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7f44ac392d20" loc="45:../../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f44ac392d20"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7f44ac38f730" loc="58:../../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f44ac392d20"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f44ac375df0" loc="189:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7f44ac37d8c0" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac37d640" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7f44ac37cde0" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac37c7e0" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7f44ac37cb50" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7f44ac3769c0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac377700" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f44ac376020" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f44ac3763a0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f44ac376710" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7f44ac371770" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f44ac3710d0" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f44ac371460" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7f44ac3782d0" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac37a020" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f44ac37a8c0" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f44ac37ac50" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f44ac378020" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7f44ac373ad0" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f44ac373850" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f44ac321ce0" loc="97:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f44ac321020" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44ac3a9290"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f44ac3a9760"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f44ac323970" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f44ac3aa640"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f44ac3abcf0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7f44ac323d60" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44ac3a9290"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f44ac3a9760"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7f44ac322110" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7f44ac3224b0" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f44ac322860" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f44ac322bd0" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f44ac320d40" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f44ac320720" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f44ac320ab0" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7f44ac31d780" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
          <long> &#10; An ADC12MEMx overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7f44ac31c020" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f44ac314da0" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f44ac3116a0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f44ad5a3c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7f44ac304ac0" loc="63:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44ac399ce0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7f44ac3987a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7f44ac301c30" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44ac3a9290"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7f44ac3a9760"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f44ac3019b0" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7f44ac2fe350" loc="106:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7f44ac2fc550" loc="118:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7f44ac2fed50" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7f44ac2fead0" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7f44ac303350" loc="68:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44ac396e20"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7f44ac395770"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7f44ac301130" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44ac3a9290"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f44ac3a9760"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f44ac303ac0" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7f44ac303e80" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f44ac3a9290"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f44ac3a9760"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7f44ac2fb600" loc="128:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7f44ac305760" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44ac399ce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f44ac3987a0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7f44ac3054e0" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44ac399ce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f44ac3987a0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7f44ac300750" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f44ac3004d0" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f44adf82160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7f44ac2ff2a0" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f44ac2ff020" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7f44ac2ffb10" loc="101:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f44adf82520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7f44ac2fcd10" loc="123:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7f44ac2fbda0" loc="133:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7f44ac3042a0" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44ac396e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f44ac395770"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7f44ac304020" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f44ac396e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f44ac395770"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44ac16a020" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44ac16a020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f44ac163c50" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f44ac1675b0" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f44ac165360" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f44ac166d60" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f44ac1650d0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f44ac1665b0" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f44ac162ca0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f44ac162420" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f44ac167d90" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f44ac16ab90" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f44ac16a910" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f44ac1632f0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f44ac165d00" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f44ac163060" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f44ac168680" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f44ac168400" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f44ac168e80" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44ac0b86d0" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44ac0b86d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f44ac0b5020" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f44adf82920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f44ac0b0070" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f44ac0b0070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f44ac0b02b0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f44ac0ace00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f44ac0afe40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f44ac0ac460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f44ac0ade60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f44ac0ac1d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f44ac0ad640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f44ad5ac090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f44ac0ab620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f44ac0b0e10" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f44ac0b0b90" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f44ac0b02b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f44ac0af680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
