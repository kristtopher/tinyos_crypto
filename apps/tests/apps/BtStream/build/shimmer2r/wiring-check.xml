<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="44:BtStreamAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fa72e0799f0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fa72eb91680"/></to>
    </wire>
    <wire loc="72:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fa72eb91680"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fa72e9c9590"/></to>
    </wire>
    <wire loc="47:BtStreamAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e05c2a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e312a70"/></to>
    </wire>
    <wire loc="50:BtStreamAppC.nc">
      <from><interface-ref name="SampleTimerInit" scoped="" ref="0x7fa72e075160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72dd42760"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72dd42760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72caf7340"/></to>
    </wire>
    <wire loc="51:BtStreamAppC.nc">
      <from><interface-ref name="SampleTimer" scoped="" ref="0x7fa72e02e850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72dd40020"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72dd40020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72caf0020"/></to>
    </wire>
    <wire loc="53:BtStreamAppC.nc">
      <from><interface-ref name="SetupTimer" scoped="" ref="0x7fa72e03ca10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72dd3a640"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72dd3a640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd311d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:BtStreamAppC.nc">
      <from><interface-ref name="BlinkTimerInit" scoped="" ref="0x7fa72e075830"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72dc51340"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72dc51340"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72c9f8380"/></to>
    </wire>
    <wire loc="56:BtStreamAppC.nc">
      <from><interface-ref name="BlinkTimer" scoped="" ref="0x7fa72e038340"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72dc51b90"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72dc51b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72c9f1020"/></to>
    </wire>
    <wire loc="60:BtStreamAppC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72dc3be40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dc4b9a0"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72dc4b9a0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dc435f0"/></to>
    </wire>
    <wire loc="61:BtStreamAppC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fa72e0281a0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fa72dc3cb60"/></to>
    </wire>
    <wire loc="64:BtStreamAppC.nc">
      <from><interface-ref name="BluetoothInit" scoped="" ref="0x7fa72e0780f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72dc31d90"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72dc31d90"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72dba9c00"/></to>
    </wire>
    <wire loc="65:BtStreamAppC.nc">
      <from><interface-ref name="BTStdControl" scoped="" ref="0x7fa72e027340"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa72dc366f0"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fa72dc366f0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa72dba82e0"/></to>
    </wire>
    <wire loc="66:BtStreamAppC.nc">
      <from><interface-ref name="Bluetooth" scoped="" ref="0x7fa72e010380"/></from>
      <to><interface-ref name="Bluetooth" scoped="" ref="0x7fa72dc33020"/></to>
    </wire>
    <wire loc="61:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="Bluetooth" scoped="" ref="0x7fa72dc33020"/></from>
      <to><interface-ref name="Bluetooth" scoped="" ref="0x7fa72dba8aa0"/></to>
    </wire>
    <wire loc="69:BtStreamAppC.nc">
      <from><interface-ref name="AccelInit" scoped="" ref="0x7fa72e078790"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d94f020"/></to>
    </wire>
    <wire loc="44:../../../../tos/platforms/shimmer2r/AccelC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d94f020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d94fe40"/></to>
    </wire>
    <wire loc="70:BtStreamAppC.nc">
      <from><interface-ref name="Accel" scoped="" ref="0x7fa72e05e020"/></from>
      <to><interface-ref name="Accel" scoped="" ref="0x7fa72d952820"/></to>
    </wire>
    <wire loc="45:../../../../tos/platforms/shimmer2r/AccelC.nc">
      <from><interface-ref name="Accel" scoped="" ref="0x7fa72d952820"/></from>
      <to><interface-ref name="Accel" scoped="" ref="0x7fa72d94a510"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72dd2ce50"/></to>
    </wire>
    <wire loc="49:../../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72e0af020"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72cb46e50"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72e8a4540"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72e0dca60"/></to>
    </wire>
    <wire loc="73:BtStreamAppC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d9502b0"/></to>
    </wire>
    <wire loc="45:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d9502b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d93b850"/></to>
    </wire>
    <wire loc="74:BtStreamAppC.nc">
      <from><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72e046410"/></from>
      <to><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72d950940"/></to>
    </wire>
    <wire loc="44:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72d950940"/></from>
      <to><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72d93fd00"/></to>
    </wire>
    <wire loc="75:BtStreamAppC.nc">
      <from><interface-ref name="DMA0" scoped="" ref="0x7fa72dfed970"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7fa72d88d590"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel0" scoped="" ref="0x7fa72d88d590"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7fa72d785020"/></to>
    </wire>
    <wire loc="78:BtStreamAppC.nc">
      <from><interface-ref name="GyroInit" scoped="" ref="0x7fa72e078e30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d7322f0"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d7322f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d72e6c0"/></to>
    </wire>
    <wire loc="79:BtStreamAppC.nc">
      <from><interface-ref name="GyroStdControl" scoped="" ref="0x7fa72e05dda0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa72d732930"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fa72d732930"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa72d72ed00"/></to>
    </wire>
    <wire loc="80:BtStreamAppC.nc">
      <from><interface-ref name="GyroBoard" scoped="" ref="0x7fa72e06f5f0"/></from>
      <to><interface-ref name="GyroBoard" scoped="" ref="0x7fa72d72f120"/></to>
    </wire>
    <wire loc="50:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <from><interface-ref name="GyroBoard" scoped="" ref="0x7fa72d72f120"/></from>
      <to><interface-ref name="GyroBoard" scoped="" ref="0x7fa72d72b4e0"/></to>
    </wire>
    <wire loc="83:BtStreamAppC.nc">
      <from><interface-ref name="MagInit" scoped="" ref="0x7fa72e0774f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d730bc0"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d730bc0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d6ad6e0"/></to>
    </wire>
    <wire loc="84:BtStreamAppC.nc">
      <from><interface-ref name="Magnetometer" scoped="" ref="0x7fa72e064630"/></from>
      <to><interface-ref name="Magnetometer" scoped="" ref="0x7fa72d6af2f0"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="Magnetometer" scoped="" ref="0x7fa72d6af2f0"/></from>
      <to><interface-ref name="Magnetometer" scoped="" ref="0x7fa72d6add30"/></to>
    </wire>
    <wire loc="87:BtStreamAppC.nc">
      <from><interface-ref name="StrainInit" scoped="" ref="0x7fa72e077ba0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d5d20c0"/></to>
    </wire>
    <wire loc="45:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d5d20c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d5d1c90"/></to>
    </wire>
    <wire loc="88:BtStreamAppC.nc">
      <from><interface-ref name="StrainGauge" scoped="" ref="0x7fa72e05f990"/></from>
      <to><interface-ref name="StrainGauge" scoped="" ref="0x7fa72d5d2700"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeC.nc">
      <from><interface-ref name="StrainGauge" scoped="" ref="0x7fa72d5d2700"/></from>
      <to><interface-ref name="StrainGauge" scoped="" ref="0x7fa72d5ce360"/></to>
    </wire>
    <wire loc="91:BtStreamAppC.nc">
      <from><interface-ref name="DigitalHeartInit" scoped="" ref="0x7fa72e076390"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d5d3460"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d5d3460"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d5bd900"/></to>
    </wire>
    <wire loc="92:BtStreamAppC.nc">
      <from><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72e05d690"/></from>
      <to><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72d5d3ae0"/></to>
    </wire>
    <wire loc="53:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <from><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72d5d3ae0"/></from>
      <to><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72d5ba020"/></to>
    </wire>
    <wire loc="95:BtStreamAppC.nc">
      <from><interface-ref name="GsrInit" scoped="" ref="0x7fa72e076a20"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d5a5df0"/></to>
    </wire>
    <wire loc="43:../../../../tos/platforms/shimmer/chips/gsr/GsrC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d5a5df0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d5a1a70"/></to>
    </wire>
    <wire loc="96:BtStreamAppC.nc">
      <from><interface-ref name="Gsr" scoped="" ref="0x7fa72e0513d0"/></from>
      <to><interface-ref name="Gsr" scoped="" ref="0x7fa72d5a2430"/></to>
    </wire>
    <wire loc="44:../../../../tos/platforms/shimmer/chips/gsr/GsrC.nc">
      <from><interface-ref name="Gsr" scoped="" ref="0x7fa72d5a2430"/></from>
      <to><interface-ref name="Gsr" scoped="" ref="0x7fa72d59e0e0"/></to>
    </wire>
    <wire loc="99:BtStreamAppC.nc">
      <from><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72dfe98d0"/></from>
      <to><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72d56e160"/></to>
    </wire>
    <wire loc="43:BtCommandParserC.nc">
      <from><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72d56e160"/></from>
      <to><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72d56b270"/></to>
    </wire>
    <wire loc="102:BtStreamAppC.nc">
      <from><interface-ref name="InternalFlash" scoped="" ref="0x7fa72dfe4940"/></from>
      <to><interface-ref name="InternalFlash" scoped="" ref="0x7fa72d55a0c0"/></to>
    </wire>
    <wire loc="106:BtStreamAppC.nc">
      <from><interface-ref name="DockInterrupt" scoped="" ref="0x7fa72dfdfa70"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7fa72dac8a30"/></to>
    </wire>
    <wire loc="109:BtStreamAppC.nc">
      <from><interface-ref name="UserButton" scoped="" ref="0x7fa72dfe31c0"/></from>
      <to><interface-ref name="Notify" scoped="" ref="0x7fa72d542020"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7fa72d542020"/></from>
      <to><interface-ref name="Notify" scoped="" ref="0x7fa72d529840"/></to>
    </wire>
    <wire loc="112:BtStreamAppC.nc">
      <from><interface-ref name="CRYPTO" scoped="" ref="0x7fa72dfda020"/></from>
      <to><interface-ref name="CRYPTO" scoped="" ref="0x7fa72d509aa0"/></to>
    </wire>
    <wire loc="6:../../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <from><interface-ref name="CRYPTO" scoped="" ref="0x7fa72d509aa0"/></from>
      <to><interface-ref name="CRYPTO" scoped="" ref="0x7fa72d502680"/></to>
    </wire>
    <wire loc="115:BtStreamAppC.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7fa72df9e3a0"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7fa72e4f79a0"/></to>
    </wire>
    <wire loc="493:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fa72e4f79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3c9740"/></to>
    </wire>
    <wire loc="116:BtStreamAppC.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7fa72df9c3a0"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7fa72e4f59a0"/></to>
    </wire>
    <wire loc="494:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fa72e4f59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3c3100"/></to>
    </wire>
    <wire loc="120:BtStreamAppC.nc">
      <from><interface-ref name="FastClockInit" scoped="" ref="0x7fa72df9a390"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d1a58e0"/></to>
    </wire>
    <wire loc="47:../../../../tos/platforms/shimmer/chips/msp430/FastClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72d1a58e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72d19f0c0"/></to>
    </wire>
    <wire loc="121:BtStreamAppC.nc">
      <from><interface-ref name="FastClock" scoped="" ref="0x7fa72df97e30"/></from>
      <to><interface-ref name="FastClock" scoped="" ref="0x7fa72d1a2020"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/shimmer/chips/msp430/FastClockC.nc">
      <from><interface-ref name="FastClock" scoped="" ref="0x7fa72d1a2020"/></from>
      <to><interface-ref name="FastClock" scoped="" ref="0x7fa72d19f6f0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fa72e0d6a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fa72e105bf0"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa72e0d3440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa72e10c020"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa72e10c020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa72cfd8b40"/></to>
    </wire>
    <wire loc="68:../../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa72e0d20c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa72e10cc30"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa72e10cc30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa72e9137e0"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fa72e0b6be0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fa72e0d61a0"/></to>
    </wire>
    <wire loc="67:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fa72e9c9c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fa72f25b3a0"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fa72f25b3a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fa72ec33c30"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fa72e9c86c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72eb92c00"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72eb92c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72eb8ea90"/></to>
    </wire>
    <wire loc="71:../../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72e9c8dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></to>
    </wire>
    <wire loc="47:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fa72eb8a1e0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7fa72eb8b910"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fa72eb8b910"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72eb5d850"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fa72eb8a8c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72eb8d8a0"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7fa72eb89020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72e2e92e0"/></to>
    </wire>
    <wire loc="46:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72eb5d850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72eb443c0"/></to>
    </wire>
    <wire loc="47:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa72eb54de0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa72eb44a70"/></to>
    </wire>
    <wire loc="48:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa72eedc4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa72eb43cc0"/></to>
    </wire>
    <wire loc="113:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7fa72eb00a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea3e6d0"/></to>
    </wire>
    <wire loc="126:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7fa72eaee410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea36b30"/></to>
    </wire>
    <wire loc="108:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7fa72eaf7d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea43160"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7fa72eada020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea1dcb0"/></to>
    </wire>
    <wire loc="107:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fa72eafc020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea44480"/></to>
    </wire>
    <wire loc="148:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7fa72eae2570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea1d020"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7fa72ead7020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea05cb0"/></to>
    </wire>
    <wire loc="154:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7fa72eae9a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea16220"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fa72eb07020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea939d0"/></to>
    </wire>
    <wire loc="135:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7fa72eadc020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea2c2f0"/></to>
    </wire>
    <wire loc="134:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7fa72eae4890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea2d610"/></to>
    </wire>
    <wire loc="133:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7fa72eaed8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea2e220"/></to>
    </wire>
    <wire loc="115:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7fa72eaf6c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea3c7a0"/></to>
    </wire>
    <wire loc="156:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7fa72ead9020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea142f0"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7fa72eaeb020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea266d0"/></to>
    </wire>
    <wire loc="114:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7fa72eafcda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea3dac0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fa72eb097b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72eaa1540"/></to>
    </wire>
    <wire loc="155:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7fa72eae13e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea15610"/></to>
    </wire>
    <wire loc="106:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fa72eb065a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea45020"/></to>
    </wire>
    <wire loc="161:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7fa72eae7020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea0f6d0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7fa72eaf1dc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea4ca90"/></to>
    </wire>
    <wire loc="142:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7fa72eadb020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea247a0"/></to>
    </wire>
    <wire loc="100:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fa72eafd140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea4dde0"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7fa72eae3700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea25ac0"/></to>
    </wire>
    <wire loc="163:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7fa72ead8020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea0d7a0"/></to>
    </wire>
    <wire loc="147:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7fa72eaea5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea1fb30"/></to>
    </wire>
    <wire loc="120:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="162:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7fa72eae01f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea0eac0"/></to>
    </wire>
    <wire loc="128:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7fa72eadd020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa72ea34cb0"/></to>
    </wire>
    <wire loc="169:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7fa72eadf020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea05020"/></to>
    </wire>
    <wire loc="127:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7fa72eae5a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa72ea34020"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7fa72eae65a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72ea07b30"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fa72ea9f450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72eaa0d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa72ea9faa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7fa72ea00a90"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa72ea9e120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7fa72e9fd260"/></to>
    </wire>
    <wire loc="102:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea4b930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72eaa1540"/></to>
    </wire>
    <wire loc="103:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea48020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72eaa0d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea42020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72eaa1540"/></to>
    </wire>
    <wire loc="110:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea417a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72eaa0d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea3b610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72eaa1540"/></to>
    </wire>
    <wire loc="117:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea39c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72eaa0d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fa72ea982f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa72ea98940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7fa72e9fd9f0"/></to>
    </wire>
    <wire loc="123:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa72ea97020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7fa72e9fc240"/></to>
    </wire>
    <wire loc="129:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea33b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="130:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea312f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea2b160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea2a7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea23610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="144:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea22c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea1cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="151:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea1a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea13160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="158:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea127a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea0c610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea0bc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72ea04b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></to>
    </wire>
    <wire loc="172:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa72ea022f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72ec32b70"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fa72ec2d2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fa72f24d3b0"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa72e9137e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa72e8aad60"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa72e10b8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa72e910470"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa72e910470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa72e8ab6c0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fa72e108020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa72e90eb20"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa72e90eb20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa72e8a9a10"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fa72cfd7910"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa72e970ce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa72cfd6590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa72e910470"/></to>
    </wire>
    <wire loc="54:../../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fa72e970ce0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa72e924580"/></to>
    </wire>
    <wire loc="55:../../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa72e923400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa72e9193f0"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa72e9193f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa72e900300"/></to>
    </wire>
    <wire loc="56:../../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa72e922060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa72e910470"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa72e921720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa72e9137e0"/></to>
    </wire>
    <wire loc="169:../../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7fa72e920480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7fa72e920c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fa72e9153b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fa72e8a4b90"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fa72e8a4b90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fa72e892c40"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fa72e9131d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fa72e8ab0d0"/></to>
    </wire>
    <wire loc="69:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72e8a4540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72e8925f0"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e89e2b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e901330"/></to>
    </wire>
    <wire loc="69:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fa72e8a74a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa72e8a0790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fa72e8a6120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fa72e8a1c60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fa72e899970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fa72e123a30"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fa72e8a0790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa72e75fde0"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fa72e8a1c60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fa72e75f6c0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fa72e75ec20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fa72e899970"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e88a760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e89e2b0"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e75c920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e89e2b0"/></to>
    </wire>
    <wire loc="72:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e752cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e89e2b0"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa72e75d590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa72e886530"/></to>
    </wire>
    <wire loc="75:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fa72e75de80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fa72e88ba40"/></to>
    </wire>
    <wire loc="77:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa72e8807e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa72e758e00"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fa72e87b780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa72e72d0c0"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fa72e72d0c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa72e1360c0"/></to>
    </wire>
    <wire loc="80:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa72e74ad20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa72e72d8d0"/></to>
    </wire>
    <wire loc="45:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa72e72d8d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa72e13c440"/></to>
    </wire>
    <wire loc="332:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fa72e8286e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fa72e8604f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fa72e82cc70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fa72e825a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fa72e75a020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fa72e75a800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fa72e72b020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fa72e13b440"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fa72e13b440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fa72e6c3d00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa72e13c440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa72e6c4670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e13a020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e136920"/></to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa72e135020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72e13d020"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa72e13d020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72e6cac90"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e13dc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72cf1ca90"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72cf1ca90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e29c2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e6bd1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e13a020"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72cf0e020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e6c18e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fa72e6c0e50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72cf1de00"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa72cf1de00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72e29d020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa72e6b9710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72cf16440"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72cf16440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa72e2a04d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e6c18e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e62cdc0"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fa72e6c3d00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fa72e62a890"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa72e6c4670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa72e62b6d0"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa72e6cac90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72e62c020"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e6283e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e6bd1d0"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fa72e6295b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7fa72e6c0e50"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa72e6235b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa72e6b9710"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7fa72e628a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72e619b60"/></to>
    </wire>
    <wire loc="85:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72e619b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fa72e60d360"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72e622020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72e336d20"/></to>
    </wire>
    <wire loc="49:../../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72e336d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa72e331d90"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72e61f120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa72e611bd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e608970"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72e6126d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa72e608020"/></to>
    </wire>
    <wire loc="90:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fa72e5ce860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fa72e4e5cc0"/></to>
    </wire>
    <wire loc="530:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7fa72e4e5cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e437100"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7fa72e5d8800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7fa72e4e1cc0"/></to>
    </wire>
    <wire loc="532:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7fa72e4e1cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e432d10"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fa72e5cc800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fa72e4dfcc0"/></to>
    </wire>
    <wire loc="533:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7fa72e4dfcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e42d740"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7fa72e5c9800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7fa72e4d9cc0"/></to>
    </wire>
    <wire loc="536:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7fa72e4d9cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e424d10"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7fa72e5c7800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7fa72e4dbcc0"/></to>
    </wire>
    <wire loc="535:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7fa72e4dbcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e428100"/></to>
    </wire>
    <wire loc="14:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7fa72e5dfbc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fa72e1f8950"/></to>
    </wire>
    <wire loc="442:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fa72e541810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e475740"/></to>
    </wire>
    <wire loc="455:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fa72e52c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e445100"/></to>
    </wire>
    <wire loc="531:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7fa72e4e3ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e437100"/></to>
    </wire>
    <wire loc="551:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7fa72e4becb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ac740"/></to>
    </wire>
    <wire loc="460:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7fa72e528810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e43c740"/></to>
    </wire>
    <wire loc="473:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7fa72e5149a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e40b460"/></to>
    </wire>
    <wire loc="486:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7fa72e5009a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3dcd10"/></to>
    </wire>
    <wire loc="497:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fa72e4ef9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3b5100"/></to>
    </wire>
    <wire loc="545:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7fa72e4cacb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3c9740"/></to>
    </wire>
    <wire loc="557:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7fa72e4b6cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3a7100"/></to>
    </wire>
    <wire loc="445:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fa72e53b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e467740"/></to>
    </wire>
    <wire loc="450:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fa72e537810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e45ed10"/></to>
    </wire>
    <wire loc="463:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7fa72e522810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e42d740"/></to>
    </wire>
    <wire loc="476:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7fa72e50e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3fd100"/></to>
    </wire>
    <wire loc="489:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7fa72e4f99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ced10"/></to>
    </wire>
    <wire loc="500:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fa72e4e99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3a7100"/></to>
    </wire>
    <wire loc="440:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fa72e545810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e47e100"/></to>
    </wire>
    <wire loc="453:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fa72e531810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e44fd80"/></to>
    </wire>
    <wire loc="466:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7fa72e51c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e41f740"/></to>
    </wire>
    <wire loc="548:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7fa72e4c4cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ba740"/></to>
    </wire>
    <wire loc="555:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7fa72e4b8cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3a7100"/></to>
    </wire>
    <wire loc="541:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7fa72e4d1cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3e0100"/></to>
    </wire>
    <wire loc="471:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7fa72e518810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e416e60"/></to>
    </wire>
    <wire loc="484:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7fa72e5049a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3e5740"/></to>
    </wire>
    <wire loc="495:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fa72e4f39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3bfd10"/></to>
    </wire>
    <wire loc="549:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7fa72e4c2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3b5100"/></to>
    </wire>
    <wire loc="538:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7fa72e4d7cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ef100"/></to>
    </wire>
    <wire loc="443:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fa72e53f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e470100"/></to>
    </wire>
    <wire loc="456:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fa72e52a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e441d10"/></to>
    </wire>
    <wire loc="461:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7fa72e526810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e437100"/></to>
    </wire>
    <wire loc="474:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7fa72e5129a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e407e00"/></to>
    </wire>
    <wire loc="487:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7fa72e4fd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3d7740"/></to>
    </wire>
    <wire loc="498:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fa72e4ed9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3b1d10"/></to>
    </wire>
    <wire loc="540:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7fa72e4d3cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3e5740"/></to>
    </wire>
    <wire loc="438:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fa72e54b800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e4afd10"/></to>
    </wire>
    <wire loc="451:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fa72e535810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e458740"/></to>
    </wire>
    <wire loc="464:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7fa72e520810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e428100"/></to>
    </wire>
    <wire loc="477:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7fa72e50c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3f9d10"/></to>
    </wire>
    <wire loc="542:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7fa72e4cecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e41f740"/></to>
    </wire>
    <wire loc="546:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7fa72e4c8cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3c3100"/></to>
    </wire>
    <wire loc="552:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7fa72e4bccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3a7100"/></to>
    </wire>
    <wire loc="482:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7fa72e5089a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ef100"/></to>
    </wire>
    <wire loc="543:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7fa72e4cccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e41a100"/></to>
    </wire>
    <wire loc="441:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fa72e543810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e47ad10"/></to>
    </wire>
    <wire loc="454:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fa72e52f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e44a740"/></to>
    </wire>
    <wire loc="467:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7fa72e51a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e41a100"/></to>
    </wire>
    <wire loc="539:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7fa72e4d5cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ead10"/></to>
    </wire>
    <wire loc="550:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7fa72e4c0cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3b1d10"/></to>
    </wire>
    <wire loc="472:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7fa72e5169a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e4109f0"/></to>
    </wire>
    <wire loc="485:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7fa72e5029a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3e0100"/></to>
    </wire>
    <wire loc="496:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fa72e4f19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ba740"/></to>
    </wire>
    <wire loc="444:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fa72e53d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e46cd10"/></to>
    </wire>
    <wire loc="449:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fa72e539810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e462100"/></to>
    </wire>
    <wire loc="462:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7fa72e524810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e432d10"/></to>
    </wire>
    <wire loc="475:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7fa72e5109a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e402740"/></to>
    </wire>
    <wire loc="488:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7fa72e4fb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3d2100"/></to>
    </wire>
    <wire loc="499:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fa72e4eb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ac740"/></to>
    </wire>
    <wire loc="439:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fa72e547810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e484740"/></to>
    </wire>
    <wire loc="452:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fa72e533810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e453100"/></to>
    </wire>
    <wire loc="465:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7fa72e51e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e424d10"/></to>
    </wire>
    <wire loc="478:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7fa72e50a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3f4740"/></to>
    </wire>
    <wire loc="534:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7fa72e4ddca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e42d740"/></to>
    </wire>
    <wire loc="547:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7fa72e4c6cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3bfd10"/></to>
    </wire>
    <wire loc="483:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7fa72e5069a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ead10"/></to>
    </wire>
    <wire loc="554:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7fa72e4bacb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ac740"/></to>
    </wire>
    <wire loc="558:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7fa72e4b4cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e3ced10"/></to>
    </wire>
    <wire loc="529:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7fa72e4e79f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa72e43c740"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa72e331d90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72e32ae50"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72e31a020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="54:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72e2e92e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72e312470"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fa72e30f060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fa72e313b10"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fa72e313b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72e2e6020"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fa72e30e340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fa72e2ece70"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fa72e2ece70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72e2d2b90"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fa72e309660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fa72e2ea0f0"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fa72e2ea0f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72e2cd710"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72e2d52f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7fa72e518810"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72e2d1de0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7fa72e5149a0"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72e2cb930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7fa72e5129a0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa72cf16be0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e29f3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72cf152b0"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72e202d70"/></to>
    </wire>
    <wire loc="11:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72e202d70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fa72e1f8950"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72cf1ba50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72e619b60"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72cf1b2b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e29cad0"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e29cad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e20a400"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e29b8a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72cf0e020"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e29c2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e20b020"/></to>
    </wire>
    <wire loc="106:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e20b020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72cb42530"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7fa72e2a04d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa72e299d60"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa72e29d020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72e20c210"/></to>
    </wire>
    <wire loc="105:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa72e20c210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa72cb43740"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e29f3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e298710"/></to>
    </wire>
    <wire loc="108:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e20a400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72cb41930"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e20acd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e29b8a0"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e286bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e20a400"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7fa72e298d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72e6126d0"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fa72e2865e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa72e611bd0"/></to>
    </wire>
    <wire loc="107:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa72e20b7a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa72cb42cb0"/></to>
    </wire>
    <wire loc="109:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72cb3f270"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e20acd0"/></to>
    </wire>
    <wire loc="111:../../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fa72cb3fa30"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fa72cb454a0"/></to>
    </wire>
    <wire loc="75:../../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fa72cb3dc50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7fa72e1ef700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fa72e60d360"/></to>
    </wire>
    <wire loc="18:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fa72e1ea250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fa72e4e5cc0"/></to>
    </wire>
    <wire loc="19:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fa72e1e81f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fa72e4dfcc0"/></to>
    </wire>
    <wire loc="114:../../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7fa72e0cc500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fa72e0af680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fa72e0b6be0"/></to>
    </wire>
    <wire loc="44:../../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fa72e0a9380"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fa72eb91680"/></to>
    </wire>
    <wire loc="47:../../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fa72e0a9aa0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fa72e9153b0"/></to>
    </wire>
    <wire loc="352:BtStreamC.nc">
      <from><interface-ref name="sendResponse" scoped="" ref="0x7fa72df4a1f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="479:BtStreamC.nc">
      <from><interface-ref name="startConfigTimer" scoped="" ref="0x7fa72df15670"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="484:BtStreamC.nc">
      <from><interface-ref name="ProcessCommand" scoped="" ref="0x7fa72df12400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="756:BtStreamC.nc">
      <from><interface-ref name="gsr_range" scoped="" ref="0x7fa72debc020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="182:BtStreamC.nc">
      <from><interface-ref name="ToggleLed" scoped="" ref="0x7fa72df7c1f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="746:BtStreamC.nc">
      <from><interface-ref name="clockin_result" scoped="" ref="0x7fa72dec0500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="269:BtStreamC.nc">
      <from><interface-ref name="stopSensing" scoped="" ref="0x7fa72df600c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="264:BtStreamC.nc">
      <from><interface-ref name="ConfigureChannelsTask" scoped="" ref="0x7fa72df63510"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="332:BtStreamC.nc">
      <from><interface-ref name="sendSensorData" scoped="" ref="0x7fa72df510c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="199:BtStreamC.nc">
      <from><interface-ref name="startSensors" scoped="" ref="0x7fa72df77a20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="709:BtStreamC.nc">
      <from><interface-ref name="collect_results" scoped="" ref="0x7fa72decb440"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72caf7340"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72cadcca0"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fa72caea780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72caf7b90"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72caf7b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72cada5b0"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72caed3d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dda2020"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/CounterMilli16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72dda2020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dd9d5f0"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72cad7710"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72cae19d0"/></to>
    </wire>
    <wire loc="49:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72cae19d0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72cad6da0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72cadf120"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72cadf120"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72cad40c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72cade440"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72cade440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7fa72eaee410"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7fa72eae5a20"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7fa72eaed8c0"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7fa72eae4890"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7fa72eaeb020"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7fa72eae3700"/></to>
    </wire>
    <wire loc="70:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="71:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7fa72eaea5a0"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7fa72eae2570"/></to>
    </wire>
    <wire loc="74:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7fa72eae9a50"/></to>
    </wire>
    <wire loc="76:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7fa72eae13e0"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="79:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7fa72eae7020"/></to>
    </wire>
    <wire loc="80:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7fa72eae01f0"/></to>
    </wire>
    <wire loc="82:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></to>
    </wire>
    <wire loc="83:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7fa72eae65a0"/></to>
    </wire>
    <wire loc="84:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7fa72eadf020"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/CounterMilli16C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fa72dd80950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa72e331d90"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd311d0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd28c30"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd28c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72dc79690"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72dd2ce50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72dcf4760"/></to>
    </wire>
    <wire loc="59:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fa72dd21080"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fa72dc6acf0"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72dcf4760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72ca88860"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fa72dc73c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72dcc8cf0"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72dcc21d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72dcf3020"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72dcf3020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72ca815f0"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72dc5f020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dd10650"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72dd10650"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dd0a2e0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72ca88860"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72ca6c360"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fa72ca7bd20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72ca87140"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72ca87140"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72ca6cbf0"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72ca7e9b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dd10650"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ca68dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ca71020"/></to>
    </wire>
    <wire loc="49:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ca71020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ca66440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ca70760"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ca70760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ca65760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ca6fa80"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ca6fa80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fa72dd086d0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa72e331d90"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fa72dcbe490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fa72dc6ee80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa72c9f8380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa72c9dca30"/></to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fa72c9eb780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72c9f8bd0"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa72c9f8bd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa72c9db340"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72c9ed3d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dda2020"/></to>
    </wire>
    <wire loc="54:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72c9d84c0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72c9e17b0"/></to>
    </wire>
    <wire loc="49:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72c9e17b0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72c9d6a90"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72c9e0da0"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72c9e0da0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72c9d5da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72c9de0c0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72c9de0c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fa72dc40950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa72e331d90"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="UARTControl" scoped="" ref="0x7fa72dba48e0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72d9ecc80"/></to>
    </wire>
    <wire loc="88:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72d9ecc80"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fa72d9e5550"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="UARTData" scoped="" ref="0x7fa72db9f410"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72d9e9860"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72d9e9860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa72d9e0130"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="RTSInterrupt" scoped="" ref="0x7fa72db9fcf0"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7fa72dae1bc0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fa72dae1bc0"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7fa72dacda30"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="ConnectionInterrupt" scoped="" ref="0x7fa72db9ec80"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7fa72dad8bc0"/></to>
    </wire>
    <wire loc="82:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fa72dad8bc0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7fa72dac5bc0"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72db9daf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></to>
    </wire>
    <wire loc="376:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <from><interface-ref name="runSetCommands" scoped="" ref="0x7fa72db39d60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="302:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <from><interface-ref name="runMasterCommands" scoped="" ref="0x7fa72db4b1e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <from><interface-ref name="sendNextChar" scoped="" ref="0x7fa72db8c500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fa72dae3bc0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7fa72dacfa30"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fa72dae0bc0"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7fa72dacca30"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fa72dadebc0"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7fa72dacaa30"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fa72dae5c40"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7fa72dad1a30"/></to>
    </wire>
    <wire loc="80:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fa72dadabc0"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7fa72dac7a30"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fa72dae2bc0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7fa72dacea30"/></to>
    </wire>
    <wire loc="83:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fa72dad7bc0"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7fa72dac4bc0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fa72dae9d20"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7fa72dad59c0"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fa72dadcbc0"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7fa72dac9a30"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fa72dae4bc0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7fa72dad0a30"/></to>
    </wire>
    <wire loc="81:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fa72dad9c40"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7fa72dac6bc0"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fa72dadfbc0"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7fa72dacba30"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fa72dae6c80"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7fa72dad2a30"/></to>
    </wire>
    <wire loc="79:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fa72dadbbc0"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7fa72dac8a30"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fa72d9ec450"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fa72d9e8bc0"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fa72d9e0a00"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7fa72e4d5cc0"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7fa72d9de990"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7fa72e4d3cc0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fa72d9db990"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7fa72e4d1cc0"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7fa72d9d9990"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7fa72e4cccc0"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7fa72d9d7990"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7fa72e4cecc0"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7fa72d910370"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7fa72d8c8840"/></to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Msp430DmaControl" scoped="" ref="0x7fa72d936ce0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72d8c5b70"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7fa72d8c5b70"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72d768060"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Msp430DmaChannel" scoped="" ref="0x7fa72d939530"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7fa72d88d590"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72d9342a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel2" scoped="" ref="0x7fa72d88b8b0"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7fa72d773d80"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="Channel1" scoped="" ref="0x7fa72d88c720"/></from>
      <to><interface-ref name="Channel" scoped="" ref="0x7fa72d77b7a0"/></to>
    </wire>
    <wire loc="60:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7fa72d784020"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7fa72d863df0"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel0" scoped="" ref="0x7fa72d863df0"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7fa72d7cec90"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7fa72d77a7a0"/></from>
      <to><interface-ref name="Channel1" scoped="" ref="0x7fa72d860730"/></to>
    </wire>
    <wire loc="63:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel1" scoped="" ref="0x7fa72d860730"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7fa72d7c59b0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel" scoped="" ref="0x7fa72d772db0"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7fa72d85b0c0"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Channel2" scoped="" ref="0x7fa72d85b0c0"/></from>
      <to><interface-ref name="DMA" scoped="" ref="0x7fa72d7bb3f0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplControl" scoped="" ref="0x7fa72d768970"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa72d880d90"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7fa72d880d90"/></from>
      <to><interface-ref name="DmaControl" scoped="" ref="0x7fa72d856520"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel0" scoped="" ref="0x7fa72d767d90"/></from>
      <to><interface-ref name="Channel0" scoped="" ref="0x7fa72d863df0"/></to>
    </wire>
    <wire loc="74:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel1" scoped="" ref="0x7fa72d762740"/></from>
      <to><interface-ref name="Channel1" scoped="" ref="0x7fa72d860730"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <from><interface-ref name="HplChannel2" scoped="" ref="0x7fa72d75d0d0"/></from>
      <to><interface-ref name="Channel2" scoped="" ref="0x7fa72d85b0c0"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7fa72d7c9610"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7fa72d850710"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7fa72d7c02f0"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7fa72d850710"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <from><interface-ref name="Interrupt" scoped="" ref="0x7fa72d7b7c50"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7fa72d850710"/></to>
    </wire>
    <wire loc="53:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <from><interface-ref name="buttonNotify" scoped="" ref="0x7fa72d72a5a0"/></from>
      <to><interface-ref name="Notify" scoped="" ref="0x7fa72d70d020"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <from><interface-ref name="Notify" scoped="" ref="0x7fa72d70d020"/></from>
      <to><interface-ref name="Notify" scoped="" ref="0x7fa72d6d2af0"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d6d5760"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d703c90"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d703c90"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7fa72d6f8490"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d6d6510"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d708380"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d708380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d6ffd50"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <from><interface-ref name="NotifyLower" scoped="" ref="0x7fa72d6ce750"/></from>
      <to><interface-ref name="Notify" scoped="" ref="0x7fa72d6d8b10"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <from><interface-ref name="debounceTimer" scoped="" ref="0x7fa72d6cb3d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72d6ba8c0"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72d6ba8c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd311d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72d6fd020"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7fa72e543810"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7fa72d6eb020"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7fa72dae4bc0"/></to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <from><interface-ref name="sendEvent" scoped="" ref="0x7fa72d6d42f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonP.nc">
      <from><interface-ref name="debounce" scoped="" ref="0x7fa72d6c1c40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="testTimer" scoped="" ref="0x7fa72d688020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72d632cd0"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72d632cd0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd311d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="I2CPacket" scoped="" ref="0x7fa72d699d60"/></from>
      <to><interface-ref name="I2CBasicAddr" scoped="" ref="0x7fa72d627220"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="I2CInit" scoped="" ref="0x7fa72d697c20"/></from>
      <to><interface-ref name="I2CInit" scoped="" ref="0x7fa72d622020"/></to>
    </wire>
    <wire loc="70:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7fa72d695370"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72e202d70"/></to>
    </wire>
    <wire loc="71:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7fa72d622730"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72e202d70"/></to>
    </wire>
    <wire loc="74:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72d61b780"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa72e611bd0"/></to>
    </wire>
    <wire loc="88:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <from><interface-ref name="writeDone" scoped="" ref="0x7fa72d610600"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x7fa72d615720"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <from><interface-ref name="BeatInterrupt" scoped="" ref="0x7fa72d5ba800"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7fa72dacba30"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <from><interface-ref name="Msp430GeneralIO" scoped="" ref="0x7fa72d5b98c0"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7fa72e539810"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa72d5abe40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa72dc4b9a0"/></to>
    </wire>
    <wire loc="61:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fa72d5b7850"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fa72d5acb70"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d52c440"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d53c660"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d53c660"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7fa72d535b40"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d52d290"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d53d380"/></to>
    </wire>
    <wire loc="52:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d53d380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d53a850"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <from><interface-ref name="NotifyLower" scoped="" ref="0x7fa72d525490"/></from>
      <to><interface-ref name="Notify" scoped="" ref="0x7fa72d530880"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <from><interface-ref name="debounceTimer" scoped="" ref="0x7fa72d5220f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa72d512c30"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa72d512c30"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd311d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72d539ac0"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7fa72e539810"/></to>
    </wire>
    <wire loc="55:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7fa72d5347a0"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7fa72dadfbc0"/></to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <from><interface-ref name="sendEvent" scoped="" ref="0x7fa72d52b020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../../tos/platforms/shimmer/UserButtonP.nc">
      <from><interface-ref name="debounce" scoped="" ref="0x7fa72d518bb0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="51:../../../../tos/platforms/shimmer/chips/msp430/FastClockC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa72d19e020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../../tos/system/MainC.nc">
      <documentation loc="45:../../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BtStreamC" loc="57:BtStreamC.nc">
      <documentation loc="33:../../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BtStreamAppC.SampleTimer" loc="41(BtStreamAppC.SampleTimer):../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BtStreamAppC.SampleTimer.AlarmFrom" loc="41(BtStreamAppC.SampleTimer.AlarmFrom):../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Timer" loc="37(BtStreamAppC.SampleTimer.AlarmFrom.Msp430Timer):../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm" loc="43(BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm):../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli16C" loc="41:../../../../tos/chips/msp430/timer/CounterMilli16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/CounterMilli16C.nc">
        <short>&#10; CounterMilli16C provides at 16-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli16C provides at 16-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli16C.Transform" loc="54(CounterMilli16C.Transform):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BtStreamAppC.SampleTimer.Transform" loc="51(BtStreamAppC.SampleTimer.Transform):../../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BtStreamAppC.SetupTimer" loc="44(BtStreamAppC.SetupTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BtStreamAppC.BlinkTimer" loc="41(BtStreamAppC.BlinkTimer):../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmMilli16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BtStreamAppC.BlinkTimer.AlarmFrom" loc="41(BtStreamAppC.BlinkTimer.AlarmFrom):../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Timer" loc="37(BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Timer):../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm" loc="43(BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm):../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BtStreamAppC.BlinkTimer.Transform" loc="51(BtStreamAppC.BlinkTimer.Transform):../../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BtStreamAppC.CounterToLocalTimeC" loc="46(BtStreamAppC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RovingNetworksC" loc="45:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
        <short>&#10; </short>
        <long>&#10; @author Steve Ayer&#10; @author Adrian Burns&#10; @date February, 2007&#10;&#10; @author Mike Healy&#10; @date April 20, 2009 - ported to TinyOS 2.x &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RovingNetworksP" loc="47:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="36:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="31:../../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="73:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <documentation loc="62:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
        <short>&#10; Implementation of USART1 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART1 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-04 22:30:21 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AccelC" loc="36:../../../../tos/platforms/shimmer2r/AccelC.nc">
      <configuration/>
    </component>
    <component qname="Mma7361P" loc="37:../../../../tos/platforms/shimmer2r/Mma7361P.nc">
      <module/>
    </component>
    <component qname="shimmerAnalogSetupC" loc="35:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <configuration/>
    </component>
    <component qname="shimmerAnalogSetupP" loc="39:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430DmaC" loc="46:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
        <short>&#10; Implementation of the HAL level component for the MSP430 DMA module.</short>
        <long>&#10; Implementation of the HAL level component for the MSP430 DMA module.&#10; This configuration provides the available DMA channels through the&#10; MSP430DMA parameterized interface.  If more channels are requested&#10; than available through unique(&#34;DMA&#34;), there will be no mapping for&#10; that channel and compilation will fail.&#10;&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaC" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430DmaP" loc="41:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma0" loc="42(HplMsp430DmaC.Dma0):../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:480">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:482">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:484">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:486">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:15">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma1" loc="42(HplMsp430DmaC.Dma1):../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:488">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:490">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:492">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:494">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:240">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430DmaC.Dma2" loc="42(HplMsp430DmaC.Dma2):../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430DmaXP"/>
        <arguments>
          <value cst="I:496">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:498">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:500">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:502">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3840">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:8">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel0P" loc="42(Msp430DmaC.Channel0P):../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel1P" loc="42(Msp430DmaC.Channel1P):../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaC.Channel2P" loc="42(Msp430DmaC.Channel2P):../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430DmaChannelP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430DmaControlP" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GyroBoardC" loc="38:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <configuration/>
    </component>
    <component qname="GyroBoardP" loc="41:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardP.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GyroButtonC" loc="50:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplGyroButtonC" loc="42:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
        <short>&#10; Implementation of the user button for the telos platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telos platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.2 $&#10; (not much to) port to shimmer2 gyro&#10; @author Steve Ayer&#10; @date March, 2010&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplGyroButtonC.UserButtonC" loc="42(HplGyroButtonC.UserButtonC):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplGyroButtonC.InterruptUserButtonC" loc="43(HplGyroButtonC.InterruptUserButtonC):../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="GyroButtonC.SwitchToggleC" loc="44(GyroButtonC.SwitchToggleC):../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SwitchToggleC"/>
      </instance>
      <module/>
    </component>
    <component qname="GyroButtonP" loc="44:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonP.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GyroButtonC.debounceTimer" loc="44(GyroButtonC.debounceTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MagnetometerC" loc="46:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <documentation loc="31:../../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Hmc5843P" loc="44:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <module/>
    </component>
    <component qname="MagnetometerC.testTimer" loc="44(MagnetometerC.testTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430I2CP" loc="39:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <documentation loc="33:../../../../tos/types/I2C.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Philip Levis&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="StrainGaugeC" loc="36:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeC.nc">
      <configuration/>
    </component>
    <component qname="StrainGaugeP" loc="35:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeP.nc">
      <module/>
    </component>
    <component qname="DigitalHeartRateC" loc="43:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <configuration/>
    </component>
    <component qname="Rmcm01P" loc="48:../../../../tos/platforms/shimmer/chips/rmcm01/Rmcm01P.nc">
      <module/>
    </component>
    <component qname="DigitalHeartRateC.CounterToLocalTimeC" loc="46(DigitalHeartRateC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GsrC" loc="35:../../../../tos/platforms/shimmer/chips/gsr/GsrC.nc">
      <configuration/>
    </component>
    <component qname="GsrP" loc="40:../../../../tos/platforms/shimmer/chips/gsr/GsrP.nc">
      <module/>
    </component>
    <component qname="BtCommandParserC" loc="35:BtCommandParserC.nc">
      <configuration/>
    </component>
    <component qname="BtCommandParserP" loc="37:BtCommandParserP.nc">
      <module/>
    </component>
    <component qname="InternalFlashC" loc="43:../../../../tos/platforms/shimmer/chips/msp430/InternalFlashC.nc">
      <documentation loc="27:../../../../tos/platforms/shimmer/chips/msp430/InternalFlashC.nc">
        <short>&#10; InternalFlashC.nc - Internal flash implementation for telos msp&#10; platform.</short>
        <long>&#10; InternalFlashC.nc - Internal flash implementation for telos msp&#10; platform. On the msp, the flash must first be erased before a value&#10; can be written. However, the msp can only erase the flash at a&#10; segment granularity (128 bytes for the information section). This&#10; module allows transparent read/write of individual bytes to the&#10; information section by dynamically switching between the two&#10; provided segments in the information section.&#10;&#10; Valid address range is 0x1000 - 0x107E (0x107F is used to store the&#10; version number of the information segment).&#10;&#10; @author Jonathan Hui &#60;jwhui@cs.berkeley.edu>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UserButtonC" loc="50:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplUserButtonC" loc="42:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
        <short>&#10; Implementation of the user button for the telos platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telos platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;&#10; @author Mike Healy&#10; @date May 9, 2009 - modified for use with SHIMMER2&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplUserButtonC.UserButtonC" loc="42(HplUserButtonC.UserButtonC):../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplUserButtonC.InterruptUserButtonC" loc="43(HplUserButtonC.InterruptUserButtonC):../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="UserButtonC.SwitchToggleC" loc="44(UserButtonC.SwitchToggleC):../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SwitchToggleC"/>
      </instance>
      <module/>
    </component>
    <component qname="UserButtonP" loc="44:../../../../tos/platforms/shimmer/UserButtonP.nc">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UserButtonC.debounceTimer" loc="44(UserButtonC.debounceTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CRYPTOC" loc="1:../../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <configuration/>
    </component>
    <component qname="CRYPTOP" loc="3:../../../../tos/platforms/shimmer2r/CRYPTOP.nc" safe="">
      <module/>
    </component>
    <component qname="FastClockC" loc="35:../../../../tos/platforms/shimmer/chips/msp430/FastClockC.nc">
      <configuration/>
    </component>
    <component qname="FastClockP" loc="50:../../../../tos/platforms/shimmer/chips/msp430/FastClockP.nc">
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7fa72ead3890" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7fa72ead3c30" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7fa72ead2020" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7fa72ead23a0" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7fa72ead2720" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7fa72ead2a90" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7fa72ead2e20" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7fa72ead1200" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7fa72ead15d0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7fa72ea95e70" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7fa72ea92270" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fa72eb94820" loc="47:../../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7fa72e98c0d0" loc="43:../../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7fa72e9690d0" loc="45:../../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7fa72e4ae190" loc="40:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7fa72e4ae540" loc="41:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7fa72e4ae8f0" loc="42:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7fa72e4aeca0" loc="43:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7fa72e4ad060" loc="44:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fa72e32be60" loc="42:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fa72e32be60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fa72e2815b0" loc="89:../../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fa72e2745b0" loc="42:../../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7fa72e25ad90" loc="52:../../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7fa72e1064a0" loc="42:../../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fa72e1064a0"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7fa72e106820" loc="42:../../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMilli16C" loc="41:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fa72ddd69d0" loc="43:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fa72ddd69d0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fa72dd9fb10" loc="55:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fa72dd9fb10"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fa72dd9c370" loc="56:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fa72dd9c370"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fa72dd9c760" loc="57:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fa72dd9c760"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fa72dd9a020" loc="58:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fa72dd9a020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fa72dd9a3f0" loc="59:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fa72dd9abf0" loc="60:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fa72dd9abf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fa72dd79020" loc="52:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fa72dd79020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fa72dd797f0" loc="53:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fa72dd797f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fa72dd79be0" loc="54:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fa72dd79be0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fa72dd78400" loc="55:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fa72dd78400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fa72dd787d0" loc="56:../../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72dcec4f0" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72dcec4f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72dcbcd70" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72dcbcd70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fa72dcb80d0" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72dc681f0" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72dc681f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430DmaXP" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre &#60;info@moteiv.com>&#10; @author Mark Hays&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="DMAxCTL_addr" ref="0x7fa72d8545f0" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxSA_addr" ref="0x7fa72d8549a0" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxDA_addr" ref="0x7fa72d854d50" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxSZ_addr" ref="0x7fa72d83a180" loc="45:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxTSEL_mask" ref="0x7fa72d83a550" loc="46:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
        <constant name="DMAxTSEL_shift" ref="0x7fa72d83a920" loc="47:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
          <component-ref qname="HplMsp430DmaXP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430DmaChannelP" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc" abstract="">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="43:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SwitchToggleC" loc="44:../../../../tos/platforms/shimmer/SwitchToggleC.nc" abstract="">
      <documentation loc="32:../../../../tos/platforms/shimmer/UserButton.h">
        <short>&#10; Implementation of the user button for the telosb platform&#10;&#10; </short>
        <long>&#10; Implementation of the user button for the telosb platform&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7fa72eb93d10" loc="58:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72eb93d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb920e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fa72eb91680" loc="57:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa72eb91680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa72eb91a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72eb92c00" loc="40:../../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72eb92c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb8e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fa72eb8a8c0" loc="6:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7fa72eb8a8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb8ac40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72eb8ea90" loc="4:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72eb8ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb8ee10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7fa72eb8a1e0" loc="5:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fa72eb8a1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb8a560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7fa72eb89020" loc="7:../../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7fa72eb89020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb893a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72eb8d8a0" loc="39:../../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72eb8d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb8dc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7fa72eb8b910" loc="39:../../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fa72eb8b910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb8bc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fa72eb54de0" loc="40:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa72eb54de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fa72eb59c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fa72eb59310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fa72eb594a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fa72eb59630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fa72eb59180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fa72eb597c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fa72eb59950"/>
        <function-ref name="initClocks" scoped="" ref="0x7fa72eb59ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72eb5d850" loc="39:../../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72eb5d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb5dbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fa72eb44a70" loc="46:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa72eb44a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fa72eb43980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fa72eb43020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fa72eb431b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fa72eb43340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fa72eb44df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fa72eb434d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fa72eb43660"/>
        <function-ref name="initClocks" scoped="" ref="0x7fa72eb437f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fa72eb43cc0" loc="47:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa72eb43cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fa72eb420a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72eb443c0" loc="45:../../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72eb443c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72eb44740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7fa72eb00a50" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7fa72eb00a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eb00dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eaff020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaff1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eaff340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eaff4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eaff660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eaff7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eaff980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eaffb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7fa72eaee410" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7fa72eaee410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eaee790"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eaee920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaeeab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eaeec40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eaeedd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eaed020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eaed1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eaed340"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eaed4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7fa72eaf7d10" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7fa72eaf7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eaf60e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eaf6270"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eaf6400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eaf6590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eaf6720"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eaf68b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7fa72eada020" loc="68:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7fa72eada020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eada3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eada530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eada6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eada850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eada9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eadab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7fa72eafc020" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fa72eafc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eafc3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eafc530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eafc6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eafc850"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eafc9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7fa72eae2570" loc="61:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7fa72eae2570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eae28f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eae2a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eae2c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eae2da0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eae1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7fa72ead7020" loc="71:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7fa72ead7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ead73a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ead7530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ead76c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ead7850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ead79e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ead7b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7fa72eae9a50" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7fa72eae9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eae9dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eae8020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eae81b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eae8340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eae84d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eae8660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eae87f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eae8980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eae8b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7fa72eb07020" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fa72eb07020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eb073a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eb07530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eb076c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eb07850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eb079e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eb07b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eb07d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eb06020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eb061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7fa72eadc020" loc="66:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7fa72eadc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eadc3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eadc530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eadc6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eadc850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eadc9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eadcb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7fa72eae4890" loc="59:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7fa72eae4890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eae4c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eae4da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eae3020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eae31b0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eae3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7fa72eaed8c0" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7fa72eaed8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eaedd40"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eaec020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaec1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eaec340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eaec4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eaec660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eaec7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eaec980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eaecb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7fa72eaf6c70" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7fa72eaf6c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eaf0020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eaf01b0"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eaf0340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eaf04d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eaf0660"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eaf07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7fa72ead9020" loc="69:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7fa72ead9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ead93a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ead9530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ead96c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ead9850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ead99e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ead9b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7fa72eaeb020" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7fa72eaeb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eaeb3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eaeb530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaeb6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eaeb850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eaeb9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eaebb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eaebd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eaea020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eaea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7fa72eafcda0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7fa72eafcda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eaf8180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eaf8310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eaf84a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eaf8630"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eaf87c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7fa72eb097b0" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fa72eb097b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72eb09b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72eb09cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eb09e50"/>
        <function-ref name="get" scoped="" ref="0x7fa72eb11020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eb111b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eb11340"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72eb114d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eb11660"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72eb117f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72eb11980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72eb11b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7fa72eae13e0" loc="62:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7fa72eae13e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eae1760"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eae18f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eae1a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eae1c10"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eae1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7fa72eb065a0" loc="41:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fa72eb065a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eb06920"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eb06ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eb06c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eb06dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eb00020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eb001b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eb00340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eb004d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eb00660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7fa72eae7020" loc="56:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7fa72eae7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eae73a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eae7530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eae76c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eae7850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eae79e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eae7b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eae7d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eae6020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eae61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7fa72eaf1dc0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7fa72eaf1dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eaf7180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eaf7310"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eaf74a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eaf7630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eaf77c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eaf7950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7fa72eadb020" loc="67:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7fa72eadb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eadb3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eadb530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eadb6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eadb850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eadb9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eadbb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7fa72eafd140" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fa72eafd140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eafd4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eafd650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eafd7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eafd970"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eafdb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7fa72eae3700" loc="60:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7fa72eae3700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eae3a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eae3c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eae3da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eae2020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eae21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7fa72ead8020" loc="70:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7fa72ead8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ead83a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ead8530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ead86c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ead8850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ead89e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ead8b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7fa72eaea5a0" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7fa72eaea5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eaea920"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eaeaab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaeac40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eaeadd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eae9020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eae91b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eae9340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eae94d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eae9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7fa72eaf0b70" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7fa72eaf0b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72eaef020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72eaef1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaef340"/>
        <function-ref name="get" scoped="" ref="0x7fa72eaef4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eaef660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eaef7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72eaef980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eaefb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72eaefca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72eaefe30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72eaee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7fa72eae01f0" loc="63:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7fa72eae01f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eae0570"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eae0700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eae0890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eae0a20"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eae0bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7fa72eadd020" loc="65:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7fa72eadd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eadd3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72eadd530"/>
        <function-ref name="captured" scoped="" ref="0x7fa72eadd6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eadd850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eadd9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72eaddb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7fa72eadf020" loc="64:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7fa72eadf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eadf5a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eadf730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eadf8c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eadfa50"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eadfbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7fa72eae5a20" loc="58:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7fa72eae5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72eae5da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72eae4020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72eae41b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72eae4340"/>
        <function-ref name="fired" scoped="" ref="0x7fa72eae44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7fa72eae65a0" loc="57:../../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7fa72eae65a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72eae6920"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72eae6ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eae6c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72eae6dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72eae5020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eae51b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72eae5340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72eae54d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72eae5660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fa72ea9faa0" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa72ea9faa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea9fe20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fa72ea9f450" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fa72ea9f450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea9f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fa72ea9e120" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa72ea9e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea9e4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fa72eaa0d80" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72eaa0d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea9f180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72eaa1540" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72eaa1540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72eaa18c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72eaa1a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72eaa1be0"/>
        <function-ref name="get" scoped="" ref="0x7fa72eaa1d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72eaa0020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72eaa01b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72eaa0340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72eaa04d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72eaa0660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72eaa07f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72eaa0980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fa72ea98940" loc="53:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa72ea98940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea98cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fa72ea982f0" loc="52:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fa72ea982f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea98670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fa72ea97020" loc="54:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa72ea97020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea973a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fa72ea99bf0" loc="51:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea99bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea98020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72ea9a3e0" loc="50:../../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea9a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea9a760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea9a8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea9aa80"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea9ac10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea9ada0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea99020"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea991b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea99340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea994d0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea99660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea997f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea4ca90" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea4ca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea4ce10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea4b020"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea4b1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea4b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea4b4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea4b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea939d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea939d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea93d50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea4d020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea4d1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea4d340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea4d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea4d660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea4d7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea4d980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea4db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea48020" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea48020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea483a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea4dde0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea4dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea4c180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea4c310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea4c4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea4c630"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea4c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea4b930" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea4b930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea4bcb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea4be40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea49020"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea491b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea49340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea494d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea49660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea497f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea49980"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea49b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea49ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea43160" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea43160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea434e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea43670"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea43800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea43990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea43b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea43cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea45020" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea45020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea453a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea45530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea456c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea45850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea459e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea45b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea45d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea44020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea441b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea417a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea417a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea41b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea44480" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea44480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea44800"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea44990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea44b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea44cb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea44e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea42020" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea42020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea423a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea42530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea426c0"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea42850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea429e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea42b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea42d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea41020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea411b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea41340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea414d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea3c7a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea3c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea3cb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea3ccb0"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea3ce40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea3b020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea3b1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea3b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea3e6d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea3e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea3ea50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea3ebe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea3ed70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea3d020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea3d1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea3d340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea3d4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea3d660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea3d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea39c50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea39c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea3dac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea3dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea3de40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea3c020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea3c1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea3c340"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea3c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea3b610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea3b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea3b990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea3bb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea3bcb0"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea3be40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea39020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea391b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea39340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea394d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea39660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea397f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea39980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea34cb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea34cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea330a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea33230"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea333c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea33550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea336e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea33870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea36b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea36b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea35020"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea351b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea35340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea354d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea35660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea357f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea35980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea35b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea35ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea312f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea312f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea31670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea34020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea343a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea34530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea346c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea34850"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea349e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea33b40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea33b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea32020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea321b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea32340"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea324d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea32660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea327f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea32980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea32b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea32ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea32e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea2c2f0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea2c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea2c670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea2c800"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea2c990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea2cb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea2ccb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea2ce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea2e220" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea2e220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea2e5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea2e730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea2e8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea2ea50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea2ebe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea2ed70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea2d020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea2d1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea2d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea2a7a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea2a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea2ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea2d610" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea2d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea2d990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea2db20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea2dcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea2de40"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea2c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea2b160" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea2b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea2b4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea2b670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea2b800"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea2b990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea2bb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea2bcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea2be40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea2a020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea2a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea2a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea2a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea247a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea247a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea24b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea24cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea24e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea23020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea231b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea23340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea266d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea266d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea26a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea26be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea26d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea25020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea251b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea25340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea254d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea25660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea257f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea22c50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea22c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea21020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea25ac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea25ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea25e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea24020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea241b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea24340"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea244d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea23610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea23610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea23990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea23b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea23cb0"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea23e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea22020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea221b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea22340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea224d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea22660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea227f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea22980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea1dcb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea1dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea1c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea1c230"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea1c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea1c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea1c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea1c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea1fb30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea1fb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea1e020"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea1e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea1e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea1e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea1e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea1e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea1e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea1eb10"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea1eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea1a2f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea1a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea1a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea1d020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea1d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea1d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea1d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea1d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea1d850"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea1d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea1cb40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea1cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea1b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea1b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea1b340"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea1b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea1b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea1b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea1b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea1bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea1bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea1be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea142f0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea142f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea14670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea14800"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea14990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea14b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea14cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea14e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea16220" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea16220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea165a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea16730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea168c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea16a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea16be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea16d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea15020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea151b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea15340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea127a0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea127a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea12b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea15610" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea15610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea15990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea15b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea15cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea15e40"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea14020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea13160" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea13160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea134e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea13670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea13800"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea13990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea13b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea13cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea13e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea12020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea121b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea12340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea0d7a0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea0d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea0db20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea0dcb0"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea0de40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea0c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea0c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea0c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea0f6d0" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea0f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea0fa50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea0fbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea0fd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea0e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea0e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea0e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea0e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea0e660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea0e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea0bc50" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea0bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea0a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea0eac0" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea0eac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea0ee40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea0d020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea0d1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea0d340"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea0d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea0c610" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea0c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea0c990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea0cb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea0ccb0"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea0ce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea0b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea0b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea0b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea0b4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea0b660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea0b7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea0b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa72ea05cb0" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa72ea05cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea040a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa72ea04230"/>
        <function-ref name="captured" scoped="" ref="0x7fa72ea043c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea04550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea046e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa72ea04870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72ea07b30" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72ea07b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ea06020"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ea061b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea06340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ea064d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ea06660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea067f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ea06980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ea06b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ea06ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa72ea022f0" loc="48:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa72ea022f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea02670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa72ea05020" loc="45:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa72ea05020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ea053a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ea05530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ea056c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ea05850"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ea059e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa72ea04b40" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72ea04b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ea03020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ea031b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ea03340"/>
        <function-ref name="get" scoped="" ref="0x7fa72ea034d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ea03660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ea037f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ea03980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ea03b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ea03ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ea03e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ea02020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7fa72e9fc240" loc="7:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7fa72e9fc240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e9fc5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7fa72ea00a90" loc="4:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7fa72ea00a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72ea00e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7fa72e9fd260" loc="5:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7fa72e9fd260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e9fd5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7fa72e9fd9f0" loc="6:../../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7fa72e9fd9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e9fdd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fa72eedc4c0" loc="55:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa72eedc4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fa72eedc840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fa72f24d3b0" loc="51:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fa72f24d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fa72f24d730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fa72f24d8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7fa72f24da50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fa72f0b6bc0" loc="52:../../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7fa72f0b6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fa72f1f2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fa72e9c8dc0" loc="60:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fa72e9c8dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e9c7180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fa72e9c9590" loc="57:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa72e9c9590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa72e9c9910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fa72e9c86c0" loc="59:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7fa72e9c86c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e9c8a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fa72e9c9c00" loc="58:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fa72e9c9c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e9c8020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fa72e9c81b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fa72e9c8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fa72f2ca410" loc="48:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fa72f2ca410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72f2ca790"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72f2ca920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fa72f25b3a0" loc="47:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fa72f25b3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72f25b720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fa72f25b8b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fa72f25ba40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fa72ec32b70" loc="56:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fa72ec32b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72ec31020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72ec311b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fa72ec2d2c0" loc="57:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fa72ec2d2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fa72ec2d640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fa72ec2d7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7fa72ec2d960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fa72ec33c30" loc="55:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fa72ec33c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72ec32020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fa72ec321b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fa72ec32340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa72e10c020" loc="49:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa72e10c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e10c3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e10c530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e10c6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e10c850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e10c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fa72e10cc30" loc="50:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa72e10cc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72e10b020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa72e10b1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e10b340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e10b4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa72e10b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fa72e10b8b0" loc="51:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa72e10b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa72e10bc30"/>
        <function-ref name="source" scoped="" ref="0x7fa72e10bdc0"/>
        <function-ref name="address" scoped="" ref="0x7fa72e109020"/>
        <function-ref name="destination" scoped="" ref="0x7fa72e1091b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fa72e109340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa72e1094d0"/>
        <function-ref name="type" scoped="" ref="0x7fa72e109660"/>
        <function-ref name="setType" scoped="" ref="0x7fa72e1097f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa72e109980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa72e109b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa72e109ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fa72e108020" loc="52:../../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7fa72e108020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fa72e1083a0"/>
        <function-ref name="noAck" scoped="" ref="0x7fa72e108530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fa72e1086c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa72cfd8b40" loc="44:../../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa72cfd8b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72cfd7020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72cfd71b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72cfd7340"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72cfd74d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72cfd7660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fa72cfd7910" loc="46:../../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa72cfd7910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72cfd7c90"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72cfd7e20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72cfd6020"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72cfd61b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72cfd6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fa72cfd6590" loc="47:../../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa72cfd6590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa72cfd6910"/>
        <function-ref name="source" scoped="" ref="0x7fa72cfd6aa0"/>
        <function-ref name="address" scoped="" ref="0x7fa72cfd6c30"/>
        <function-ref name="destination" scoped="" ref="0x7fa72cfd6dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7fa72cfd5020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa72cfd51b0"/>
        <function-ref name="type" scoped="" ref="0x7fa72cfd5340"/>
        <function-ref name="setType" scoped="" ref="0x7fa72cfd54d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa72cfd5660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa72cfd57f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa72cfd5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa72e970ce0" loc="44:../../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa72e970ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e96d0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e96d230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e96d3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e96d550"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e96d6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fa72e923400" loc="48:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa72e923400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e9237a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e923930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e923ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e923c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e923de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa72e924580" loc="46:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa72e924580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e924920"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e924ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e924c40"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e924dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e923020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fa72e921720" loc="50:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa72e921720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72e921aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa72e921c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e921dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e920020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa72e9201b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7fa72e920480" loc="169:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7fa72e920480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e920800"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e920990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7fa72e920c60" loc="126:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7fa72e920c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e91e020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e91e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fa72e922060" loc="49:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa72e922060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa72e9223e0"/>
        <function-ref name="source" scoped="" ref="0x7fa72e922570"/>
        <function-ref name="address" scoped="" ref="0x7fa72e922700"/>
        <function-ref name="destination" scoped="" ref="0x7fa72e922890"/>
        <function-ref name="setSource" scoped="" ref="0x7fa72e922a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa72e922bb0"/>
        <function-ref name="type" scoped="" ref="0x7fa72e922d40"/>
        <function-ref name="setType" scoped="" ref="0x7fa72e921020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa72e9211b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa72e921340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa72e9214d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fa72e9153b0" loc="46:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fa72e9153b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa72e915730"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa72e9158c0"/>
        <function-ref name="start" scoped="" ref="0x7fa72e915a50"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e915be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa72e9193f0" loc="47:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa72e9193f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e919770"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e919900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e919a90"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e919c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e919db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fa72e9137e0" loc="49:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa72e9137e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72e913b60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa72e913cf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e913e80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e910030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa72e9101c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa72e9131d0" loc="48:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa72e9131d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa72e913550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e901330" loc="53:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e901330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e9016b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e901840"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e9019d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e901b60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e901cf0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e901e80"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e90c030"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e90c670"/>
        <function-ref name="set" scoped="" ref="0x7fa72e90c1c0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e90c350"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e90c4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fa72e90eb20" loc="51:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa72e90eb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fa72e90d020"/>
        <function-ref name="noAck" scoped="" ref="0x7fa72e90d1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fa72e90d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fa72e910470" loc="50:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa72e910470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa72e9107f0"/>
        <function-ref name="source" scoped="" ref="0x7fa72e910980"/>
        <function-ref name="address" scoped="" ref="0x7fa72e910b10"/>
        <function-ref name="destination" scoped="" ref="0x7fa72e910ca0"/>
        <function-ref name="setSource" scoped="" ref="0x7fa72e910e30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa72e90e020"/>
        <function-ref name="type" scoped="" ref="0x7fa72e90e1b0"/>
        <function-ref name="setType" scoped="" ref="0x7fa72e90e340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa72e90e4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa72e90e660"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa72e90e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fa72e8a74a0" loc="54:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7fa72e8a74a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e8a7820"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e8a79b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e8a7b40"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e8a7cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e8a7e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fa72e8a6120" loc="55:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7fa72e8a6120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa72e8a64a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa72e900300" loc="47:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa72e900300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e9006a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e900830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e9009c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e900b50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e900ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fa72e8aad60" loc="50:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa72e8aad60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72e8a9180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa72e8a9310"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e8a94a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e8a9630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa72e8a97c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa72e8ab0d0" loc="48:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa72e8ab0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa72e8ab470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fa72e8a9a10" loc="51:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa72e8a9a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fa72e8a9d90"/>
        <function-ref name="noAck" scoped="" ref="0x7fa72e8a7020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fa72e8a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fa72e8ab6c0" loc="49:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa72e8ab6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa72e8aba40"/>
        <function-ref name="source" scoped="" ref="0x7fa72e8abbd0"/>
        <function-ref name="address" scoped="" ref="0x7fa72e8abd60"/>
        <function-ref name="destination" scoped="" ref="0x7fa72e8aa020"/>
        <function-ref name="setSource" scoped="" ref="0x7fa72e8aa1b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa72e8aa340"/>
        <function-ref name="type" scoped="" ref="0x7fa72e8aa4d0"/>
        <function-ref name="setType" scoped="" ref="0x7fa72e8aa660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa72e8aa7f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa72e8aa980"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa72e8aab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fa72e8a4b90" loc="50:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fa72e8a4b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa72e8a1020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa72e8a11b0"/>
        <function-ref name="start" scoped="" ref="0x7fa72e8a1340"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e8a14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa72e8a0790" loc="52:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa72e8a0790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa72ebb30d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e8a0b10"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e8a0ca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e8a0e30"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e89f020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e89f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72e8a4540" loc="49:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72e8a4540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e8a48c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa72e8a1c60" loc="51:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa72e8a1c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa72ebb30d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa72e8a0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e89e2b0" loc="56:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e89e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e89e630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e89e7c0"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e89e950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e89eae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e89ec70"/>
        <function-ref name="get" scoped="" ref="0x7fa72e89ee00"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e89d020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e89d660"/>
        <function-ref name="set" scoped="" ref="0x7fa72e89d1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e89d340"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e89d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fa72e899970" loc="55:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fa72e899970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa72ebb30d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fa72e899cf0"/>
        <function-ref name="offset" scoped="" ref="0x7fa72e899e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fa72e89e030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fa72e892c40" loc="66:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fa72e892c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa72e891020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa72e8911b0"/>
        <function-ref name="start" scoped="" ref="0x7fa72e891340"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e8914d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fa72e8286e0" loc="332:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7fa72e8286e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e828a60"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e828bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fa72e87b780" loc="74:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fa72e87b780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72e87bb00"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e87bc90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fa72e8604f0" loc="191:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7fa72e8604f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e860870"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e860a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72e8925f0" loc="65:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72e8925f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e892970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fa72e879360" loc="75:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7fa72e879360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fa72e8796e0"/>
        <function-ref name="flush" scoped="" ref="0x7fa72e879870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fa72e82cc70" loc="322:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7fa72e82cc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e82b020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e82b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fa72e8807e0" loc="72:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa72e8807e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fa72e880b60"/>
        <function-ref name="resetSend" scoped="" ref="0x7fa72e880cf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fa72e880e80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fa72e88a030"/>
        <function-ref name="putData" scoped="" ref="0x7fa72e88a1c0"/>
        <function-ref name="putDone" scoped="" ref="0x7fa72e88a350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fa72e88a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e88a760" loc="73:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e88a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e88aae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e88ac70"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e88ae00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e884020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e8841b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e884340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e8844d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e884b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e884660"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e8847f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e884980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fa72e825a00" loc="341:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fa72e825a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e825d80"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e824020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fa72e88ba40" loc="67:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fa72e88ba40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fa72e88bdc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7fa72e890020"/>
        <function-ref name="startSend" scoped="" ref="0x7fa72e8901b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fa72e890340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fa72e886530" loc="68:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa72e886530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fa72e8868b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fa72e886a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7fa72e886bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fa72e75a020" loc="275:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7fa72e75a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e75a3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e75a530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa72e75fde0" loc="51:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa72e75fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa72ebb30d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e75e1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e75e350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e75e4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e75e670"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e75e800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fa72e75a800" loc="158:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7fa72e75a800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e75ab80"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e75ad10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa72e75f6c0" loc="50:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa72e75f6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa72ebb30d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa72e75fa60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fa72e75ec20" loc="54:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7fa72e75ec20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa72ebb30d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fa72e75d020"/>
        <function-ref name="offset" scoped="" ref="0x7fa72e75d1b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fa72e75d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e75c920" loc="57:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e75c920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e75cca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e75ce30"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e75b020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e75b1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e75b340"/>
        <function-ref name="get" scoped="" ref="0x7fa72e75b4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e75b660"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e75bca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e75b980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e75b7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e75bb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fa72e75de80" loc="56:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fa72e75de80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fa72e75c220"/>
        <function-ref name="nextByte" scoped="" ref="0x7fa72e75c3b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fa72e75c540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fa72e75c6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fa72e75d590" loc="55:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa72e75d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fa72e75d910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fa72e75daa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fa72e75dc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fa72e74ad20" loc="50:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa72e74ad20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e7520e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa72e752270"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e752400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa72e752590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa72e752720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa72e7528b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e752a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fa72e758e00" loc="48:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa72e758e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fa72e7551c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fa72e755350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fa72e7554e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fa72e755670"/>
        <function-ref name="putData" scoped="" ref="0x7fa72e755800"/>
        <function-ref name="putDone" scoped="" ref="0x7fa72e755990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fa72e755b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e752cc0" loc="51:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e752cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e7510a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e751230"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e7513c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e751550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e7516e0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e751870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e751a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e7471b0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e751b90"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e751d20"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e747020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa72e72b020" loc="40:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa72e72b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e72b3a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa72e72b530"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e72b6c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa72e72b850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa72e72d8d0" loc="39:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa72e72d8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e72dc50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa72e72dde0"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e72c020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa72e72c1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa72e72c340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa72e72c4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e72c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa72e72d0c0" loc="38:../../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa72e72d0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72e72d440"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e72d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa72e13dc70" loc="45:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e13dc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa72e13c020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72e13c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa72e13b440" loc="47:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa72e13b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e13b7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa72e13b950"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e13bae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa72e13bc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fa72e13a020" loc="49:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e13a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa72e13a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa72e13c440" loc="46:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa72e13c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e13c7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa72e13c950"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e13cae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa72e13cc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa72e13ce00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa72e13b020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e13b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72e13d020" loc="44:../../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72e13d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e13d3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e13d530"/>
        <function-ref name="request" scoped="" ref="0x7fa72e13d6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e13d850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e13d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fa72e6c18e0" loc="42:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e6c18e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa72e6c1c60"/>
        <function-ref name="configure" scoped="" ref="0x7fa72e6c1df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa72e6c3d00" loc="44:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa72e6c3d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e6c00a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa72e6c0230"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e6c03c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa72e6c0550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fa72e6bd1d0" loc="47:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e6bd1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa72e6bd550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa72e6c4670" loc="43:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa72e6c4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e6c49f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa72e6c4b80"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e6c4d10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa72e6c3020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa72e6c31b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa72e6c3340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e6c34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fa72e6c0e50" loc="46:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fa72e6c0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e6be210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e6be3a0"/>
        <function-ref name="request" scoped="" ref="0x7fa72e6be530"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e6be6c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e6be850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72e6cac90" loc="41:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72e6cac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e6c60a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e6c6230"/>
        <function-ref name="request" scoped="" ref="0x7fa72e6c63c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e6c6550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e6c66e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fa72e6b9710" loc="48:../../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa72e6b9710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e6b9a90"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e6b9c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fa72e62cdc0" loc="44:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e62cdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa72e62b180"/>
        <function-ref name="configure" scoped="" ref="0x7fa72e62b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa72e62a890" loc="46:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa72e62a890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e62ac30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa72e62adc0"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e629020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa72e6291b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fa72e6283e0" loc="49:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e6283e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa72e628780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7fa72e628a50" loc="50:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fa72e628a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72e628dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72e627020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72e6271b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72e627340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72e6274d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72e627660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72e6277f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72e627980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72e627b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72e627ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72e627e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72e626020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72e6261b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72e626440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72e6265d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72e626760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72e6268f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72e626a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72e626c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72e626da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72e625020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72e6251b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72e625340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72e6254d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72e625660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72e6259f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72e625b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72e625d10"/>
        <function-ref name="tx" scoped="" ref="0x7fa72e624020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72e6241b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72e624340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72e6244d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72e624660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72e6247f0"/>
        <function-ref name="rx" scoped="" ref="0x7fa72e624980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72e624b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72e624ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72e624e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72e623020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72e6231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa72e62b6d0" loc="45:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa72e62b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e62ba70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa72e62bc00"/>
        <function-ref name="receive" scoped="" ref="0x7fa72e62bd90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa72e62a020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa72e62a1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa72e62a340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e62a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72e622020" loc="52:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72e622020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72e622e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72e621800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72e621340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72e621cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fa72e6295b0" loc="48:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fa72e6295b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e629950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e629ae0"/>
        <function-ref name="request" scoped="" ref="0x7fa72e629c70"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e629e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e628020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72e62c020" loc="43:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72e62c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e62c3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e62c550"/>
        <function-ref name="request" scoped="" ref="0x7fa72e62c6e0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e62c870"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e62ca00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fa72e6235b0" loc="51:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa72e6235b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e623950"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e623ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e61f120" loc="53:../../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e61f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e61f4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e61f630"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e61f7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e61f950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e61fae0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e61fc70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e61fe00"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e61e4d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e61e1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e61e020"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e61e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fa72e611bd0" loc="78:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa72e611bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e610020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fa72e6126d0" loc="77:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72e6126d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e612a50"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e612be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fa72e619b60" loc="76:../../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72e619b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72e616020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72e6161b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72e616340"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72e6164d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72e616660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72e6167f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72e616980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72e616b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72e616ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72e616e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72e615020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72e6151b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72e615340"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72e6155d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72e615760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72e6158f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72e615a80"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72e615c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72e615da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72e614020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72e6141b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72e614340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72e6144d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72e614660"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72e6147f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72e614b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72e614d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72e613020"/>
        <function-ref name="tx" scoped="" ref="0x7fa72e6131b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72e613340"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72e6134d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72e613660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72e6137f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72e613980"/>
        <function-ref name="rx" scoped="" ref="0x7fa72e613b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72e613ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72e613e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72e612020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72e6121b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72e612340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fa72e5cc800" loc="82:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fa72e5cc800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e5ccb80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e5ccd10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5ca020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5ca1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5ca340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5ca4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5ca660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5ca7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e5ca980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e5cab10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e5caca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e5cae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5c9020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5c92b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5c9440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa72e608020" loc="76:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa72e608020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e6083a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e608530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7fa72e5c9800" loc="83:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7fa72e5c9800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e5c9b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e5c9d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5c8020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5c81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5c8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5c84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5c8660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5c87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e5c8980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e5c8b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e5c8ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e5c8e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5c7020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5c72b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5c7440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7fa72e5c7800" loc="84:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7fa72e5c7800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e5c7b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e5c7d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5c6020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5c61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5c6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5c64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5c6660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5c67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e5c6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e5c6b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e5c6ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e5c6e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5c5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5c52b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5c5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7fa72e60d360" loc="75:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fa72e60d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72e60d6e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72e60d870"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72e60da00"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72e60db90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72e60dd20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72e60c020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72e60c1b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72e60c340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72e60c4d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72e60c660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72e60c7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72e60c980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72e60cb10"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72e60cda0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72e60b020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72e60b1b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72e60b340"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72e60b4d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72e60b660"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72e60b7f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72e60b980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72e60bb10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72e60bca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72e60be30"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72e60a020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72e60a3b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72e60a540"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72e60a6d0"/>
        <function-ref name="tx" scoped="" ref="0x7fa72e60a860"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72e60a9f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72e60ab80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72e60ad10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72e609020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72e6091b0"/>
        <function-ref name="rx" scoped="" ref="0x7fa72e609340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72e6094d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72e609660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72e6097f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72e609980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72e609b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e5c5700" loc="86:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e5c5700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e5c5a80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e5c5c10"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e5c5da0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e5c4020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e5c41b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5c4340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e5c44d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e5c4b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e5c4660"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e5c47f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e5c4980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7fa72e5dfbc0" loc="79:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fa72e5dfbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa72e606020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa72e6061b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa72e606340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa72e6064d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa72e606660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa72e6067f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa72e606980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa72e606b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72e606ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa72e606e30"/>
        <function-ref name="getData" scoped="" ref="0x7fa72e605020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa72e6051b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa72e605340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa72e6055d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa72e605760"/>
        <function-ref name="getIV" scoped="" ref="0x7fa72e6058f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa72e605a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa72e605c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa72e605da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa72e5de020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa72e5de1b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa72e5de340"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa72e5de4d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa72e5de660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa72e5de7f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa72e5deb80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa72e5ded10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa72e5dd020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa72e5dd1b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa72e5dd340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa72e5dd4d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa72e5dd660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa72e5dd7f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa72e5dd980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa72e5ddb10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa72e5ddca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa72e5dde30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa72e5dc020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa72e5dc1b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa72e5dc340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa72e5dc4d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa72e5dc660"/>
        <function-ref name="setData" scoped="" ref="0x7fa72e5dc7f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa72e5dc980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa72e5dcb10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa72e5dcca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa72e5dce30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa72e5db020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa72e5db1b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa72e5db740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa72e5db8d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa72e5dba60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa72e5dbbf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa72e5dbd80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa72e5da020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa72e5da1b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa72e5da340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa72e5da4d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa72e5da660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7fa72e5d8800" loc="81:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7fa72e5d8800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e5d8b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e5d8d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5cd020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5cd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5cd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5cd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5cd660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5cd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e5cd980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e5cdb10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e5cdca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e5cde30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5cc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5cc2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5cc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fa72e608970" loc="77:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e608970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e608cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fa72e5ce860" loc="80:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fa72e5ce860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e5cebe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e5ced70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5d9020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5d91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5d9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5d94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5d9660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5d97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e5d9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e5d9b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e5d9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e5d9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5d8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5d82b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5d8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fa72e541810" loc="53:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fa72e541810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e541b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e541d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e540020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5401b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e540340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5404d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e540660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5407f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e540980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e540b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e540ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e540e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e53f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e53f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e53f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fa72e52c810" loc="66:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fa72e52c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e52cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e52cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e52b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e52b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e52b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e52b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e52b660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e52b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e52b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e52bb10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e52bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e52be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e52a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e52a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e52a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7fa72e4e3ca0" loc="145:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7fa72e4e3ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4e20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4e2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4e23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4e2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4e26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4e2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4e2a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4e2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4e2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4e1020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4e11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4e1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4e14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4e1760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4e18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7fa72e4becb0" loc="165:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7fa72e4becb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4bd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4bd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4bd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4bd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4bd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4bd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4bda00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4bdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4bdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4bc020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4bc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4bc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4bc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4bc760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4bc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7fa72e4e1cc0" loc="146:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7fa72e4e1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4e00a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4e0230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4e03c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4e0550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4e06e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4e0870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4e0a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4e0b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4e0d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4df020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4df1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4df340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4df4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4df760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4df8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7fa72e528810" loc="71:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7fa72e528810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e528b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e528d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e527020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5271b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e527340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e527660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5277f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e527980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e527b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e527ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e527e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e526020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5262b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e526440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7fa72e5149a0" loc="84:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7fa72e5149a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e514d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e513020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5131b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e513340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5134d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e513660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5137f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e513980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e513b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e513ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e513e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e512020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5121b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e512440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5125d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7fa72e5009a0" loc="97:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7fa72e5009a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e500d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4fe020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4fe1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4fe340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4fe4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4fe660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4fe7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4fe980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4feb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4feca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4fee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4fd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4fd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4fd440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4fd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7fa72e4ef9a0" loc="108:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fa72e4ef9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4efd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4ee020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4ee1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4ee340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4ee4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4ee660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4ee7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4ee980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4eeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4eeca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4eee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4ed020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4ed1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4ed440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4ed5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7fa72e4dbcc0" loc="149:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7fa72e4dbcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4da0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4da230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4da3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4da550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4da6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4da870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4daa00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4dab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4dad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4d9020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4d91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4d9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4d94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4d9760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4d98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7fa72e4cacb0" loc="159:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7fa72e4cacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4c90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4c9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4c93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4c9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4c96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4c9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4c9a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4c9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4c9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4c8020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4c81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4c8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4c84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4c8760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4c88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7fa72e4b6cc0" loc="171:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7fa72e4b6cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4b50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4b5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4b53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4b5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4b56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4b5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4b5a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4b5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4b5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4b4020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4b41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4b4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4b44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4b4760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4b48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fa72e53b810" loc="56:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fa72e53b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e53bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e53bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e53a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e53a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e53a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e53a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e53a660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e53a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e53a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e53ab10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e53aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e53ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e539020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5392b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e539440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7fa72e4d9cc0" loc="150:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7fa72e4d9cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4d80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4d8230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4d83c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4d8550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4d86e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4d8870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4d8a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4d8b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4d8d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4d7020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4d71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4d7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4d74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4d7760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4d78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fa72e537810" loc="61:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fa72e537810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e537b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e537d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e536020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5361b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e536340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5364d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e536660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5367f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e536980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e536b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e536ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e536e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e535020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5352b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e535440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7fa72e522810" loc="74:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7fa72e522810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e522b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e522d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e521020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5211b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e521340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5214d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e521660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5217f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e521980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e521b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e521ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e521e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e520020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5202b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e520440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7fa72e50e9a0" loc="87:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7fa72e50e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e50ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e50d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e50d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e50d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e50d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e50d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e50d7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e50d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e50db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e50dca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e50de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e50c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e50c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e50c440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e50c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7fa72e4f99a0" loc="100:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7fa72e4f99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4f9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4f8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4f81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4f8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4f84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4f8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4f87f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4f8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4f8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4f8ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4f8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4f7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4f71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4f7440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4f75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7fa72e4e99a0" loc="111:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fa72e4e99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4e9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4e8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4e81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4e8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4e84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4e8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4e87f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4e8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4e8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4e8ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4e8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4e7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4e71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4e7440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4e75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fa72e545810" loc="51:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fa72e545810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e545b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e545d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e544020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5441b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e544340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5444d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e544660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5447f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e544980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e544b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e544ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e544e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e543020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5432b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e543440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fa72e531810" loc="64:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fa72e531810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e531c90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e531e20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e530020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5301b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e530340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5304d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e530660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5307f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e530980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e530b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e530ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e530e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e52f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e52f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e52f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7fa72e51c810" loc="77:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7fa72e51c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e51cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e51cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e51b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e51b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e51b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e51b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e51b660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e51b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e51b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e51bb10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e51bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e51be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e51a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e51a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e51a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7fa72e4e5cc0" loc="144:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7fa72e4e5cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4e40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4e4230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4e43c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4e4550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4e46e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4e4870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4e4a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4e4b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4e4d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4e3020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4e31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4e3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4e34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4e3760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4e38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7fa72e4c4cb0" loc="162:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7fa72e4c4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4c30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4c3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4c33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4c3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4c36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4c3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4c3a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4c3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4c3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4c2020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4c21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4c2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4c24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4c2760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4c28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7fa72e4b8cb0" loc="169:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7fa72e4b8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4b70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4b7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4b73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4b7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4b76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4b7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4b7a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4b7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4b7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4b6020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4b61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4b6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4b64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4b6760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4b68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7fa72e4d1cc0" loc="155:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7fa72e4d1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4cf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4cf230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4cf3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4cf550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4cf6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4cf870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4cfa00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4cfb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4cfd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4ce020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4ce1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4ce340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4ce4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4ce760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4ce8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7fa72e518810" loc="82:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7fa72e518810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e518d90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e517020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5171b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e517340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5174d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e517660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5177f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e517980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e517b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e517ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e517e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e516020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5161b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e516440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5165d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7fa72e5049a0" loc="95:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7fa72e5049a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e504d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e503020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5031b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e503340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5034d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e503660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5037f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e503980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e503b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e503ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e503e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e502020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5021b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e502440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5025d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7fa72e4f39a0" loc="106:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fa72e4f39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4f3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4f2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4f21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4f2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4f24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4f2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4f27f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4f2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4f2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4f2ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4f2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4f1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4f11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4f1440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4f15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7fa72e4c2cb0" loc="163:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7fa72e4c2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4c10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4c1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4c13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4c1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4c16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4c1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4c1a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4c1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4c1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4c0020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4c01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4c0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4c04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4c0760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4c08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7fa72e4d7cb0" loc="152:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7fa72e4d7cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4d60a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4d6230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4d63c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4d6550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4d66e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4d6870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4d6a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4d6b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4d6d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4d5020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4d51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4d5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4d54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4d5760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4d58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fa72e53f810" loc="54:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fa72e53f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e53fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e53fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e53e020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e53e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e53e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e53e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e53e660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e53e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e53e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e53eb10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e53eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e53ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e53d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e53d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e53d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fa72e52a810" loc="67:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fa72e52a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e52ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e52ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e529020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5291b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e529340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5294d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e529660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5297f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e529980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e529b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e529ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e529e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e528020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5282b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e528440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7fa72e4f79a0" loc="104:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fa72e4f79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4f7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4f6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4f61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4f6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4f64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4f6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4f67f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4f6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4f6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4f6ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4f6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4f5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4f51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4f5440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4f55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7fa72e526810" loc="72:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7fa72e526810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e526b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e526d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e525020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5251b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e525340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5254d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e525660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5257f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e525980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e525b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e525ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e525e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e524020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5242b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e524440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7fa72e5129a0" loc="85:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7fa72e5129a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e512d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e511020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5111b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e511340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5114d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e511660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5117f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e511980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e511b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e511ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e511e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e510020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5101b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e510440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5105d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7fa72e4fd9a0" loc="98:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7fa72e4fd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4fdd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4fc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4fc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4fc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4fc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4fc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4fc7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4fc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4fcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4fcca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4fce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4fb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4fb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4fb440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4fb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7fa72e4ed9a0" loc="109:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fa72e4ed9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4edd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4ec020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4ec1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4ec340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4ec4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4ec660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4ec7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4ec980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4ecb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4ecca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4ece30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4eb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4eb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4eb440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4eb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7fa72e4d3cc0" loc="154:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7fa72e4d3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4d20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4d2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4d23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4d2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4d26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4d2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4d2a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4d2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4d2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4d1020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4d11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4d1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4d14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4d1760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4d18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fa72e54b800" loc="49:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fa72e54b800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e54bb80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e54bd10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e548020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5481b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e548340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5484d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e548660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5487f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e548980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e548b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e548ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e548e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e547020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5472b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e547440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fa72e535810" loc="62:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fa72e535810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e535b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e535d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e534020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5341b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e534340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5344d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e534660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5347f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e534980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e534b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e534ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e534e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e533020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5332b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e533440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7fa72e520810" loc="75:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7fa72e520810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e520b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e520d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e51f020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e51f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e51f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e51f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e51f660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e51f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e51f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e51fb10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e51fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e51fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e51e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e51e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e51e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7fa72e50c9a0" loc="88:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7fa72e50c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e50cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e50b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e50b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e50b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e50b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e50b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e50b7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e50b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e50bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e50bca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e50be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e50a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e50a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e50a440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e50a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7fa72e4cecc0" loc="156:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7fa72e4cecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4cd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4cd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4cd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4cd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4cd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4cd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4cda00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4cdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4cdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4cc020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4cc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4cc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4cc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4cc760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4cc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7fa72e4c8cb0" loc="160:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7fa72e4c8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4c70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4c7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4c73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4c7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4c76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4c7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4c7a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4c7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4c7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4c6020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4c61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4c6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4c64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4c6760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4c68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7fa72e4bccb0" loc="166:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7fa72e4bccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4bb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4bb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4bb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4bb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4bb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4bb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4bba00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4bbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4bbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4ba020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4ba1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4ba340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4ba4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4ba760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4ba8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7fa72e5089a0" loc="93:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7fa72e5089a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e508d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e507020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5071b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e507340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5074d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e507660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5077f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e507980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e507b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e507ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e507e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e506020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5061b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e506440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5065d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7fa72e4cccc0" loc="157:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7fa72e4cccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4cb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4cb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4cb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4cb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4cb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4cb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4cba00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4cbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4cbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4ca020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4ca1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4ca340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4ca4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4ca760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4ca8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fa72e543810" loc="52:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fa72e543810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e543b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e543d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e542020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5421b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e542340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5424d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e542660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5427f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e542980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e542b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e542ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e542e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e541020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5412b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e541440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fa72e52f810" loc="65:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fa72e52f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e52fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e52fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e52d020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e52d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e52d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e52d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e52d660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e52d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e52d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e52db10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e52dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e52de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e52c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e52c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e52c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7fa72e51a810" loc="78:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7fa72e51a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e51ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e51ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e519020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e519340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5194d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e519660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5197f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e519980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e519b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e519ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e519e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e518020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5182b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e518440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7fa72e4d5cc0" loc="153:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7fa72e4d5cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4d40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4d4230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4d43c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4d4550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4d46e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4d4870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4d4a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4d4b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4d4d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4d3020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4d31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4d3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4d34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4d3760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4d38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7fa72e4c0cb0" loc="164:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7fa72e4c0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4bf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4bf230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4bf3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4bf550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4bf6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4bf870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4bfa00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4bfb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4bfd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4be020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4be1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4be340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4be4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4be760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4be8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7fa72e5169a0" loc="83:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7fa72e5169a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e516d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e515020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5151b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e515340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5154d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e515660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5157f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e515980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e515b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e515ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e515e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e514020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5141b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e514440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5145d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7fa72e5029a0" loc="96:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7fa72e5029a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e502d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e501020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5011b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e501340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5014d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e501660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5017f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e501980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e501b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e501ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e501e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e500020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5001b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e500440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5005d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7fa72e4f19a0" loc="107:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fa72e4f19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4f1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4f0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4f01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4f0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4f04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4f0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4f07f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4f0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4f0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4f0ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4f0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4ef020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4ef1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4ef440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4ef5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fa72e53d810" loc="55:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fa72e53d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e53db90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e53dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e53c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e53c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e53c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e53c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e53c660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e53c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e53c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e53cb10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e53cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e53ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e53b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e53b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e53b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7fa72e4f59a0" loc="105:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fa72e4f59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4f5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4f4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4f41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4f4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4f44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4f4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4f47f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4f4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4f4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4f4ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4f4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4f3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4f31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4f3440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4f35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fa72e539810" loc="60:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fa72e539810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e539b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e539d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e538020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5381b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e538340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5384d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e538660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5387f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e538980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e538b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e538ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e538e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e537020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5372b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e537440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7fa72e524810" loc="73:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7fa72e524810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e524b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e524d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e523020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5231b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e523340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5234d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e523660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5237f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e523980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e523b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e523ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e523e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e522020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5222b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e522440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7fa72e5109a0" loc="86:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7fa72e5109a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e510d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e50f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e50f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e50f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e50f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e50f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e50f7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e50f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e50fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e50fca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e50fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e50e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e50e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e50e440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e50e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7fa72e4fb9a0" loc="99:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7fa72e4fb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4fbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4fa020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4fa1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4fa340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4fa4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4fa660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4fa7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4fa980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4fab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4faca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4fae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4f9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4f91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4f9440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4f95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7fa72e4eb9a0" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fa72e4eb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4ebd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4ea020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4ea1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4ea340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4ea4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4ea660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4ea7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4ea980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4eab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4eaca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4eae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4e9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4e91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4e9440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4e95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fa72e547810" loc="50:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fa72e547810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e547b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e547d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e546020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5461b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e546340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5464d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e546660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5467f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e546980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e546b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e546ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e546e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e545020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5452b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e545440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fa72e533810" loc="63:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fa72e533810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e533b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e533d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e532020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e5321b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e532340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e5324d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e532660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e5327f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e532980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e532b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e532ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e532e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e531020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e5312b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e531440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7fa72e51e810" loc="76:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7fa72e51e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e51eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e51ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e51d020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e51d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e51d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e51d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e51d660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e51d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e51d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e51db10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e51dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e51de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e51c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e51c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e51c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7fa72e50a9a0" loc="89:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7fa72e50a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e50ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e509020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5091b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e509340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5094d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e509660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5097f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e509980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e509b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e509ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e509e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e508020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5081b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e508440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5085d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7fa72e4ddca0" loc="148:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7fa72e4ddca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4dc0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4dc230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4dc3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4dc550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4dc6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4dc870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4dca00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4dcb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4dcd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4db020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4db1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4db340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4db4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4db760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4db8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7fa72e4c6cb0" loc="161:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7fa72e4c6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4c50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4c5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4c53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4c5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4c56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4c5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4c5a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4c5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4c5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4c4020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4c41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4c4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4c44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4c4760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4c48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7fa72e4dfcc0" loc="147:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7fa72e4dfcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4de0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4de230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4de3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4de550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4de6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4de870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4dea00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4deb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4ded20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4dd020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4dd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4dd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4dd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4dd760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4dd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7fa72e5069a0" loc="94:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7fa72e5069a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e506d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e505020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e5051b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e505340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e5054d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e505660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e5057f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e505980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e505b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e505ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e505e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e504020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e5041b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e504440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e5045d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7fa72e4bacb0" loc="168:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7fa72e4bacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4b90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4b9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4b93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4b9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4b96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4b9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4b9a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4b9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4b9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4b8020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4b81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4b8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4b84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4b8760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4b88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7fa72e4b4cc0" loc="172:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7fa72e4b4cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4b30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4b3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4b33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4b3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4b36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4b3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4b3a00"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4b3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4b3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4b2020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4b21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4b2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4b24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4b2760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4b28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7fa72e4e79f0" loc="143:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7fa72e4e79f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4e61c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4e6350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4e64e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4e6670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4e6800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4e6990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4e6b20"/>
        <function-ref name="get" scoped="" ref="0x7fa72e4e6cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4e6e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4e5020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4e51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4e5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4e54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4e5760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4e58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e4afd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e4afd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4880e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e488270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e488400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e488590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e488720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4888b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e488a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e488bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e488d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e487020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4871b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e487340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4874d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e487760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4878f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e484740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e484740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e484ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e484c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e484de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e483020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4831b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e483340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4834d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e483660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4837f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e483980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e483b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e483ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e483e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e482120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4822b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e47e100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e47e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e47e480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e47e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e47e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e47e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e47eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e47ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e47ede0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e47d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e47d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e47d340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e47d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e47d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e47d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e47da80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e47dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e47ad10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e47ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4790e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e479270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e479400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e479590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e479720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4798b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e479a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e479bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e479d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e478020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4781b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e478340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4784d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e478760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4788f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e475740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e475740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e475ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e475c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e475de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e474020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4741b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e474340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4744d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e474660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4747f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e474980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e474b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e474ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e474e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e473120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4732b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e470100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e470100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e470480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e470610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4707a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e470930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e470ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e470c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e470de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e46f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e46f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e46f340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e46f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e46f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e46f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e46fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e46fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e46cd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e46cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e46b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e46b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e46b400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e46b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e46b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e46b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e46ba40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e46bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e46bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e46a020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e46a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e46a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e46a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e46a760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e46a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e467740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e467740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e467ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e467c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e467de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e466020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4661b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e466340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4664d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e466660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4667f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e466980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e466b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e466ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e466e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e465120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4652b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e462100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e462100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e462480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e462610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4627a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e462930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e462ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e462c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e462de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e461020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4611b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e461340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4614d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e461660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4617f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e461a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e461c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e45ed10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e45ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e45c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e45c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e45c400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e45c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e45c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e45c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e45ca40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e45cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e45cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e45b020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e45b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e45b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e45b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e45b760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e45b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e458740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e458740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e458ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e458c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e458de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e457020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4571b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e457340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4574d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e457660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4577f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e457980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e457b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e457ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e457e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e456120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4562b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e453100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e453100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e453480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e453610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4537a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e453930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e453ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e453c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e453de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e452020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4521b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e452340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4524d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e452660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4527f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e452a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e452c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e44fd80" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e44fd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e44e180"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e44e310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e44e4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e44e630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e44e7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e44e950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e44eae0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e44ec70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e44ee00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e44d020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e44d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e44d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e44d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e44d760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e44d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e44a740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e44a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e44aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e44ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e44ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e449020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4491b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e449340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4494d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e449660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4497f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e449980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e449b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e449ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e449e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e448120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4482b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e445100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e445100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e445480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e445610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4457a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e445930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e445ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e445c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e445de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e444020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4441b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e444340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4444d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e444660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4447f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e444a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e444c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e441d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e441d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4400e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e440270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e440400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e440590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e440720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4408b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e440a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e440bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e440d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e43f020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e43f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e43f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e43f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e43f760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e43f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e43c740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e43c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e43cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e43cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e43cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e43b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e43b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e43b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e43b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e43b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e43b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e43b980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e43bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e43bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e43be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e43a120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e43a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e437100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e437100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e437480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e437610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4377a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e437930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e437ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e437c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e437de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e435020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4351b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e435340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4354d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e435660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4357f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e435a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e435c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e432d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e432d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4310e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e431270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e431400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e431590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e431720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4318b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e431a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e431bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e431d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e430020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4301b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e430340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4304d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e430760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4308f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e42d740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e42d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e42dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e42dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e42dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e42c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e42c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e42c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e42c4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e42c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e42c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e42c980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e42cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e42cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e42ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e42b120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e42b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e428100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e428100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e428480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e428610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4287a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e428930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e428ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e428c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e428de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e427020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4271b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e427340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4274d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e427660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4277f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e427a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e427c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e424d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e424d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4230e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e423270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e423400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e423590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e423720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4238b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e423a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e423bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e423d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e422020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4221b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e422340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4224d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e422760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4228f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e41f740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e41f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e41fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e41fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e41fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e41e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e41e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e41e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e41e4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e41e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e41e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e41e980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e41eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e41eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e41ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e41d120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e41d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e41a100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e41a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e41a480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e41a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e41a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e41a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e41aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e41ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e41ade0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e419020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4191b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e419340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4194d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e419660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4197f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e419a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e419c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e416e60" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e416e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e415210"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e4153a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e415530"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e4156c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e415850"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e4159e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e415b70"/>
        <function-ref name="get" scoped="" ref="0x7fa72e415d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e414020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e4141b0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e414340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e4144d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e414660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e4148f0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e414a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e4109f0" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e4109f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e410d70"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e40f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e40f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e40f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e40f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e40f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e40f7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e40f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e40fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e40fca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e40fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e40e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e40e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e40e440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e40e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e40b460" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e40b460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e40b7e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e40b970"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e40bb00"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e40bc90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e40be20"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e40a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e40a1b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e40a340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e40a4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e40a660"/>
        <function-ref name="set" scoped="" ref="0x7fa72e40a7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e40a980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e40ab10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e40ada0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e409020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e407e00" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e407e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e4061c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e406350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e4064e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e406670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e406800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e406990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e406b20"/>
        <function-ref name="get" scoped="" ref="0x7fa72e406cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e406e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e405020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e4051b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e405340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e4054d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e405760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4058f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e402740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e402740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e402ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e402c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e402de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e401020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e4011b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e401340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e4014d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e401660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e4017f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e401980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e401b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e401ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e401e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e400120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e4002b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3fd100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3fd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3fd480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3fd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3fd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3fd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3fdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3fdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3fdde0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3fc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3fc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3fc340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3fc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3fc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3fc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3fca80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3fcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3f9d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3f9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3f80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3f8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3f8400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3f8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3f8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3f88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3f8a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3f8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3f8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3f7020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3f71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3f7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3f74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3f7760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3f78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3f4740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3f4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3f4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3f4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3f4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3f3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3f31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3f3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3f34d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3f3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3f37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3f3980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3f3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3f3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3f3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3f2120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3f22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3ef100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3ef100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3ef480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3ef610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3ef7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3ef930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3efac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3efc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3efde0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3ed020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3ed1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3ed340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3ed4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3ed660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3ed7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3eda80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3edc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3ead10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3ead10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3e90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3e9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3e9400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3e9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3e9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3e98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3e9a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3e9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3e9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3e8020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3e81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3e8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3e84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3e8760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3e88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3e5740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3e5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3e5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3e5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3e5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3e4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3e41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3e4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3e44d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3e4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3e47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3e4980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3e4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3e4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3e4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3e3120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3e32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3e0100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3e0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3e0480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3e0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3e07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3e0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3e0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3e0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3e0de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3df020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3df1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3df340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3df4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3df660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3df7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3dfa80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3dfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3dcd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3dcd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3db0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3db270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3db400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3db590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3db720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3db8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3dba40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3dbbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3dbd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3da020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3da1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3da340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3da4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3da760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3da8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3d7740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3d7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3d7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3d7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3d7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3d6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3d61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3d6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3d64d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3d6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3d67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3d6980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3d6b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3d6ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3d6e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3d5120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3d52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3d2100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3d2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3d2480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3d2610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3d27a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3d2930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3d2ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3d2c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3d2de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3d1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3d11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3d1340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3d14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3d1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3d17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3d1a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3d1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3ced10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3ced10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3cd0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3cd270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3cd400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3cd590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3cd720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3cd8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3cda40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3cdbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3cdd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3cc020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3cc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3cc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3cc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3cc760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3cc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3c9740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3c9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3c9ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3c9c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3c9de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3c7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3c71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3c7340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3c74d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3c7660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3c77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3c7980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3c7b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3c7ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3c7e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3c6120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3c62b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3c3100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3c3100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3c3480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3c3610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3c37a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3c3930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3c3ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3c3c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3c3de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3c2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3c21b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3c2340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3c24d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3c2660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3c27f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3c2a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3c2c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3bfd10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3bfd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3be0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3be270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3be400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3be590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3be720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3be8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3bea40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3bebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3bed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3bd020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3bd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3bd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3bd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3bd760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3bd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3ba740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3ba740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3baac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3bac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3bade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3b9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3b91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3b9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3b94d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3b9660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3b97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3b9980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3b9b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3b9ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3b9e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3b8120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3b82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3b5100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3b5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3b5480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3b5610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3b57a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3b5930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3b5ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3b5c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3b5de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3b4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3b41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3b4340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3b44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3b4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3b47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3b4a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3b4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3b1d10" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3b1d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3b00e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3b0270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3b0400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3b0590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3b0720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3b08b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3b0a40"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3b0bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3b0d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3af020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3af1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3af340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3af4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3af760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3af8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3ac740" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3ac740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3acac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3acc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3acde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3ab020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3ab1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3ab340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3ab4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3ab660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3ab7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3ab980"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3abb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3abca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3abe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3aa120"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3aa2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa72e3a7100" loc="47:../../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa72e3a7100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3a7480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e3a7610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e3a77a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e3a7930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e3a7ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e3a7c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e3a7de0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3a6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e3a61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e3a6340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3a64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e3a6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e3a67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e3a6a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e3a6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72e336d20" loc="43:../../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72e336d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72e333b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72e332550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72e332090"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72e332a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7fa72e331d90" loc="43:../../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa72e331d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72e32ebc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72e32c590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72e32c0d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72e32ca50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fa72e31a020" loc="45:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72e31a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72e31a3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72e31a530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72e31a6c0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e31a850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72e31a9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72e31ab70"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72e31ad00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72e319020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72e3191b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72e319340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72e3194d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72e32ae50" loc="44:../../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72e32ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72e329ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72e31c670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72e31c1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72e31cb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fa72e316020" loc="47:../../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e316020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e3163a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e316530"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e3166c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e316850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e3169e0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e316b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e316d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e3154d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e315020"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e3151b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e315340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fa72e30f060" loc="51:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fa72e30f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e30f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e30f570"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e30f700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e30f890"/>
        <function-ref name="get" scoped="" ref="0x7fa72e30fa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e30fbb0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e30fd40"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e30e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72e312470" loc="47:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72e312470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e3127f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fa72e30e340" loc="52:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fa72e30e340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e30e6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e30e850"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e30e9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e30eb70"/>
        <function-ref name="get" scoped="" ref="0x7fa72e30ed00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e309020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3091b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e309340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fa72e312a70" loc="48:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e312a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e312df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e311020"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e3111b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e311340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e3114d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e311660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e3117f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e311e30"/>
        <function-ref name="set" scoped="" ref="0x7fa72e311980"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e311b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e311ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fa72e309660" loc="53:../../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fa72e309660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e3099e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e309b70"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e309d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e308020"/>
        <function-ref name="get" scoped="" ref="0x7fa72e3081b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e308340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e3084d0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e308660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fa72e313b10" loc="42:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fa72e313b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2ec020"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2ec1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2ec340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2ec4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2ec660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2ec7f0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2ec980"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2ecb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fa72e2ece70" loc="43:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fa72e2ece70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2eb220"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2eb3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2eb540"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2eb6d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2eb860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2eb9f0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2ebb80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2ebd10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fa72e2e92e0" loc="45:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72e2e92e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e2e9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fa72e2ea0f0" loc="44:../../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fa72e2ea0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2ea470"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2ea600"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2ea790"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2ea920"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2eaab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2eac40"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2eadd0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2e9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa72e2d52f0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72e2d52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2d5670"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2d5800"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e2d5990"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2d5b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2d5cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e2d5e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2d4020"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2d41b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e2d4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e2d44d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2d4660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e2d47f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e2d4980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e2d4c10"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2d4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72e2e6020" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72e2e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2e63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2e6530"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2e66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2e6850"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2e69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2e6b70"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2e6d00"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2d5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa72e2d1de0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72e2d1de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2d0180"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2d0310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e2d04a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2d0630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2d07c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e2d0950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2d0ae0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2d0c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e2d0e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e2cf020"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2cf1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e2cf340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e2cf4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e2cf760"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2cf8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72e2d2b90" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72e2d2b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2d1020"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2d11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2d1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2d14d0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2d1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2d17f0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2d1980"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2d1b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa72e2cb930" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72e2cb930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2cbcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2cbe40"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e2ca020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2ca1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2ca340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e2ca4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2ca660"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2ca7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e2ca980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e2cab10"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2caca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e2cae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e2c9020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e2c92b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2c9440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72e2cd710" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72e2cd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e2cda90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e2cdc20"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e2cddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e2cb020"/>
        <function-ref name="get" scoped="" ref="0x7fa72e2cb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e2cb340"/>
        <function-ref name="set" scoped="" ref="0x7fa72e2cb4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e2cb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa72cf1ca90" loc="42:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72cf1ca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa72cf1ce10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72cf1b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fa72cf16be0" loc="46:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa72cf16be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72cf15020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa72cf0e020" loc="51:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72cf0e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa72cf0e3a0"/>
        <function-ref name="configure" scoped="" ref="0x7fa72cf0e530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fa72cf152b0" loc="48:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72cf152b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa72cf15630"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa72cf157c0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa72cf15950"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa72cf15ae0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa72cf15c70"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa72cf15e00"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa72cf14020"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa72cf141b0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72cf14340"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa72cf144d0"/>
        <function-ref name="getData" scoped="" ref="0x7fa72cf14660"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa72cf147f0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa72cf14980"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa72cf14c10"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa72cf14da0"/>
        <function-ref name="getIV" scoped="" ref="0x7fa72cf13020"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa72cf131b0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa72cf13340"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa72cf134d0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa72cf13660"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa72cf137f0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa72cf13980"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa72cf13b10"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa72cf13ca0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa72cf13e30"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa72cf12220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa72cf123b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa72cf12540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa72cf126d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa72cf12860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa72cf129f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa72cf12b80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa72cf12d10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa72cf11020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa72cf111b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa72cf11340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa72cf114d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa72cf11660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa72cf117f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa72cf11980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa72cf11b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa72cf11ca0"/>
        <function-ref name="setData" scoped="" ref="0x7fa72cf11e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa72cf10020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa72cf101b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa72cf10340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa72cf104d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa72cf10660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa72cf107f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa72cf10d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa72cf0f020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa72cf0f1b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa72cf0f340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa72cf0f4d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa72cf0f660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa72cf0f7f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa72cf0f980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa72cf0fb10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa72cf0fca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fa72cf16440" loc="45:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72cf16440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72cf167c0"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72cf16950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72cf1de00" loc="41:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72cf1de00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72cf1c1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72cf1c350"/>
        <function-ref name="request" scoped="" ref="0x7fa72cf1c4e0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72cf1c670"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72cf1c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fa72cf1ba50" loc="44:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72cf1ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72cf1bdd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72cf1a020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72cf1a1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72cf1a340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72cf1a4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72cf1a660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72cf1a7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72cf1a980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72cf1ab10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72cf1aca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72cf1ae30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72cf19020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72cf191b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72cf19440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72cf195d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72cf19760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72cf198f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72cf19a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72cf19c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72cf19da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72cf18020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72cf181b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72cf18340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72cf184d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72cf18660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72cf189f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72cf18b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72cf18d10"/>
        <function-ref name="tx" scoped="" ref="0x7fa72cf17020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72cf171b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72cf17340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72cf174d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72cf17660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72cf177f0"/>
        <function-ref name="rx" scoped="" ref="0x7fa72cf17980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72cf17b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72cf17ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72cf17e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72cf16020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72cf161b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa72cf1b2b0" loc="43:../../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72cf1b2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa72cf1b630"/>
        <function-ref name="userId" scoped="" ref="0x7fa72cf1b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa72e29c2c0" loc="42:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e29c2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa72e29c640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72e29c7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa72e29b8a0" loc="45:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e29b8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa72e29bc20"/>
        <function-ref name="configure" scoped="" ref="0x7fa72e29bdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa72e2a04d0" loc="39:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa72e2a04d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e2a0850"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e2a09e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72e29d020" loc="41:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72e29d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e29d3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e29d530"/>
        <function-ref name="request" scoped="" ref="0x7fa72e29d6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e29d850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e29d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fa72e29f3f0" loc="40:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e29f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e29f770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa72e29cad0" loc="43:../../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e29cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa72e29ce50"/>
        <function-ref name="userId" scoped="" ref="0x7fa72e29b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fa72e286bf0" loc="43:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e286bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa72e285020"/>
        <function-ref name="userId" scoped="" ref="0x7fa72e2851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa72e299d60" loc="39:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa72e299d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e298180"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e298310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7fa72e2865e0" loc="42:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fa72e2865e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e286960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fa72e298710" loc="40:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72e298710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72e298ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7fa72e298d80" loc="41:../../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7fa72e298d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72e286180"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72e286310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa72e20b020" loc="92:../../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72e20b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa72e20b3c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72e20b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa72e20acd0" loc="96:../../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72e20acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa72e2090a0"/>
        <function-ref name="configure" scoped="" ref="0x7fa72e209230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fa72e20b7a0" loc="93:../../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa72e20b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e20bb20"/>
        <function-ref name="requested" scoped="" ref="0x7fa72e20bcb0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e20be40"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e20a020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72e20a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72e20c210" loc="91:../../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72e20c210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e20c5b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e20c740"/>
        <function-ref name="request" scoped="" ref="0x7fa72e20c8d0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e20ca60"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e20cbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa72e20a400" loc="94:../../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72e20a400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa72e20a780"/>
        <function-ref name="userId" scoped="" ref="0x7fa72e20a910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72cb46e50" loc="44:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72cb46e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72cb45210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fa72cb454a0" loc="45:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7fa72cb454a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fa72cb45820"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fa72cb459b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fa72cb45b40"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa72cb45cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa72cb42530" loc="55:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa72cb42530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa72cb428d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72cb42a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa72cb3f270" loc="60:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa72cb3f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa72cb3f610"/>
        <function-ref name="configure" scoped="" ref="0x7fa72cb3f7a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fa72cb3fa30" loc="61:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fa72cb3fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fa72cb3fdb0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fa72cb3e020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fa72cb3e1b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa72cb3e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fa72cb42cb0" loc="56:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa72cb42cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72cb410a0"/>
        <function-ref name="requested" scoped="" ref="0x7fa72cb41230"/>
        <function-ref name="granted" scoped="" ref="0x7fa72cb413c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72cb41550"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa72cb416e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72cb3e590" loc="62:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72cb3e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72cb3e910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72cb3eaa0"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72cb3ec30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72cb3edc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72cb3d020"/>
        <function-ref name="get" scoped="" ref="0x7fa72cb3d1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72cb3d340"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72cb3d980"/>
        <function-ref name="set" scoped="" ref="0x7fa72cb3d660"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72cb3d4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72cb3d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa72cb43740" loc="54:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72cb43740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72cb43ae0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72cb43c70"/>
        <function-ref name="request" scoped="" ref="0x7fa72cb43e00"/>
        <function-ref name="granted" scoped="" ref="0x7fa72cb42020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72cb421b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa72cb41930" loc="57:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa72cb41930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa72cb41cb0"/>
        <function-ref name="userId" scoped="" ref="0x7fa72cb41e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fa72cb3dc50" loc="75:../../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fa72cb3dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72cb3c020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72cb3c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fa72e202d70" loc="4:../../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa72e202d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa72e1ff180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa72e1ff310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa72e1ff4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa72e1ff630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa72e1ff7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa72e1ff950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa72e1ffae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa72e1ffc70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72e1ffe00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa72e1fe020"/>
        <function-ref name="getData" scoped="" ref="0x7fa72e1fe1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa72e1fe340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa72e1fe4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa72e1fe760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa72e1fe8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7fa72e1fea80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa72e1fec10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa72e1feda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa72e1fd020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa72e1fd1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa72e1fd340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa72e1fd4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa72e1fd660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa72e1fd7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa72e1fd980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa72e1fdd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa72e1fc020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa72e1fc1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa72e1fc340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa72e1fc4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa72e1fc660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa72e1fc7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa72e1fc980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa72e1fcb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa72e1fcca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa72e1fce30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa72e1fb020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa72e1fb1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa72e1fb340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa72e1fb4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa72e1fb660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa72e1fb7f0"/>
        <function-ref name="setData" scoped="" ref="0x7fa72e1fb980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa72e1fbb10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa72e1fbca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa72e1fbe30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa72e1fa020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa72e1fa1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa72e1fa340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa72e1fa8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa72e1faa60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa72e1fabf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa72e1fad80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa72e1f9020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa72e1f91b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa72e1f9340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa72e1f94d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa72e1f9660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa72e1f97f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7fa72e1ef700" loc="41:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7fa72e1ef700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72e1efa80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72e1efc10"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72e1efda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72e1ee020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72e1ee1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72e1ee340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72e1ee4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72e1ee660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72e1ee7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72e1ee980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72e1eeb10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72e1eeca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72e1eee30"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72e1ed120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72e1ed2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72e1ed440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72e1ed5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72e1ed760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72e1ed8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72e1eda80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72e1edc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72e1edda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72e1ec020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72e1ec1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72e1ec340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72e1ec6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72e1ec860"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72e1ec9f0"/>
        <function-ref name="tx" scoped="" ref="0x7fa72e1ecb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72e1ecd10"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72e1eb020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72e1eb1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72e1eb340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72e1eb4d0"/>
        <function-ref name="rx" scoped="" ref="0x7fa72e1eb660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72e1eb7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72e1eb980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72e1ebb10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72e1ebca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72e1ebe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fa72e1e81f0" loc="43:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fa72e1e81f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e1e8570"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e1e8700"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e1e8890"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e1e8a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e1e8bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e1e8d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e1e7020"/>
        <function-ref name="get" scoped="" ref="0x7fa72e1e71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e1e7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e1e74d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e1e7660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e1e77f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e1e7980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e1e7c10"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e1e7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7fa72e1f8950" loc="39:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fa72e1f8950"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa72e1f8cd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa72e1f8e60"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa72e1f5020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa72e1f51b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa72e1f5340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa72e1f54d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa72e1f5660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa72e1f57f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72e1f5980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa72e1f5b10"/>
        <function-ref name="getData" scoped="" ref="0x7fa72e1f5ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa72e1f5e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa72e1f4020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa72e1f42b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa72e1f4440"/>
        <function-ref name="getIV" scoped="" ref="0x7fa72e1f45d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa72e1f4760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa72e1f48f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa72e1f4a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa72e1f4c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa72e1f4da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa72e1f3020"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa72e1f31b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa72e1f3340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa72e1f34d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa72e1f3860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa72e1f39f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa72e1f3b80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa72e1f3d10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa72e1f2020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa72e1f21b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa72e1f2340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa72e1f24d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa72e1f2660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa72e1f27f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa72e1f2980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa72e1f2b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa72e1f2ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa72e1f2e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa72e1f1020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa72e1f11b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa72e1f1340"/>
        <function-ref name="setData" scoped="" ref="0x7fa72e1f14d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa72e1f1660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa72e1f17f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa72e1f1980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa72e1f1b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa72e1f1ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa72e1f1e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa72e1f0420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa72e1f05b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa72e1f0740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa72e1f08d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa72e1f0a60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa72e1f0bf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa72e1f0d80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa72e1ef020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa72e1ef1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa72e1ef340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fa72e1ea250" loc="42:../../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fa72e1ea250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72e1ea5d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72e1ea760"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72e1ea8f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72e1eaa80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72e1eac10"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72e1eada0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72e1e9020"/>
        <function-ref name="get" scoped="" ref="0x7fa72e1e91b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72e1e9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72e1e94d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e1e9660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72e1e97f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72e1e9980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72e1e9c10"/>
        <function-ref name="clr" scoped="" ref="0x7fa72e1e9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7fa72e136920" loc="37:../../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa72e136920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa72e136ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fa72e135020" loc="38:../../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa72e135020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa72e1353a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa72e135530"/>
        <function-ref name="request" scoped="" ref="0x7fa72e1356c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa72e135850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa72e1359e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa72e1360c0" loc="36:../../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa72e1360c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72e136440"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e1365d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fa72e123a30" loc="47:../../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7fa72e123a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fa72e123db0"/>
        <function-ref name="offset" scoped="" ref="0x7fa72e120020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fa72e1201b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fa72e105bf0" loc="43:../../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fa72e105bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fa72e0e0ae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fa72e0df880"/>
        <function-ref name="element" scoped="" ref="0x7fa72e0dd020"/>
        <function-ref name="full" scoped="" ref="0x7fa72e0e1ce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fa72e0e0660"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa72e0df1d0"/>
        <function-ref name="empty" scoped="" ref="0x7fa72e0e1860"/>
        <function-ref name="size" scoped="" ref="0x7fa72e0e01e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fa72e0d6a20" loc="93:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fa72e0d6a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fa72e0d7920"/>
        <function-ref name="enqueue" scoped="" ref="0x7fa72e0d46d0"/>
        <function-ref name="element" scoped="" ref="0x7fa72e0d4d40"/>
        <function-ref name="full" scoped="" ref="0x7fa72e0d8af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fa72e0d74a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa72e0d4020"/>
        <function-ref name="empty" scoped="" ref="0x7fa72e0d8670"/>
        <function-ref name="size" scoped="" ref="0x7fa72e0d7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fa72e0d3440" loc="94:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa72e0d3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa72e0d37c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e0d3950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e0d3ae0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa72e0d3c70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa72e0d3e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fa72e0d20c0" loc="95:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa72e0d20c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72e0d2440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa72e0d25d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa72e0d2760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa72e0d28f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa72e0d2a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7fa72e0cc500" loc="114:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7fa72e0cc500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72e0cc880"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72e0cca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72e0dca60" loc="89:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72e0dca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e0dcde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e0d2d00" loc="96:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e0d2d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e0d10a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e0d1230"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e0d13c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e0d1550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e0d16e0"/>
        <function-ref name="get" scoped="" ref="0x7fa72e0d1870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e0d1a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e0d01b0"/>
        <function-ref name="set" scoped="" ref="0x7fa72e0d1b90"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e0d1d20"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e0d0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7fa72e0d61a0" loc="90:../../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fa72e0d61a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fa72e0d6520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fa72e0b6be0" loc="43:../../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fa72e0b6be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fa72e0b3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72e0af020" loc="94:../../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72e0af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e0af3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fa72e0af680" loc="95:../../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fa72e0af680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fa72e0afa00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fa72e0a9380" loc="39:../../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa72e0a9380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa72e0a9700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fa72e0a9aa0" loc="40:../../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fa72e0a9aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa72e0a9e20"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa72e0a6020"/>
        <function-ref name="start" scoped="" ref="0x7fa72e0a61b0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e0a6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="shimmerAnalogSetup" ref="0x7fa72e046410" loc="77:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72e046410"/></type-interface>
      <instance>
        <interfacedef-ref qname="shimmerAnalogSetup"/>
      </instance>
      <interface-functions>
        <function-ref name="addAccelInputs" scoped="" ref="0x7fa72e046790"/>
        <function-ref name="triggerConversion" scoped="" ref="0x7fa72e046920"/>
        <function-ref name="getNumberOfChannels" scoped="" ref="0x7fa72e046ab0"/>
        <function-ref name="addECGInputs" scoped="" ref="0x7fa72e046c40"/>
        <function-ref name="addAnExInput" scoped="" ref="0x7fa72e046dd0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72e050020"/>
        <function-ref name="addEMGInput" scoped="" ref="0x7fa72e0501b0"/>
        <function-ref name="addStrainGaugeInputs" scoped="" ref="0x7fa72e050340"/>
        <function-ref name="addGSRInput" scoped="" ref="0x7fa72e0504d0"/>
        <function-ref name="finishADCSetup" scoped="" ref="0x7fa72e050660"/>
        <function-ref name="addUVInputs" scoped="" ref="0x7fa72e0507f0"/>
        <function-ref name="addGyroInputs" scoped="" ref="0x7fa72e050980"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fa72e050b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SampleTimerInit" ref="0x7fa72e075160" loc="67:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SampleTimerInit" scoped="" ref="0x7fa72e075160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e0754e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BlinkTimer" ref="0x7fa72e038340" loc="79:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BlinkTimer" scoped="" ref="0x7fa72e038340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72e02fba0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72e037b80"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72e02f550"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72e02f090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72e02e090"/>
        <function-ref name="start" scoped="" ref="0x7fa72e0371b0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e0376c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GyroBoard" ref="0x7fa72e06f5f0" loc="69:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GyroBoard" scoped="" ref="0x7fa72e06f5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GyroBoard"/>
      </instance>
      <interface-functions>
        <function-ref name="autoZero" scoped="" ref="0x7fa72e06f970"/>
        <function-ref name="buttonPressed" scoped="" ref="0x7fa72e06fb00"/>
        <function-ref name="ledOn" scoped="" ref="0x7fa72e06fc90"/>
        <function-ref name="ledOff" scoped="" ref="0x7fa72e06fe20"/>
        <function-ref name="ledToggle" scoped="" ref="0x7fa72e073020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BtCommandParser" ref="0x7fa72dfe98d0" loc="85:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72dfe98d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BtCommandParser"/>
      </instance>
      <interface-functions>
        <function-ref name="handleByte" scoped="" ref="0x7fa72dfe9c50"/>
        <function-ref name="activate" scoped="" ref="0x7fa72dfe9de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UserButton" ref="0x7fa72dfe31c0" loc="88:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UserButton" scoped="" ref="0x7fa72dfe31c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e07ee30"/>
            <typename><typedef-ref name="button_state_t" ref="0x7fa72e07d770"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72dfde260"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dfe3db0"/>
        <function-ref name="notify" scoped="" ref="0x7fa72dfde6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendResponse" ref="0x7fa72df4a1f0" loc="352:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendResponse" scoped="" ref="0x7fa72df4a1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df4a570"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df4a700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Magnetometer" ref="0x7fa72e064630" loc="70:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Magnetometer" scoped="" ref="0x7fa72e064630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Magnetometer"/>
      </instance>
      <interface-functions>
        <function-ref name="disableBus" scoped="" ref="0x7fa72e06e020"/>
        <function-ref name="setIdle" scoped="" ref="0x7fa72e064b40"/>
        <function-ref name="enableBus" scoped="" ref="0x7fa72e064cd0"/>
        <function-ref name="convertRegistersToData" scoped="" ref="0x7fa72e064e60"/>
        <function-ref name="readHeading" scoped="" ref="0x7fa72e072020"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72e0721b0"/>
        <function-ref name="goToSleep" scoped="" ref="0x7fa72e072340"/>
        <function-ref name="selfTest" scoped="" ref="0x7fa72e0724d0"/>
        <function-ref name="runSingleConversion" scoped="" ref="0x7fa72e072660"/>
        <function-ref name="readData" scoped="" ref="0x7fa72e0727f0"/>
        <function-ref name="runContinuousConversion" scoped="" ref="0x7fa72e072980"/>
        <function-ref name="setOutputRate" scoped="" ref="0x7fa72e072b10"/>
        <function-ref name="setGain" scoped="" ref="0x7fa72e072ca0"/>
        <function-ref name="readDone" scoped="" ref="0x7fa72e0649b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startConfigTimer" ref="0x7fa72df15670" loc="479:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startConfigTimer" scoped="" ref="0x7fa72df15670"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df159f0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df15b80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fa72e0799f0" loc="59:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa72e0799f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa72e079d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InternalFlash" ref="0x7fa72dfe4940" loc="86:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InternalFlash" scoped="" ref="0x7fa72dfe4940"/></type-interface>
      <instance>
        <interfacedef-ref qname="InternalFlash"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fa72dfe4cc0"/>
        <function-ref name="write" scoped="" ref="0x7fa72dfe4e50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ProcessCommand" ref="0x7fa72df12400" loc="484:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ProcessCommand" scoped="" ref="0x7fa72df12400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df12780"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df12910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DigitalHeartRate" ref="0x7fa72e05d690" loc="72:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72e05d690"/></type-interface>
      <instance>
        <interfacedef-ref qname="DigitalHeartRate"/>
      </instance>
      <interface-functions>
        <function-ref name="beat" scoped="" ref="0x7fa72e05da10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7fa72e0281a0" loc="81:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa72e0281a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72e028dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="gsr_range" ref="0x7fa72debc020" loc="756:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="gsr_range" scoped="" ref="0x7fa72debc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72debc3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72debc530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ToggleLed" ref="0x7fa72df7c1f0" loc="182:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ToggleLed" scoped="" ref="0x7fa72df7c1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df7c570"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df7c700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DigitalHeartInit" ref="0x7fa72e076390" loc="65:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DigitalHeartInit" scoped="" ref="0x7fa72e076390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e076710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin0" ref="0x7fa72df9e3a0" loc="90:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin0" scoped="" ref="0x7fa72df9e3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72df9e720"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72df9e8b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72df9ea40"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72df9ebd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72df9ed60"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72df9d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72df9d1b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72df9d340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72df9d4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72df9d660"/>
        <function-ref name="set" scoped="" ref="0x7fa72df9d7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72df9d980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72df9db10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72df9dda0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72df9c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DockInterrupt" ref="0x7fa72dfdfa70" loc="87:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DockInterrupt" scoped="" ref="0x7fa72dfdfa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dfdfdf0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dfe8020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dfe81b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dfe8340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dfe84d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dfe8660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SampleTimer" ref="0x7fa72e02e850" loc="80:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SampleTimer" scoped="" ref="0x7fa72e02e850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72e02a090"/>
        <function-ref name="fired" scoped="" ref="0x7fa72e02b090"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72e02ba10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72e02b550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72e02a550"/>
        <function-ref name="start" scoped="" ref="0x7fa72e02c6a0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e02cbb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GsrInit" ref="0x7fa72e076a20" loc="66:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GsrInit" scoped="" ref="0x7fa72e076a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e076da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StrainInit" ref="0x7fa72e077ba0" loc="64:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StrainInit" scoped="" ref="0x7fa72e077ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e076020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BlinkTimerInit" ref="0x7fa72e075830" loc="68:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BlinkTimerInit" scoped="" ref="0x7fa72e075830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e075bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DMA0" ref="0x7fa72dfed970" loc="84:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA0" scoped="" ref="0x7fa72dfed970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72dfedcf0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72dfede80"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72e00e030"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72e00e1c0"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72e00e350"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72e00e4e0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72e00e670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastClock" ref="0x7fa72df97e30" loc="97:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastClock" scoped="" ref="0x7fa72df97e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastClock"/>
      </instance>
      <interface-functions>
        <function-ref name="setSMCLK" scoped="" ref="0x7fa72df991e0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72df99370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="clockin_result" ref="0x7fa72dec0500" loc="746:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="clockin_result" scoped="" ref="0x7fa72dec0500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72dec0880"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72dec0a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BluetoothInit" ref="0x7fa72e0780f0" loc="60:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BluetoothInit" scoped="" ref="0x7fa72e0780f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e078470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Gsr" ref="0x7fa72e0513d0" loc="75:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gsr" scoped="" ref="0x7fa72e0513d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Gsr"/>
      </instance>
      <interface-functions>
        <function-ref name="controlRange" scoped="" ref="0x7fa72e051750"/>
        <function-ref name="smoothSample" scoped="" ref="0x7fa72e0518e0"/>
        <function-ref name="initSmoothing" scoped="" ref="0x7fa72e051a70"/>
        <function-ref name="calcResistance" scoped="" ref="0x7fa72e051c00"/>
        <function-ref name="setRange" scoped="" ref="0x7fa72e051d90"/>
        <function-ref name="smoothTransition" scoped="" ref="0x7fa72e05c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopSensing" ref="0x7fa72df600c0" loc="269:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopSensing" scoped="" ref="0x7fa72df600c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df60440"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df605d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GyroStdControl" ref="0x7fa72e05dda0" loc="73:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GyroStdControl" scoped="" ref="0x7fa72e05dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72e062180"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e062310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StrainGauge" ref="0x7fa72e05f990" loc="71:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StrainGauge" scoped="" ref="0x7fa72e05f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StrainGauge"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x7fa72e05fe10"/>
        <function-ref name="powerOff" scoped="" ref="0x7fa72e063020"/>
        <function-ref name="ledOn" scoped="" ref="0x7fa72e0631b0"/>
        <function-ref name="ledOff" scoped="" ref="0x7fa72e063340"/>
        <function-ref name="ledToggle" scoped="" ref="0x7fa72e0634d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72e05c2a0" loc="76:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72e05c2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72e05c620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72e05c7b0"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72e05c940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72e05cad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72e05cc60"/>
        <function-ref name="get" scoped="" ref="0x7fa72e05cdf0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72e059020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72e059660"/>
        <function-ref name="set" scoped="" ref="0x7fa72e0591b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72e059340"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72e0594d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SetupTimer" ref="0x7fa72e03ca10" loc="78:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SetupTimer" scoped="" ref="0x7fa72e03ca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72e039020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72e03b510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72e03a300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72e03be10"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72e039920"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72e0394a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72e03b990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72e045670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72e03a910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72e045b40"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e03b090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastClockInit" ref="0x7fa72df9a390" loc="96:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastClockInit" scoped="" ref="0x7fa72df9a390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72df9a710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfigureChannelsTask" ref="0x7fa72df63510" loc="264:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfigureChannelsTask" scoped="" ref="0x7fa72df63510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df63890"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df63a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendSensorData" ref="0x7fa72df510c0" loc="332:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendSensorData" scoped="" ref="0x7fa72df510c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df51440"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df515d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin1" ref="0x7fa72df9c3a0" loc="91:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin1" scoped="" ref="0x7fa72df9c3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72df9c720"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72df9c8b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72df9ca40"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72df9cbd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72df9cd60"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72df9b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72df9b1b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72df9b340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72df9b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72df9b660"/>
        <function-ref name="set" scoped="" ref="0x7fa72df9b7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72df9b980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72df9bb10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72df9bda0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72df9a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startSensors" ref="0x7fa72df77a20" loc="199:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startSensors" scoped="" ref="0x7fa72df77a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72df77da0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72df76020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GyroInit" ref="0x7fa72e078e30" loc="62:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GyroInit" scoped="" ref="0x7fa72e078e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e0771e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="collect_results" ref="0x7fa72decb440" loc="709:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="collect_results" scoped="" ref="0x7fa72decb440"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72decb7c0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72decb950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelInit" ref="0x7fa72e078790" loc="61:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AccelInit" scoped="" ref="0x7fa72e078790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e078b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Bluetooth" ref="0x7fa72e010380" loc="83:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Bluetooth" scoped="" ref="0x7fa72e010380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Bluetooth"/>
      </instance>
      <interface-functions>
        <function-ref name="setDeviceClass" scoped="" ref="0x7fa72e024e30"/>
        <function-ref name="setBaudrate" scoped="" ref="0x7fa72e010a90"/>
        <function-ref name="setDiscoverable" scoped="" ref="0x7fa72e010c20"/>
        <function-ref name="dataAvailable" scoped="" ref="0x7fa72e025020"/>
        <function-ref name="disconnect" scoped="" ref="0x7fa72e00f020"/>
        <function-ref name="connectionClosed" scoped="" ref="0x7fa72e0251b0"/>
        <function-ref name="setName" scoped="" ref="0x7fa72e025340"/>
        <function-ref name="setServiceName" scoped="" ref="0x7fa72e0254d0"/>
        <function-ref name="setRawBaudrate" scoped="" ref="0x7fa72e025660"/>
        <function-ref name="setPagingTime" scoped="" ref="0x7fa72e0257f0"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72e025980"/>
        <function-ref name="setInquiryTime" scoped="" ref="0x7fa72e025b10"/>
        <function-ref name="connect" scoped="" ref="0x7fa72e025ca0"/>
        <function-ref name="connectionMade" scoped="" ref="0x7fa72e024020"/>
        <function-ref name="setAuthentication" scoped="" ref="0x7fa72e0241b0"/>
        <function-ref name="resetDefaults" scoped="" ref="0x7fa72e010900"/>
        <function-ref name="commandModeEnded" scoped="" ref="0x7fa72e010db0"/>
        <function-ref name="setServiceClass" scoped="" ref="0x7fa72e024340"/>
        <function-ref name="write" scoped="" ref="0x7fa72e0244d0"/>
        <function-ref name="discoverDevices" scoped="" ref="0x7fa72e024660"/>
        <function-ref name="setRadioMode" scoped="" ref="0x7fa72e0247f0"/>
        <function-ref name="setPIN" scoped="" ref="0x7fa72e024980"/>
        <function-ref name="setEncryption" scoped="" ref="0x7fa72e024b10"/>
        <function-ref name="disableRemoteConfig" scoped="" ref="0x7fa72e024ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BTStdControl" ref="0x7fa72e027340" loc="82:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BTStdControl" scoped="" ref="0x7fa72e027340"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72e0276c0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72e027850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CRYPTO" ref="0x7fa72dfda020" loc="89:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7fa72dfda020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7fa72dfda3a0"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7fa72dfda530"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7fa72dfda6c0"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7fa72dfda850"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7fa72dfda9e0"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7fa72dfdab70"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7fa72dfdad00"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7fa72dfd9020"/>
        <function-ref name="lsb" scoped="" ref="0x7fa72dfd91b0"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7fa72dfd9340"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7fa72dfd94d0"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7fa72dfd9660"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7fa72dfd97f0"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7fa72dfd9a80"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7fa72dfd9c10"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7fa72dfd9da0"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7fa72dfa0020"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7fa72dfa01b0"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7fa72dfa0340"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7fa72dfa04d0"/>
        <function-ref name="msb" scoped="" ref="0x7fa72dfa0660"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7fa72dfa07f0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7fa72dfa0980"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7fa72dfa0b10"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7fa72dfa0ca0"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7fa72df9f220"/>
        <function-ref name="safer_done" scoped="" ref="0x7fa72df9f3b0"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7fa72df9f540"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7fa72df9f6d0"/>
        <function-ref name="rc2_done" scoped="" ref="0x7fa72df9f860"/>
        <function-ref name="rc5_done" scoped="" ref="0x7fa72df9f9f0"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7fa72df9fb80"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7fa72df9fd10"/>
        <function-ref name="safer_setup" scoped="" ref="0x7fa72df9e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Accel" ref="0x7fa72e05e020" loc="74:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Accel" scoped="" ref="0x7fa72e05e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Mma_Accel"/>
      </instance>
      <interface-functions>
        <function-ref name="setSensitivity" scoped="" ref="0x7fa72e05e3a0"/>
        <function-ref name="wake" scoped="" ref="0x7fa72e05e530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MagInit" ref="0x7fa72e0774f0" loc="63:BtStreamC.nc">
      <component-ref qname="BtStreamC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MagInit" scoped="" ref="0x7fa72e0774f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72e077870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72dd40020" loc="44:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <component-ref qname="BtStreamAppC.SampleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72dd40020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dd3e870"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dd3f840"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72dd3e220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dd3fd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72dd3ed30"/>
        <function-ref name="start" scoped="" ref="0x7fa72dd40e30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dd3f380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72dd42760" loc="43:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <component-ref qname="BtStreamAppC.SampleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72dd42760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72dd42ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72caf7b90" loc="44:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72caf7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72caf44e0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72caf54e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72caf5e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72caf59a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72caf49a0"/>
        <function-ref name="start" scoped="" ref="0x7fa72caf69d0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72caf5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72caf7340" loc="43:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72caf7340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72caf76c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fa72cade440" loc="41:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72cade440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72cade7c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72cade950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72cadeae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72cadec70"/>
        <function-ref name="fired" scoped="" ref="0x7fa72cadee00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fa72cae19d0" loc="39:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72cae19d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72cae1d50"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72cae0020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72cae01b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72cae0340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72cae04d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72cae0660"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72cae07f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72cae0980"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72cae0b10"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72cae0ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72cae0e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fa72cadf120" loc="40:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72cadf120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72cadf4a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72cadf630"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72cadf7c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72cadf950"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72cadfae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72cadfc70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72cadfe00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72cade020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72cade1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fa72ddf5210" loc="52:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ddf5210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ddf5590"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ddf5720"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ddf58b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ddf5a40"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ddf5bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fa72ddfdbf0" loc="50:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ddfdbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ddf9020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ddf91b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ddf9340"/>
        <function-ref name="get" scoped="" ref="0x7fa72ddf94d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ddf9660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ddf97f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ddf9980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ddf9b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ddf9ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ddf9e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ddf8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fa72ddf88b0" loc="51:../../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ddf88b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ddf8c30"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ddf8dc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ddf7020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ddf71b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ddf7340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ddf74d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ddf7660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ddf77f0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ddf7980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fa72cad40c0" loc="49:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72cad40c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72cad4440"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72cad45d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72cad4760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72cad48f0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72cad4a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fa72cad7710" loc="47:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72cad7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72cad7a90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72cad7c20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72cad7db0"/>
        <function-ref name="get" scoped="" ref="0x7fa72cad6020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72cad61b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72cad6340"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72cad64d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72cad6660"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72cad67f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72cad6980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72cad6b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72cada5b0" loc="46:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72cada5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72cad8df0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72cad9df0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72cad87a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72cad82e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72cad72e0"/>
        <function-ref name="start" scoped="" ref="0x7fa72cad9420"/>
        <function-ref name="stop" scoped="" ref="0x7fa72cad9930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72cadcca0" loc="45:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72cadcca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72cada0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fa72cad6da0" loc="48:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72cad6da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72cad5180"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72cad5310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72cad54a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72cad5630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72cad57c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72cad5950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72cad5ae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72cad5c70"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72cad5e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72dda2020" loc="43:../../../../tos/chips/msp430/timer/CounterMilli16C.nc">
      <component-ref qname="CounterMilli16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dda2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dda2e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dda1800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dda1340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dda1cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fa72dd80950" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli16C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fa72dd80950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dd7f780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dd7d150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dd7fc40"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dd7d610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72dd9d5f0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli16C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dd9d5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dd81430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dd81db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dd818f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dd802a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72caf0020" loc="61:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72caf0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72caee870"/>
        <function-ref name="fired" scoped="" ref="0x7fa72caef840"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72caee220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72caefd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72caeed30"/>
        <function-ref name="start" scoped="" ref="0x7fa72caf0e30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72caef380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fa72caea780" loc="73:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fa72caea780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72cae7020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72cae8020"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72cae89a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72cae84e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72cae74e0"/>
        <function-ref name="start" scoped="" ref="0x7fa72cae95d0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72cae9ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72caed3d0" loc="68:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="BtStreamAppC.SampleTimer.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72caed3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72caec240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72caecbc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72caec700"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72caea0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72dd3a640" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="BtStreamAppC.SetupTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72dd3a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dc54c40"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dc561e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72dc54020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72dc56ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72dc53590"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72dc53110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dc56660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72dc57390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72dc54630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72dc57860"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dc57d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fa72dd311d0" loc="49:../../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd311d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dd2d630"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dd2fc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72dd2e9d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72dd2e550"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72dd2c020"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72dd2dab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dd2e0d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72dd31dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72dd2d020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72dd2f2e0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dd2f7b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fa72dd28c30" loc="46:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fa72dd28c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dd23110"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dd266a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72dd244a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72dd24020"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72dd23a10"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72dd23590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dd26b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72dd27860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72dd24ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72dd27d30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dd26220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fa72dd21080" loc="47:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa72dd21080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dd21cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72dd2ce50" loc="45:../../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72dd2ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72dd28210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72dcf3020" loc="44:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72dcf3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dcf1870"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dcf2840"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72dcf1220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dcf2d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72dcf1d30"/>
        <function-ref name="start" scoped="" ref="0x7fa72dcf3e30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dcf2380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72dcf4760" loc="43:../../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72dcf4760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72dcf4ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72ca87140" loc="44:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72ca87140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72ca85b30"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ca869f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72ca854e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72ca85020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72ca83020"/>
        <function-ref name="start" scoped="" ref="0x7fa72ca86020"/>
        <function-ref name="stop" scoped="" ref="0x7fa72ca86530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72ca88860" loc="43:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72ca88860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72ca88be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fa72ca6fa80" loc="41:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ca6fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ca6fe00"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ca6e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ca6e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ca6e340"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ca6e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fa72ca71020" loc="39:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ca71020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ca713a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ca71530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ca716c0"/>
        <function-ref name="get" scoped="" ref="0x7fa72ca71850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ca719e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ca71b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ca71d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ca70020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ca701b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ca70340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ca704d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fa72ca70760" loc="40:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ca70760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ca70ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ca70c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ca70e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ca6f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ca6f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ca6f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ca6f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ca6f660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ca6f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fa72ca65760" loc="49:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72ca65760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72ca65ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72ca65c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72ca65e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72ca64020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ca641b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fa72ca68dd0" loc="47:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72ca68dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72ca67180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72ca67310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ca674a0"/>
        <function-ref name="get" scoped="" ref="0x7fa72ca67630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ca677c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ca67950"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72ca67ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ca67c70"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ca67e00"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72ca66020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72ca661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72ca6cbf0" loc="46:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72ca6cbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72ca684e0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ca694e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72ca69e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72ca699a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72ca689a0"/>
        <function-ref name="start" scoped="" ref="0x7fa72ca6aa80"/>
        <function-ref name="stop" scoped="" ref="0x7fa72ca69020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72ca6c360" loc="45:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72ca6c360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72ca6c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fa72ca66440" loc="48:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72ca66440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72ca667c0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72ca66950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72ca66ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72ca66c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72ca66e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72ca65020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72ca651b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72ca65340"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72ca654d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72dd10650" loc="43:../../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dd10650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dd0f5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dd0e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dd0fa70"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dd0e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fa72dd086d0" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fa72dd086d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dd065b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dd05020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dd06a70"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dd054e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72dd0a2e0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dd0a2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dd09110"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dd09a90"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dd095d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dd08020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72ca815f0" loc="61:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72ca815f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72ca7fe50"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ca80e00"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72ca7f800"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72ca7f340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72ca7e340"/>
        <function-ref name="start" scoped="" ref="0x7fa72ca80430"/>
        <function-ref name="stop" scoped="" ref="0x7fa72ca80940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fa72ca7bd20" loc="73:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fa72ca7bd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72ca78670"/>
        <function-ref name="fired" scoped="" ref="0x7fa72ca79550"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72ca78020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72ca79a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72ca78b30"/>
        <function-ref name="start" scoped="" ref="0x7fa72ca7ab60"/>
        <function-ref name="stop" scoped="" ref="0x7fa72ca79090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72ca7e9b0" loc="68:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72ca7e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72ca7d7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72ca7b1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72ca7dca0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72ca7b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fa72dcbe490" loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7fa72dcbe490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72dcbe810"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72dcbe9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fa72dcc21d0" loc="49:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72dcc21d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dcbfb30"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dcc09f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72dcbf4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dcbf020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72dcbe020"/>
        <function-ref name="start" scoped="" ref="0x7fa72dcc0020"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dcc0530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72dcc8cf0" loc="48:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72dcc8cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dcc3220"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dcc57c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72dcc4590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72dcc4110"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72dcc3b20"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72dcc36a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dcc5c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72dcc7940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72dcc4ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72dcc7e10"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dcc5340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fa72dc6ee80" loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7fa72dc6ee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72dc6c220"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72dc6c3b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fa72dc73c30" loc="49:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fa72dc73c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dc6e110"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dc706a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72dc6f4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72dc6f020"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72dc6ea10"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72dc6e590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dc70b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72dc71860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72dc6fab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72dc71d30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dc70220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72dc79690" loc="48:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72dc79690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dc74cf0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dc76260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72dc74090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72dc76ba0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72dc73680"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72dc731e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dc76700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72dc78390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72dc746c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72dc78880"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dc78d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fa72dc6acf0" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa72dc6acf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc60980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72dc5f020" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dc5f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc5fe30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dc5e800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dc5e340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dc5ecc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72dc51b90" loc="44:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72dc51b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72dc4d4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dc4f4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72dc4fe60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72dc4f9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72dc4d9a0"/>
        <function-ref name="start" scoped="" ref="0x7fa72dc509d0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dc4f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72dc51340" loc="43:../../../../tos/chips/msp430/timer/AlarmMilli16C.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72dc51340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72dc516c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72c9f8bd0" loc="44:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72c9f8bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72c9f44e0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72c9f64e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72c9f6e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72c9f69a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72c9f49a0"/>
        <function-ref name="start" scoped="" ref="0x7fa72c9f7a80"/>
        <function-ref name="stop" scoped="" ref="0x7fa72c9f6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72c9f8380" loc="43:../../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72c9f8380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72c9f8700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fa72c9de0c0" loc="41:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72c9de0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72c9de440"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72c9de5d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72c9de760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72c9de8f0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72c9dea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fa72c9e17b0" loc="39:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72c9e17b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72c9e1b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72c9e1cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72c9e1e50"/>
        <function-ref name="get" scoped="" ref="0x7fa72c9e0020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72c9e01b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72c9e0340"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72c9e04d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72c9e0660"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72c9e07f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72c9e0980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72c9e0b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fa72c9e0da0" loc="40:../../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72c9e0da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72c9df180"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72c9df310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72c9df4a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72c9df630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72c9df7c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72c9df950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72c9dfae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72c9dfc70"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72c9dfe00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fa72c9d5da0" loc="49:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa72c9d5da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa72c9d4180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa72c9d4310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa72c9d44a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa72c9d4630"/>
        <function-ref name="fired" scoped="" ref="0x7fa72c9d47c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fa72c9d84c0" loc="47:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa72c9d84c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72c9d8840"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72c9d89d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72c9d8b60"/>
        <function-ref name="get" scoped="" ref="0x7fa72c9d8cf0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72c9d8e80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72c9d6030"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72c9d61c0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72c9d6350"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72c9d64e0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa72c9d6670"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa72c9d6800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72c9db340" loc="46:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72c9db340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72c9d9ba0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72c9dab80"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72c9d9550"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72c9d9090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72c9d8090"/>
        <function-ref name="start" scoped="" ref="0x7fa72c9da1b0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72c9da6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72c9dca30" loc="45:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72c9dca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72c9dcdb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fa72c9d6a90" loc="48:../../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa72c9d6a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa72c9d6e10"/>
        <function-ref name="getControl" scoped="" ref="0x7fa72c9d5020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa72c9d51b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa72c9d5340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa72c9d54d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa72c9d5660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa72c9d57f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa72c9d5980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa72c9d5b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa72c9f1020" loc="61:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa72c9f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72c9ef870"/>
        <function-ref name="fired" scoped="" ref="0x7fa72c9f0840"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72c9ef220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72c9f0d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72c9efd30"/>
        <function-ref name="start" scoped="" ref="0x7fa72c9f1e30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72c9f0380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fa72c9eb780" loc="73:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fa72c9eb780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72c9e7020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72c9e9020"/>
        <function-ref name="startAt" scoped="" ref="0x7fa72c9e99a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72c9e94e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa72c9e74e0"/>
        <function-ref name="start" scoped="" ref="0x7fa72c9ea5d0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72c9eaae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72c9ed3d0" loc="68:../../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="BtStreamAppC.BlinkTimer.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72c9ed3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72c9ec240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72c9ecbc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72c9ec700"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72c9eb0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72dc4b9a0" loc="43:../../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dc4b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc487e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dc471b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dc48ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dc47670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fa72dc40950" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fa72dc40950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc3f780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dc3e150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dc3fc40"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dc3e610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa72dc435f0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dc435f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc42430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dc42db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dc428f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dc402a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fa72dc3cb60" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="BtStreamAppC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa72dc3cb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc3b7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72dc3be40" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="BtStreamAppC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72dc3be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72dc3aca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72dc39670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72dc391b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72dc39b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72dc31d90" loc="49:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <component-ref qname="RovingNetworksC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72dc31d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72dc30180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Bluetooth" ref="0x7fa72dc33020" loc="48:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <component-ref qname="RovingNetworksC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Bluetooth" scoped="" ref="0x7fa72dc33020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Bluetooth"/>
      </instance>
      <interface-functions>
        <function-ref name="setDeviceClass" scoped="" ref="0x7fa72dc31980"/>
        <function-ref name="setBaudrate" scoped="" ref="0x7fa72dc33530"/>
        <function-ref name="setDiscoverable" scoped="" ref="0x7fa72dc336c0"/>
        <function-ref name="dataAvailable" scoped="" ref="0x7fa72dc339e0"/>
        <function-ref name="disconnect" scoped="" ref="0x7fa72dc31b10"/>
        <function-ref name="connectionClosed" scoped="" ref="0x7fa72dc33b70"/>
        <function-ref name="setName" scoped="" ref="0x7fa72dc33d00"/>
        <function-ref name="setServiceName" scoped="" ref="0x7fa72dc32020"/>
        <function-ref name="setRawBaudrate" scoped="" ref="0x7fa72dc321b0"/>
        <function-ref name="setPagingTime" scoped="" ref="0x7fa72dc32340"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72dc324d0"/>
        <function-ref name="setInquiryTime" scoped="" ref="0x7fa72dc32660"/>
        <function-ref name="connect" scoped="" ref="0x7fa72dc327f0"/>
        <function-ref name="connectionMade" scoped="" ref="0x7fa72dc32a80"/>
        <function-ref name="setAuthentication" scoped="" ref="0x7fa72dc32c10"/>
        <function-ref name="resetDefaults" scoped="" ref="0x7fa72dc333a0"/>
        <function-ref name="commandModeEnded" scoped="" ref="0x7fa72dc33850"/>
        <function-ref name="setServiceClass" scoped="" ref="0x7fa72dc32da0"/>
        <function-ref name="write" scoped="" ref="0x7fa72dc31020"/>
        <function-ref name="discoverDevices" scoped="" ref="0x7fa72dc311b0"/>
        <function-ref name="setRadioMode" scoped="" ref="0x7fa72dc31340"/>
        <function-ref name="setPIN" scoped="" ref="0x7fa72dc314d0"/>
        <function-ref name="setEncryption" scoped="" ref="0x7fa72dc31660"/>
        <function-ref name="disableRemoteConfig" scoped="" ref="0x7fa72dc317f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa72dc366f0" loc="47:../../../../tos/platforms/shimmer2/chips/bluetooth/RovingNetworksC.nc">
      <component-ref qname="RovingNetworksC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa72dc366f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72dc36a70"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dc36c00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="runSetCommands" ref="0x7fa72db39d60" loc="376:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="runSetCommands" scoped="" ref="0x7fa72db39d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72db38180"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72db38310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="runMasterCommands" ref="0x7fa72db4b1e0" loc="302:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="runMasterCommands" scoped="" ref="0x7fa72db4b1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72db4b560"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72db4b6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConnectionInterrupt" ref="0x7fa72db9ec80" loc="57:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConnectionInterrupt" scoped="" ref="0x7fa72db9ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72db9d0a0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72db9d230"/>
        <function-ref name="disable" scoped="" ref="0x7fa72db9d3c0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72db9d550"/>
        <function-ref name="enable" scoped="" ref="0x7fa72db9d6e0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72db9d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72dba9c00" loc="49:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72dba9c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72dba8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTControl" ref="0x7fa72dba48e0" loc="54:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UARTControl" scoped="" ref="0x7fa72dba48e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72dba4c60"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72dba4df0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72dba3020"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72dba31b0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72dba3340"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72dba34d0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72dba3660"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72dba37f0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72dba3980"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72dba3b10"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72dba3ca0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72dba3e30"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72dba2020"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72dba22b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72dba2440"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72dba25d0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72dba2760"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72dba28f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72dba2a80"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72dba2c10"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72dba2da0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72dba1020"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72dba11b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72dba1340"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72dba14d0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72dba1860"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72dba19f0"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72dba1b80"/>
        <function-ref name="tx" scoped="" ref="0x7fa72dba1d10"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72dba0020"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72dba01b0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72dba0340"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72dba04d0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72dba0660"/>
        <function-ref name="rx" scoped="" ref="0x7fa72dba07f0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72dba0980"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72dba0b10"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72dba0ca0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72dba0e30"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72db9f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTData" ref="0x7fa72db9f410" loc="55:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UARTData" scoped="" ref="0x7fa72db9f410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72db9f790"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72db9f920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RTSInterrupt" ref="0x7fa72db9fcf0" loc="56:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RTSInterrupt" scoped="" ref="0x7fa72db9fcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72db9e0a0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72db9e230"/>
        <function-ref name="disable" scoped="" ref="0x7fa72db9e3c0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72db9e550"/>
        <function-ref name="enable" scoped="" ref="0x7fa72db9e6e0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72db9e870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72db9daf0" loc="59:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72db9daf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72db9de70"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72db9c030"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72db9c1c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72db9c350"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72db9c4e0"/>
        <function-ref name="get" scoped="" ref="0x7fa72db9c670"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72db9c800"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72db9ce40"/>
        <function-ref name="set" scoped="" ref="0x7fa72db9c990"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72db9cb20"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72db9ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Bluetooth" ref="0x7fa72dba8aa0" loc="51:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Bluetooth" scoped="" ref="0x7fa72dba8aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Bluetooth"/>
      </instance>
      <interface-functions>
        <function-ref name="setDeviceClass" scoped="" ref="0x7fa72dba4340"/>
        <function-ref name="setBaudrate" scoped="" ref="0x7fa72dba6020"/>
        <function-ref name="setDiscoverable" scoped="" ref="0x7fa72dba61b0"/>
        <function-ref name="dataAvailable" scoped="" ref="0x7fa72dba64d0"/>
        <function-ref name="disconnect" scoped="" ref="0x7fa72dba44d0"/>
        <function-ref name="connectionClosed" scoped="" ref="0x7fa72dba6660"/>
        <function-ref name="setName" scoped="" ref="0x7fa72dba67f0"/>
        <function-ref name="setServiceName" scoped="" ref="0x7fa72dba6980"/>
        <function-ref name="setRawBaudrate" scoped="" ref="0x7fa72dba6b10"/>
        <function-ref name="setPagingTime" scoped="" ref="0x7fa72dba6ca0"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72dba6e30"/>
        <function-ref name="setInquiryTime" scoped="" ref="0x7fa72dba5020"/>
        <function-ref name="connect" scoped="" ref="0x7fa72dba51b0"/>
        <function-ref name="connectionMade" scoped="" ref="0x7fa72dba5440"/>
        <function-ref name="setAuthentication" scoped="" ref="0x7fa72dba55d0"/>
        <function-ref name="resetDefaults" scoped="" ref="0x7fa72dba8e20"/>
        <function-ref name="commandModeEnded" scoped="" ref="0x7fa72dba6340"/>
        <function-ref name="setServiceClass" scoped="" ref="0x7fa72dba5760"/>
        <function-ref name="write" scoped="" ref="0x7fa72dba58f0"/>
        <function-ref name="discoverDevices" scoped="" ref="0x7fa72dba5a80"/>
        <function-ref name="setRadioMode" scoped="" ref="0x7fa72dba5c10"/>
        <function-ref name="setPIN" scoped="" ref="0x7fa72dba5da0"/>
        <function-ref name="setEncryption" scoped="" ref="0x7fa72dba4020"/>
        <function-ref name="disableRemoteConfig" scoped="" ref="0x7fa72dba41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa72dba82e0" loc="50:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa72dba82e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72dba8660"/>
        <function-ref name="stop" scoped="" ref="0x7fa72dba87f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendNextChar" ref="0x7fa72db8c500" loc="88:../../../../tos/platforms/shimmer/chips/bluetooth/RovingNetworksP.nc">
      <component-ref qname="RovingNetworksP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendNextChar" scoped="" ref="0x7fa72db8c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72db8c880"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72db8ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fa72dae3bc0" loc="46:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fa72dae3bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae2020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae21b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae2340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae24d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae2660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fa72dad8bc0" loc="58:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fa72dad8bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad7020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad71b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad7340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad74d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad7660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fa72dae0bc0" loc="49:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fa72dae0bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dadf020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dadf1b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dadf340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dadf4d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dadf660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dadf7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fa72dadebc0" loc="53:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fa72dadebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dadc020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dadc1b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dadc340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dadc4d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dadc660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dadc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fa72dae5c40" loc="44:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fa72dae5c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae4020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae41b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae4340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae44d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae4660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fa72dadabc0" loc="56:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fa72dadabc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad90a0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad9230"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad93c0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad9550"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad96e0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad9870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fa72dae2bc0" loc="47:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fa72dae2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae1020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae11b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae1340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae14d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae1660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fa72dad7bc0" loc="59:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fa72dad7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad6020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad61b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad6340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad64d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad6660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fa72dae9d20" loc="42:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fa72dae9d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae60e0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae6270"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae6400"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae6590"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae6720"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae68b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fa72dadcbc0" loc="54:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fa72dadcbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dadb020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dadb1b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dadb340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dadb4d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dadb660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dadb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fa72dae4bc0" loc="45:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fa72dae4bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae3020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae31b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae3340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae34d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae3660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fa72dad9c40" loc="57:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fa72dad9c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad8020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad81b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad8340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad84d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad8660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fa72dae1bc0" loc="48:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fa72dae1bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae0020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae01b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae0340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae04d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae0660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fa72dadfbc0" loc="52:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fa72dadfbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dade020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dade1b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dade340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dade4d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dade660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dade7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fa72dae6c80" loc="43:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fa72dae6c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dae50a0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dae5230"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dae53c0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dae5550"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dae56e0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dae5870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fa72dadbbc0" loc="55:../../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fa72dadbbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dada020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dada1b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dada340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dada4d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dada660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dada7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fa72dacfa30" loc="43:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fa72dacfa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dacfdb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dace020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dace1b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dace340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dace4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dace660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fa72dac5bc0" loc="55:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fa72dac5bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dac4020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac41b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac4340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac44d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac4660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fa72dacca30" loc="46:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fa72dacca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72daccdb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dacb020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dacb1b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dacb340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dacb4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dacb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fa72dacaa30" loc="50:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fa72dacaa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dacadb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac9020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac91b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac9340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac94d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fa72dad1a30" loc="41:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fa72dad1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad1db0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad0020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad01b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad0340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad04d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fa72dac7a30" loc="53:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fa72dac7a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dac6020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac61b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac6340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac64d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac6660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fa72dacea30" loc="44:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fa72dacea30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dacedb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dacd020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dacd1b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dacd340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dacd4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dacd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fa72dac4bc0" loc="56:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fa72dac4bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dac2020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac21b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac2340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac24d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac2660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fa72dad59c0" loc="39:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fa72dad59c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad5d40"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad2020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad21b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad2340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad24d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fa72dac9a30" loc="51:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fa72dac9a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dac9db0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac8020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac81b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac8340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac84d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fa72dad0a30" loc="42:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fa72dad0a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad0db0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dacf020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dacf1b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dacf340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dacf4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dacf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fa72dac6bc0" loc="54:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fa72dac6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dac5020"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac51b0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac5340"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac54d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac5660"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fa72dacda30" loc="45:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fa72dacda30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dacddb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dacc020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dacc1b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dacc340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dacc4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dacc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fa72dacba30" loc="49:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fa72dacba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dacbdb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72daca020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72daca1b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72daca340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72daca4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72daca660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fa72dad2a30" loc="40:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fa72dad2a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dad2db0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dad1020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dad11b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dad1340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dad14d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dad1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fa72dac8a30" loc="52:../../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fa72dac8a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72dac8db0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72dac7020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72dac71b0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72dac7340"/>
        <function-ref name="enable" scoped="" ref="0x7fa72dac74d0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72dac7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fa72d9e9860" loc="78:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa72d9e9860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72d9e9be0"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72d9e9d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fa72d9ec450" loc="76:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fa72d9ec450"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72d9ec7d0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d9ec960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fa72d9ecc80" loc="77:../../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa72d9ecc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72d9ef0a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72d9ef230"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72d9ef3c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72d9ef550"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72d9ef6e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72d9ef870"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72d9efa00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72d9efb90"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72d9efd20"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72d9ee020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72d9ee1b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72d9ee340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72d9ee4d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72d9ee760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72d9ee8f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72d9eea80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72d9eec10"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72d9eeda0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72d9eb020"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72d9eb1b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72d9eb340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72d9eb4d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72d9eb660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72d9eb7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72d9eb980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72d9ebd10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72d9ea020"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72d9ea1b0"/>
        <function-ref name="tx" scoped="" ref="0x7fa72d9ea340"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72d9ea4d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72d9ea660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72d9ea7f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72d9ea980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72d9eab10"/>
        <function-ref name="rx" scoped="" ref="0x7fa72d9eaca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72d9eae30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72d9e9020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72d9e91b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72d9e9340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72d9e94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fa72d9db990" loc="80:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fa72d9db990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d9dbd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d9da020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d9da1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d9da340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d9da4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d9da660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d9da7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d9da980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d9dab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d9daca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d9dae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d9d9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d9d91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d9d9440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d9d95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa72d9e0130" loc="76:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa72d9e0130"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72d9e04b0"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72d9e0640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7fa72d9d9990" loc="81:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7fa72d9d9990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d9d9d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d9d8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d9d81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d9d8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d9d84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d9d8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d9d87f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d9d8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d9d8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d9d8ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d9d8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d9d7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d9d71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d9d7440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d9d75d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7fa72d9d7990" loc="82:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7fa72d9d7990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d9d7d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d9d6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d9d61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d9d6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d9d64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d9d6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d9d67f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d9d6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d9d6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d9d6ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d9d6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d9d5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d9d51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d9d5440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d9d55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7fa72d9e5550" loc="75:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fa72d9e5550"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72d9e58d0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72d9e5a60"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72d9e5bf0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72d9e5d80"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72d9e4020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72d9e41b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72d9e4340"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72d9e44d0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72d9e4660"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72d9e47f0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72d9e4980"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72d9e4b10"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72d9e4ca0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72d9e3020"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72d9e31b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72d9e3340"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72d9e34d0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72d9e3660"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72d9e37f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72d9e3980"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72d9e3b10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72d9e3ca0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72d9e3e30"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72d9e2020"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72d9e21b0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72d9e2540"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72d9e26d0"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72d9e2860"/>
        <function-ref name="tx" scoped="" ref="0x7fa72d9e29f0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72d9e2b80"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72d9e2d10"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72d9e1020"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72d9e11b0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72d9e1340"/>
        <function-ref name="rx" scoped="" ref="0x7fa72d9e14d0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72d9e1660"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72d9e17f0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72d9e1980"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72d9e1b10"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72d9e1ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fa72d9e8bc0" loc="74:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fa72d9e8bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72d9e5020"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d9e51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7fa72d9de990" loc="79:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7fa72d9de990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d9ded10"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d9dc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d9dc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d9dc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d9dc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d9dc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d9dc7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d9dc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d9dcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d9dcca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d9dce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d9db020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d9db1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d9db440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d9db5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fa72d9e0a00" loc="78:../../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fa72d9e0a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d9e0d80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d9df020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d9df1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d9df340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d9df4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d9df660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d9df7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d9df980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d9dfb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d9dfca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d9dfe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d9de020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d9de1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d9de440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d9de5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d94f020" loc="39:../../../../tos/platforms/shimmer2r/AccelC.nc">
      <component-ref qname="AccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d94f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d94f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Accel" ref="0x7fa72d952820" loc="38:../../../../tos/platforms/shimmer2r/AccelC.nc">
      <component-ref qname="AccelC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Accel" scoped="" ref="0x7fa72d952820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Mma_Accel"/>
      </instance>
      <interface-functions>
        <function-ref name="setSensitivity" scoped="" ref="0x7fa72d952ba0"/>
        <function-ref name="wake" scoped="" ref="0x7fa72d952d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d94fe40" loc="39:../../../../tos/platforms/shimmer2r/Mma7361P.nc">
      <component-ref qname="Mma7361P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d94fe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d94a1e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Accel" ref="0x7fa72d94a510" loc="40:../../../../tos/platforms/shimmer2r/Mma7361P.nc">
      <component-ref qname="Mma7361P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Accel" scoped="" ref="0x7fa72d94a510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Mma_Accel"/>
      </instance>
      <interface-functions>
        <function-ref name="setSensitivity" scoped="" ref="0x7fa72d94a890"/>
        <function-ref name="wake" scoped="" ref="0x7fa72d94aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d9502b0" loc="37:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <component-ref qname="shimmerAnalogSetupC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d9502b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d950630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="shimmerAnalogSetup" ref="0x7fa72d950940" loc="38:../../../../tos/platforms/shimmer/shimmerAnalogSetupC.nc">
      <component-ref qname="shimmerAnalogSetupC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72d950940"/></type-interface>
      <instance>
        <interfacedef-ref qname="shimmerAnalogSetup"/>
      </instance>
      <interface-functions>
        <function-ref name="addAccelInputs" scoped="" ref="0x7fa72d950cc0"/>
        <function-ref name="triggerConversion" scoped="" ref="0x7fa72d950e50"/>
        <function-ref name="getNumberOfChannels" scoped="" ref="0x7fa72d940020"/>
        <function-ref name="addECGInputs" scoped="" ref="0x7fa72d9401b0"/>
        <function-ref name="addAnExInput" scoped="" ref="0x7fa72d940340"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d9404d0"/>
        <function-ref name="addEMGInput" scoped="" ref="0x7fa72d940660"/>
        <function-ref name="addStrainGaugeInputs" scoped="" ref="0x7fa72d9407f0"/>
        <function-ref name="addGSRInput" scoped="" ref="0x7fa72d940980"/>
        <function-ref name="finishADCSetup" scoped="" ref="0x7fa72d940b10"/>
        <function-ref name="addUVInputs" scoped="" ref="0x7fa72d940ca0"/>
        <function-ref name="addGyroInputs" scoped="" ref="0x7fa72d940e30"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fa72d93f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430DmaControl" ref="0x7fa72d936ce0" loc="45:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430DmaControl" scoped="" ref="0x7fa72d936ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7fa72d9390a0"/>
        <function-ref name="init" scoped="" ref="0x7fa72d939230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430DmaChannel" ref="0x7fa72d939530" loc="46:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430DmaChannel" scoped="" ref="0x7fa72d939530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d9398b0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d939a40"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d939bd0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d939d60"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d938020"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d9381b0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d938340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7fa72d910370" loc="47:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fa72d910370"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fa72d9106f0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fa72d910880"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fa72d910a10"/>
        <function-ref name="isBusy" scoped="" ref="0x7fa72d910ba0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fa72d910d30"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fa72d935020"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fa72d9351b0"/>
        <function-ref name="startConversion" scoped="" ref="0x7fa72d935340"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fa72d9354d0"/>
        <function-ref name="getMem" scoped="" ref="0x7fa72d935660"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fa72d9357f0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fa72d935980"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fa72d935b10"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fa72d935da0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fa72d934020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d93b850" loc="42:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d93b850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d93bbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72d9342a0" loc="48:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72d9342a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72d934620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72d9347b0"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72d934940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72d934ad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72d934c60"/>
        <function-ref name="get" scoped="" ref="0x7fa72d934df0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72d90f020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72d90f660"/>
        <function-ref name="set" scoped="" ref="0x7fa72d90f1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72d90f340"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72d90f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="shimmerAnalogSetup" ref="0x7fa72d93fd00" loc="41:../../../../tos/platforms/shimmer/shimmerAnalogSetupP.nc">
      <component-ref qname="shimmerAnalogSetupP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="shimmerAnalogSetup" scoped="" ref="0x7fa72d93fd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="shimmerAnalogSetup"/>
      </instance>
      <interface-functions>
        <function-ref name="addAccelInputs" scoped="" ref="0x7fa72d93c0a0"/>
        <function-ref name="triggerConversion" scoped="" ref="0x7fa72d93c230"/>
        <function-ref name="getNumberOfChannels" scoped="" ref="0x7fa72d93c3c0"/>
        <function-ref name="addECGInputs" scoped="" ref="0x7fa72d93c550"/>
        <function-ref name="addAnExInput" scoped="" ref="0x7fa72d93c6e0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d93c870"/>
        <function-ref name="addEMGInput" scoped="" ref="0x7fa72d93ca00"/>
        <function-ref name="addStrainGaugeInputs" scoped="" ref="0x7fa72d93cb90"/>
        <function-ref name="addGSRInput" scoped="" ref="0x7fa72d93cd20"/>
        <function-ref name="finishADCSetup" scoped="" ref="0x7fa72d93b020"/>
        <function-ref name="addUVInputs" scoped="" ref="0x7fa72d93b1b0"/>
        <function-ref name="addGyroInputs" scoped="" ref="0x7fa72d93b340"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fa72d93b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7fa72d8c8840" loc="46:../../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7fa72d8c8840"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7fa72d8c8bc0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7fa72d8c8d50"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7fa72d8c4020"/>
        <function-ref name="isBusy" scoped="" ref="0x7fa72d8c41b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7fa72d8c4340"/>
        <function-ref name="getCtl1" scoped="" ref="0x7fa72d8c44d0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7fa72d8c4660"/>
        <function-ref name="startConversion" scoped="" ref="0x7fa72d8c47f0"/>
        <function-ref name="setCtl0" scoped="" ref="0x7fa72d8c4980"/>
        <function-ref name="getMem" scoped="" ref="0x7fa72d8c4b10"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7fa72d8c4ca0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7fa72d8c4e30"/>
        <function-ref name="stopConversion" scoped="" ref="0x7fa72d8c3020"/>
        <function-ref name="enableConversion" scoped="" ref="0x7fa72d8c32b0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7fa72d8c3440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel2" ref="0x7fa72d88b8b0" loc="51:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel2" scoped="" ref="0x7fa72d88b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d88bc30"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d88bdc0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d88a020"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d88a1b0"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d88a340"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d88a4d0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d88a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel0" ref="0x7fa72d88d590" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel0" scoped="" ref="0x7fa72d88d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d88d910"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d88daa0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d88dc30"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d88ddc0"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d88c020"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d88c1b0"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d88c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72d8c5b70" loc="48:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72d8c5b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7fa72d88d020"/>
        <function-ref name="init" scoped="" ref="0x7fa72d88d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel1" ref="0x7fa72d88c720" loc="50:../../../../tos/chips/msp430/dma/Msp430DmaC.nc">
      <component-ref qname="Msp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel1" scoped="" ref="0x7fa72d88c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d88caa0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d88cc30"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d88cdc0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d88b020"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d88b1b0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d88b340"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d88b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel2" ref="0x7fa72d85b0c0" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel2" scoped="" ref="0x7fa72d85b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d85b440"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d85b5d0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d85b760"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d85b8f0"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d85ba80"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d85bc10"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d85bda0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d85a020"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d85a1b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d85a340"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d85a4d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d85a660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d85a7f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d85aa80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d85ac10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d85ada0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d859020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d8591b0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d859340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d8594d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d859660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d8597f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d859980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d859b10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d859ca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d858220"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d8583b0"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d858540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d8586d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d858860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d8589f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d858b80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d858d10"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d857020"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d8571b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d857340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d8574d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d857660"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d8577f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel0" ref="0x7fa72d863df0" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel0" scoped="" ref="0x7fa72d863df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d87f1c0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d87f350"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d87f4e0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d87f670"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d87f800"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d87f990"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d87fb20"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d87fcb0"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d87fe40"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d87e020"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d87e1b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d87e340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d87e4d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d87e760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d87e8f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d87ea80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d87ec10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d87eda0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d862020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d8621b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d862340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d8624d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d862660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d8627f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d862980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d862d10"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d861020"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d8611b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d861340"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d8614d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d861660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d8617f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d861980"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d861b10"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d861ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d861e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d860020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d8601b0"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d860340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72d880d90" loc="41:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72d880d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7fa72d886e00"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7fa72d886310"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7fa72d8864a0"/>
        <function-ref name="setENNMI" scoped="" ref="0x7fa72d886630"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d8867c0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d886950"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7fa72d886ae0"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d886c70"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7fa72d886180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel1" ref="0x7fa72d860730" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaC.nc">
      <component-ref qname="HplMsp430DmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel1" scoped="" ref="0x7fa72d860730"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d860ab0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d860c40"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d860dd0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d85f020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d85f1b0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d85f340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d85f4d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d85f660"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d85f7f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d85f980"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d85fb10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d85fca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d85fe30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d85e120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d85e2b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d85e440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d85e5d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d85e760"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d85e8f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d85ea80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d85ec10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d85eda0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d85d020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d85d1b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d85d340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d85d6d0"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d85d860"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d85d9f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d85db80"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d85dd10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d85c020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d85c1b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d85c340"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d85c4d0"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d85c660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d85c7f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d85c980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d85cb10"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d85cca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DmaControl" ref="0x7fa72d856520" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <component-ref qname="HplMsp430DmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DmaControl" scoped="" ref="0x7fa72d856520"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7fa72d853660"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7fa72d856a30"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7fa72d856bc0"/>
        <function-ref name="setENNMI" scoped="" ref="0x7fa72d856d50"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d853020"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d8531b0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7fa72d853340"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d8534d0"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7fa72d8568a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7fa72d850710" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaP.nc">
      <component-ref qname="HplMsp430DmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7fa72d850710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d850a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7fa72d7cec90" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7fa72d7cec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d7cd0a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d7cd230"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d7cd3c0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d7cd550"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7cd6e0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d7cd870"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d7cda00"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d7cdb90"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d7cdd20"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d7cc020"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d7cc1b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d7cc340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d7cc4d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d7cc760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7cc8f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d7cca80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d7ccc10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d7ccda0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d7cb020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d7cb1b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d7cb340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d7cb4d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d7cb660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d7cb7f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d7cb980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d7cbd10"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d7ca020"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d7ca1b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d7ca340"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d7ca4d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d7ca660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d7ca7f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d7ca980"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d7cab10"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d7caca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d7cae30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d7c9020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d7c91b0"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d7c9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7fa72d7c9610" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7fa72d7c9610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d7c9990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7fa72d7c59b0" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7fa72d7c59b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d7c5d30"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d7c4020"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d7c41b0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d7c4340"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7c44d0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d7c4660"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d7c47f0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d7c4980"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d7c4b10"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d7c4ca0"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d7c4e30"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d7c3020"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d7c31b0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d7c3440"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7c35d0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d7c3760"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d7c38f0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d7c3a80"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d7c3c10"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d7c3da0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d7c2020"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d7c21b0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d7c2340"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d7c24d0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d7c2660"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d7c29f0"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d7c2b80"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d7c2d10"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d7c1020"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d7c11b0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d7c1340"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d7c14d0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d7c1660"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d7c17f0"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d7c1980"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d7c1b10"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d7c1ca0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d7c1e30"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d7c0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7fa72d7c02f0" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7fa72d7c02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d7c0670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMA" ref="0x7fa72d7bb3f0" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMA" scoped="" ref="0x7fa72d7bb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d7bb770"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d7bb900"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d7bba90"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d7bbc20"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7bbdb0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d7ba020"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d7ba1b0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d7ba340"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d7ba4d0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d7ba660"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d7ba7f0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d7ba980"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d7bab10"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d7bada0"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7b9020"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d7b91b0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d7b9340"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d7b94d0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d7b9660"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d7b97f0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d7b9980"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d7b9b10"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d7b9ca0"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d7b9e30"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d7b8020"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d7b83b0"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d7b8540"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d7b86d0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d7b8860"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d7b89f0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d7b8b80"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d7b8d10"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d7b7020"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d7b71b0"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d7b7340"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d7b74d0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d7b7660"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d7b77f0"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d7b7980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Interrupt" ref="0x7fa72d7b7c50" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaXP.nc">
      <component-ref qname="HplMsp430DmaC.Dma2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7fa72d7b7c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d7b6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7fa72d784020" loc="45:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7fa72d784020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d7843a0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d784530"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d7846c0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d784850"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7849e0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d784b70"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d784d00"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d783020"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d7831b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d783340"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d7834d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d783660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d7837f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d783a80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d783c10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d783da0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d782020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d7821b0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d782340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d7824d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d782660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d7827f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d782980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d782b10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d782ca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d781220"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d7813b0"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d781540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d7816d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d781860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d7819f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d781b80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d781d10"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d780020"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d7801b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d780340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d7804d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d780660"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d7807f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7fa72d785020" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7fa72d785020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d7853a0"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d785530"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d7856c0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d785850"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d7859e0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d785b70"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d785d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7fa72d77a7a0" loc="45:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7fa72d77a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d77ab20"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d77acb0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d77ae40"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d779020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7791b0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d779340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d7794d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d779660"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d7797f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d779980"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d779b10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d779ca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d779e30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d778120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7782b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d778440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d7785d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d778760"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d7788f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d778a80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d778c10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d778da0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d777020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d7771b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d777340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d7776d0"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d777860"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d7779f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d777b80"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d777d10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d776020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d7761b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d776340"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d7764d0"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d776660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d7767f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d776980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d776b10"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d776ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7fa72d77b7a0" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7fa72d77b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d77bb20"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d77bcb0"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d77be40"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d77a020"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d77a1b0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d77a340"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d77a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel" ref="0x7fa72d772db0" loc="45:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel2P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel" scoped="" ref="0x7fa72d772db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d771180"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d771310"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d7714a0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d771630"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7717c0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d771950"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d771ae0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d771c70"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d771e00"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d770020"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d7701b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d770340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d7704d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d770760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7708f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d770a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d770c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d770da0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d76f020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d76f1b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d76f340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d76f4d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d76f660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d76f7f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d76f980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d76fd10"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d76e020"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d76e1b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d76e340"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d76e4d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d76e660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d76e7f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d76e980"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d76eb10"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d76eca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d76ee30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d76d020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d76d1b0"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d76d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Channel" ref="0x7fa72d773d80" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaChannelP.nc">
      <component-ref qname="Msp430DmaC.Channel2P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Channel" scoped="" ref="0x7fa72d773d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="stopTransfer" scoped="" ref="0x7fa72d772180"/>
        <function-ref name="repeatTransfer" scoped="" ref="0x7fa72d772310"/>
        <function-ref name="setupTransfer" scoped="" ref="0x7fa72d7724a0"/>
        <function-ref name="startTransfer" scoped="" ref="0x7fa72d772630"/>
        <function-ref name="setupTransferRaw" scoped="" ref="0x7fa72d7727c0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d772950"/>
        <function-ref name="softwareTrigger" scoped="" ref="0x7fa72d772ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel1" ref="0x7fa72d762740" loc="48:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel1" scoped="" ref="0x7fa72d762740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d762ac0"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d762c50"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d762de0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d761020"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7611b0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d761340"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d7614d0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d761660"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d7617f0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d761980"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d761b10"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d761ca0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d761e30"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d760120"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7602b0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d760440"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d7605d0"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d760760"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d7608f0"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d760a80"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d760c10"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d760da0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d75f020"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d75f1b0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d75f340"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d75f6d0"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d75f860"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d75f9f0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d75fb80"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d75fd10"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d75e020"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d75e1b0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d75e340"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d75e4d0"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d75e660"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d75e7f0"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d75e980"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d75eb10"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d75eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplControl" ref="0x7fa72d768970" loc="46:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplControl" scoped="" ref="0x7fa72d768970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="clearRoundRobin" scoped="" ref="0x7fa72d767990"/>
        <function-ref name="setRoundRobin" scoped="" ref="0x7fa72d768e80"/>
        <function-ref name="clearOnFetch" scoped="" ref="0x7fa72d767030"/>
        <function-ref name="setENNMI" scoped="" ref="0x7fa72d7671c0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d767350"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d7674e0"/>
        <function-ref name="setOnFetch" scoped="" ref="0x7fa72d767670"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d767800"/>
        <function-ref name="clearENNMI" scoped="" ref="0x7fa72d768cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel2" ref="0x7fa72d75d0d0" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel2" scoped="" ref="0x7fa72d75d0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d75d450"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d75d5e0"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d75d770"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d75d900"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d75da90"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d75dc20"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d75ddb0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d75c020"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d75c1b0"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d75c340"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d75c4d0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d75c660"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d75c7f0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d75ca80"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d75cc10"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d75cda0"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d75b020"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d75b1b0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d75b340"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d75b4d0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d75b660"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d75b7f0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d75b980"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d75bb10"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d75bca0"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d75a220"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d75a3b0"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d75a540"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d75a6d0"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d75a860"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d75a9f0"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d75ab80"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d75ad10"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d759020"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d7591b0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d759340"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d7594d0"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d759660"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d7597f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa72d768060" loc="44:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa72d768060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430DmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setFlags" scoped="" ref="0x7fa72d7683e0"/>
        <function-ref name="init" scoped="" ref="0x7fa72d768570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplChannel0" ref="0x7fa72d767d90" loc="47:../../../../tos/chips/msp430/dma/Msp430DmaControlP.nc">
      <component-ref qname="Msp430DmaControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplChannel0" scoped="" ref="0x7fa72d767d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="disableDMA" scoped="" ref="0x7fa72d766180"/>
        <function-ref name="clearTrigger" scoped="" ref="0x7fa72d766310"/>
        <function-ref name="setDstDecrement" scoped="" ref="0x7fa72d7664a0"/>
        <function-ref name="setLevelSensitive" scoped="" ref="0x7fa72d766630"/>
        <function-ref name="setSrcIncrement" scoped="" ref="0x7fa72d7667c0"/>
        <function-ref name="getState" scoped="" ref="0x7fa72d766950"/>
        <function-ref name="setWordToWord" scoped="" ref="0x7fa72d766ae0"/>
        <function-ref name="setTrigger" scoped="" ref="0x7fa72d766c70"/>
        <function-ref name="getDestination" scoped="" ref="0x7fa72d766e00"/>
        <function-ref name="setRepeatedBlockMode" scoped="" ref="0x7fa72d765020"/>
        <function-ref name="aborted" scoped="" ref="0x7fa72d7651b0"/>
        <function-ref name="setByteToByte" scoped="" ref="0x7fa72d765340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7fa72d7654d0"/>
        <function-ref name="disableInterrupt" scoped="" ref="0x7fa72d765760"/>
        <function-ref name="interruptPending" scoped="" ref="0x7fa72d7658f0"/>
        <function-ref name="setStateRaw" scoped="" ref="0x7fa72d765a80"/>
        <function-ref name="getTrigger" scoped="" ref="0x7fa72d765c10"/>
        <function-ref name="setDstIncrement" scoped="" ref="0x7fa72d765da0"/>
        <function-ref name="reset" scoped="" ref="0x7fa72d764020"/>
        <function-ref name="setSingleMode" scoped="" ref="0x7fa72d7641b0"/>
        <function-ref name="triggerDMA" scoped="" ref="0x7fa72d764340"/>
        <function-ref name="setByteToWord" scoped="" ref="0x7fa72d7644d0"/>
        <function-ref name="setSrc" scoped="" ref="0x7fa72d764660"/>
        <function-ref name="setRepeatedSingleMode" scoped="" ref="0x7fa72d7647f0"/>
        <function-ref name="setSrcNoIncrement" scoped="" ref="0x7fa72d764980"/>
        <function-ref name="setBurstMode" scoped="" ref="0x7fa72d764d10"/>
        <function-ref name="getSource" scoped="" ref="0x7fa72d763020"/>
        <function-ref name="getSize" scoped="" ref="0x7fa72d7631b0"/>
        <function-ref name="setSrcDecrement" scoped="" ref="0x7fa72d763340"/>
        <function-ref name="transferDone" scoped="" ref="0x7fa72d7634d0"/>
        <function-ref name="enableDMA" scoped="" ref="0x7fa72d763660"/>
        <function-ref name="setRepeatedBurstMode" scoped="" ref="0x7fa72d7637f0"/>
        <function-ref name="setBlockMode" scoped="" ref="0x7fa72d763980"/>
        <function-ref name="setSize" scoped="" ref="0x7fa72d763b10"/>
        <function-ref name="setState" scoped="" ref="0x7fa72d763ca0"/>
        <function-ref name="setDstNoIncrement" scoped="" ref="0x7fa72d763e30"/>
        <function-ref name="setEdgeSensitive" scoped="" ref="0x7fa72d762020"/>
        <function-ref name="setWordToByte" scoped="" ref="0x7fa72d7621b0"/>
        <function-ref name="setDst" scoped="" ref="0x7fa72d762340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GyroBoard" ref="0x7fa72d72f120" loc="42:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <component-ref qname="GyroBoardC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GyroBoard" scoped="" ref="0x7fa72d72f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GyroBoard"/>
      </instance>
      <interface-functions>
        <function-ref name="autoZero" scoped="" ref="0x7fa72d72f4a0"/>
        <function-ref name="buttonPressed" scoped="" ref="0x7fa72d72f630"/>
        <function-ref name="ledOn" scoped="" ref="0x7fa72d72f7c0"/>
        <function-ref name="ledOff" scoped="" ref="0x7fa72d72f950"/>
        <function-ref name="ledToggle" scoped="" ref="0x7fa72d72fae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d7322f0" loc="40:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <component-ref qname="GyroBoardC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d7322f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d732670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa72d732930" loc="41:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardC.nc">
      <component-ref qname="GyroBoardC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa72d732930"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72d732cb0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d732e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GyroBoard" ref="0x7fa72d72b4e0" loc="45:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardP.nc">
      <component-ref qname="GyroBoardP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GyroBoard" scoped="" ref="0x7fa72d72b4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GyroBoard"/>
      </instance>
      <interface-functions>
        <function-ref name="autoZero" scoped="" ref="0x7fa72d72b860"/>
        <function-ref name="buttonPressed" scoped="" ref="0x7fa72d72b9f0"/>
        <function-ref name="ledOn" scoped="" ref="0x7fa72d72bb80"/>
        <function-ref name="ledOff" scoped="" ref="0x7fa72d72bd10"/>
        <function-ref name="ledToggle" scoped="" ref="0x7fa72d72a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d72e6c0" loc="43:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardP.nc">
      <component-ref qname="GyroBoardP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d72e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d72ea40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="buttonNotify" ref="0x7fa72d72a5a0" loc="48:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardP.nc">
      <component-ref qname="GyroBoardP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="buttonNotify" scoped="" ref="0x7fa72d72a5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e07ee30"/>
            <typename><typedef-ref name="button_state_t" ref="0x7fa72e07d770"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d729680"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d729200"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d729b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa72d72ed00" loc="44:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoardP.nc">
      <component-ref qname="GyroBoardP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa72d72ed00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa72d72b0a0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d72b230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7fa72d70d020" loc="51:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonC.nc">
      <component-ref qname="GyroButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7fa72d70d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e07ee30"/>
            <typename><typedef-ref name="button_state_t" ref="0x7fa72e07d770"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d70b0d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d70dc10"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d70b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x7fa72d703c90" loc="44:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <component-ref qname="HplGyroButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d703c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d7060a0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d706230"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7fa72d7063c0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7fa72d706550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72d708380" loc="43:../../../../tos/platforms/shimmer2/chips/gyro/HplGyroButtonC.nc">
      <component-ref qname="HplGyroButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d708380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d708700"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d708890"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d708a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d708bb0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d708d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d707020"/>
        <function-ref name="set" scoped="" ref="0x7fa72d7071b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d707340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa72d6fd020" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplGyroButtonC.UserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72d6fd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d6fd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d6fd530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d6fd6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d6fd850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d6fd9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d6fdb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d6fdd00"/>
        <function-ref name="get" scoped="" ref="0x7fa72d6fc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d6fc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d6fc340"/>
        <function-ref name="set" scoped="" ref="0x7fa72d6fc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d6fc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d6fc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d6fca80"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d6fcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72d6ffd50" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplGyroButtonC.UserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d6ffd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d6fe100"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d6fe290"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d6fe420"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d6fe5b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d6fe740"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d6fe8d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d6fea60"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d6febf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7fa72d6eb020" loc="46:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplGyroButtonC.InterruptUserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7fa72d6eb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72d6eb3a0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d6eb530"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d6eb6c0"/>
        <function-ref name="edge" scoped="" ref="0x7fa72d6eb850"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d6eb9e0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72d6ebb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7fa72d6f8490" loc="45:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplGyroButtonC.InterruptUserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7fa72d6f8490"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d6f8810"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d6f89a0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7fa72d6f8b30"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7fa72d6f8cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendEvent" ref="0x7fa72d6d42f0" loc="51:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="GyroButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendEvent" scoped="" ref="0x7fa72d6d42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72d6d4670"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72d6d4800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GpioInterrupt" ref="0x7fa72d6d5760" loc="48:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="GyroButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d6d5760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d6d5ae0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d6d5c70"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7fa72d6d5e00"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7fa72d6d4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7fa72d6d8b10" loc="45:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="GyroButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7fa72d6d8b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d6d7bd0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d6d7750"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d6d6090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7fa72d6d6510" loc="47:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="GyroButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d6d6510"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d6d6890"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d6d6a20"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d6d6bb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d6d6d40"/>
        <function-ref name="get" scoped="" ref="0x7fa72d6d5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d6d51b0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d6d5340"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d6d54d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="debounce" ref="0x7fa72d6c1c40" loc="64:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonP.nc">
      <component-ref qname="GyroButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="debounce" scoped="" ref="0x7fa72d6c1c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72d6c0020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72d6c01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7fa72d6d2af0" loc="45:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonP.nc">
      <component-ref qname="GyroButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7fa72d6d2af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e07ee30"/>
            <typename><typedef-ref name="button_state_t" ref="0x7fa72e07d770"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d6cfbd0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d6cf750"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d6ce090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NotifyLower" ref="0x7fa72d6ce750" loc="47:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonP.nc">
      <component-ref qname="GyroButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="NotifyLower" scoped="" ref="0x7fa72d6ce750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d6cc810"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d6cc390"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d6ccc90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="debounceTimer" ref="0x7fa72d6cb3d0" loc="48:../../../../tos/platforms/shimmer2/chips/gyro/GyroButtonP.nc">
      <component-ref qname="GyroButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="debounceTimer" scoped="" ref="0x7fa72d6cb3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72d6c7870"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d6cae40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72d6c9c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72d6c9780"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72d6c61e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72d6c7cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72d6c9300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72d6ca020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72d6c7260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72d6ca4f0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d6ca9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72d6ba8c0" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="GyroButtonC.debounceTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72d6ba8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72d6b7cf0"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d6b8320"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72d6b70d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72d6b8c20"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72d6b5660"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72d6b51e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72d6b87a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72d6b94e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72d6b76e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72d6b99b0"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d6b9e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Magnetometer" ref="0x7fa72d6af2f0" loc="49:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <component-ref qname="MagnetometerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Magnetometer" scoped="" ref="0x7fa72d6af2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Magnetometer"/>
      </instance>
      <interface-functions>
        <function-ref name="disableBus" scoped="" ref="0x7fa72d6aec10"/>
        <function-ref name="setIdle" scoped="" ref="0x7fa72d6af800"/>
        <function-ref name="enableBus" scoped="" ref="0x7fa72d6af990"/>
        <function-ref name="convertRegistersToData" scoped="" ref="0x7fa72d6afb20"/>
        <function-ref name="readHeading" scoped="" ref="0x7fa72d6afcb0"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72d6afe40"/>
        <function-ref name="goToSleep" scoped="" ref="0x7fa72d6ae020"/>
        <function-ref name="selfTest" scoped="" ref="0x7fa72d6ae1b0"/>
        <function-ref name="runSingleConversion" scoped="" ref="0x7fa72d6ae340"/>
        <function-ref name="readData" scoped="" ref="0x7fa72d6ae4d0"/>
        <function-ref name="runContinuousConversion" scoped="" ref="0x7fa72d6ae660"/>
        <function-ref name="setOutputRate" scoped="" ref="0x7fa72d6ae7f0"/>
        <function-ref name="setGain" scoped="" ref="0x7fa72d6ae980"/>
        <function-ref name="readDone" scoped="" ref="0x7fa72d6af670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d730bc0" loc="48:../../../../tos/platforms/shimmer2/chips/hmc5843/MagnetometerC.nc">
      <component-ref qname="MagnetometerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d730bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d6af020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Magnetometer" ref="0x7fa72d6add30" loc="47:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Magnetometer" scoped="" ref="0x7fa72d6add30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Magnetometer"/>
      </instance>
      <interface-functions>
        <function-ref name="disableBus" scoped="" ref="0x7fa72d6a9760"/>
        <function-ref name="setIdle" scoped="" ref="0x7fa72d6aa270"/>
        <function-ref name="enableBus" scoped="" ref="0x7fa72d6aa400"/>
        <function-ref name="convertRegistersToData" scoped="" ref="0x7fa72d6aa590"/>
        <function-ref name="readHeading" scoped="" ref="0x7fa72d6aa720"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72d6aa8b0"/>
        <function-ref name="goToSleep" scoped="" ref="0x7fa72d6aaa40"/>
        <function-ref name="selfTest" scoped="" ref="0x7fa72d6aabd0"/>
        <function-ref name="runSingleConversion" scoped="" ref="0x7fa72d6aad60"/>
        <function-ref name="readData" scoped="" ref="0x7fa72d6a9020"/>
        <function-ref name="runContinuousConversion" scoped="" ref="0x7fa72d6a91b0"/>
        <function-ref name="setOutputRate" scoped="" ref="0x7fa72d6a9340"/>
        <function-ref name="setGain" scoped="" ref="0x7fa72d6a94d0"/>
        <function-ref name="readDone" scoped="" ref="0x7fa72d6aa0e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CInit" ref="0x7fa72d697c20" loc="51:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInit" scoped="" ref="0x7fa72d697c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d695020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="testTimer" ref="0x7fa72d688020" loc="57:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="testTimer" scoped="" ref="0x7fa72d688020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72d685630"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d687a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72d686920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72d6864a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72d683020"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72d685ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72d686020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72d688c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72d685020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72d687110"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d6875e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d6ad6e0" loc="46:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d6ad6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d6ada60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7fa72d68e1d0" loc="53:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fa72d68e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa72d68e550"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa72d68e6e0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa72d68e870"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa72d68ea00"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa72d68eb90"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa72d68ed20"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa72d68d020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa72d68d1b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa72d68d340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa72d68d4d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa72d68d660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa72d68d7f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa72d68d980"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa72d68dc10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa72d68dda0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa72d68c020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa72d68c1b0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa72d68c340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa72d68c4d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa72d68c660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa72d68c7f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa72d68c980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa72d68cb10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa72d68cca0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa72d68ce30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa72d68b220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa72d68b3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa72d68b540"/>
        <function-ref name="tx" scoped="" ref="0x7fa72d68b6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa72d68b860"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa72d68b9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa72d68bb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa72d68bd10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa72d68a020"/>
        <function-ref name="rx" scoped="" ref="0x7fa72d68a1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa72d68a340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa72d68a4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa72d68a660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa72d68a7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa72d68a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fa72d68adb0" loc="54:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa72d68adb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa72d689180"/>
        <function-ref name="txDone" scoped="" ref="0x7fa72d689310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7fa72d695370" loc="52:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fa72d695370"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa72d6956f0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa72d695880"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa72d695a10"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa72d695ba0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa72d695d30"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa72d694020"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa72d6941b0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa72d694340"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72d6944d0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa72d694660"/>
        <function-ref name="getData" scoped="" ref="0x7fa72d6947f0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa72d694980"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa72d694b10"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa72d694da0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa72d693020"/>
        <function-ref name="getIV" scoped="" ref="0x7fa72d6931b0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa72d693340"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa72d6934d0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa72d693660"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa72d6937f0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa72d693980"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa72d693b10"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa72d693ca0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa72d693e30"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa72d692020"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa72d6923b0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa72d692540"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa72d6926d0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa72d692860"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa72d6929f0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa72d692b80"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa72d692d10"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa72d691020"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa72d6911b0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa72d691340"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa72d6914d0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa72d691660"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa72d6917f0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa72d691980"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa72d691b10"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa72d691ca0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa72d691e30"/>
        <function-ref name="setData" scoped="" ref="0x7fa72d690020"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa72d6901b0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa72d690340"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa72d6904d0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa72d690660"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa72d6907f0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa72d690980"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa72d68f020"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa72d68f1b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa72d68f340"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa72d68f4d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa72d68f660"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa72d68f7f0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa72d68f980"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa72d68fb10"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa72d68fca0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa72d68fe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CPacket" ref="0x7fa72d699d60" loc="50:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CPacket" scoped="" ref="0x7fa72d699d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7fa72d6a6690"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x7fa72d6a6950"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fa72d6a89c0"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72d697020"/>
        <function-ref name="write" scoped="" ref="0x7fa72d6a7620"/>
        <function-ref name="readDone" scoped="" ref="0x7fa72d6982b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CInterrupts" ref="0x7fa72d689710" loc="55:../../../../tos/platforms/shimmer2/chips/hmc5843/Hmc5843P.nc">
      <component-ref qname="Hmc5843P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72d689710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d689a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72d632cd0" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MagnetometerC.testTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72d632cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72d62d220"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d6307c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72d62f590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72d62f110"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72d62db20"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72d62d6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72d630c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72d631940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72d62fba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72d631e10"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d630340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInit" ref="0x7fa72d622020" loc="43:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <component-ref qname="Msp430I2CP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInit" scoped="" ref="0x7fa72d622020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d6223a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeDone" ref="0x7fa72d610600" loc="88:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <component-ref qname="Msp430I2CP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="writeDone" scoped="" ref="0x7fa72d610600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72d610980"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72d610b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CBasicAddr" ref="0x7fa72d627220" loc="41:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <component-ref qname="Msp430I2CP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CBasicAddr" scoped="" ref="0x7fa72d627220"/></type-interface>
      <instance>
        <interfacedef-ref qname="I2CPacket"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref ref="0x7fa72d6a6690"/>
            <typename><typedef-ref name="TI2CBasicAddr" ref="0x7fa72d6a6950"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fa72d627e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7fa72d623330"/>
        <function-ref name="write" scoped="" ref="0x7fa72d626a90"/>
        <function-ref name="readDone" scoped="" ref="0x7fa72d6246d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7fa72d622730" loc="45:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <component-ref qname="Msp430I2CP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fa72d622730"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa72d622ab0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa72d622c40"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa72d622dd0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa72d621020"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa72d6211b0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa72d621340"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa72d6214d0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa72d621660"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa72d6217f0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa72d621980"/>
        <function-ref name="getData" scoped="" ref="0x7fa72d621b10"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa72d621ca0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa72d621e30"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa72d620120"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa72d6202b0"/>
        <function-ref name="getIV" scoped="" ref="0x7fa72d620440"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa72d6205d0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa72d620760"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa72d6208f0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa72d620a80"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa72d620c10"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa72d620da0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa72d61f020"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa72d61f1b0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa72d61f340"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa72d61f6d0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa72d61f860"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa72d61f9f0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa72d61fb80"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa72d61fd10"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa72d61e020"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa72d61e1b0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa72d61e340"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa72d61e4d0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa72d61e660"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa72d61e7f0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa72d61e980"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa72d61eb10"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa72d61eca0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa72d61ee30"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa72d61d020"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa72d61d1b0"/>
        <function-ref name="setData" scoped="" ref="0x7fa72d61d340"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa72d61d4d0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa72d61d660"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa72d61d7f0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa72d61d980"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa72d61db10"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa72d61dca0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa72d61c420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa72d61c5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa72d61c740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa72d61c8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa72d61ca60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa72d61cbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa72d61cd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa72d61b020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa72d61b1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa72d61b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="I2CInterrupts" ref="0x7fa72d61b780" loc="46:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <component-ref qname="Msp430I2CP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa72d61b780"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d61bb00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x7fa72d615720" loc="72:../../../../tos/platforms/shimmer/chips/msp430/Msp430I2CP.nc">
      <component-ref qname="Msp430I2CP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x7fa72d615720"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72d615aa0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72d615c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d5d20c0" loc="38:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeC.nc">
      <component-ref qname="StrainGaugeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d5d20c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d5d2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StrainGauge" ref="0x7fa72d5d2700" loc="39:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeC.nc">
      <component-ref qname="StrainGaugeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StrainGauge" scoped="" ref="0x7fa72d5d2700"/></type-interface>
      <instance>
        <interfacedef-ref qname="StrainGauge"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x7fa72d5d2a80"/>
        <function-ref name="powerOff" scoped="" ref="0x7fa72d5d2c10"/>
        <function-ref name="ledOn" scoped="" ref="0x7fa72d5d2da0"/>
        <function-ref name="ledOff" scoped="" ref="0x7fa72d5d1020"/>
        <function-ref name="ledToggle" scoped="" ref="0x7fa72d5d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d5d1c90" loc="37:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeP.nc">
      <component-ref qname="StrainGaugeP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d5d1c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d5ce0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StrainGauge" ref="0x7fa72d5ce360" loc="38:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGaugeP.nc">
      <component-ref qname="StrainGaugeP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StrainGauge" scoped="" ref="0x7fa72d5ce360"/></type-interface>
      <instance>
        <interfacedef-ref qname="StrainGauge"/>
      </instance>
      <interface-functions>
        <function-ref name="powerOn" scoped="" ref="0x7fa72d5ce6e0"/>
        <function-ref name="powerOff" scoped="" ref="0x7fa72d5ce870"/>
        <function-ref name="ledOn" scoped="" ref="0x7fa72d5cea00"/>
        <function-ref name="ledOff" scoped="" ref="0x7fa72d5ceb90"/>
        <function-ref name="ledToggle" scoped="" ref="0x7fa72d5ced20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DigitalHeartRate" ref="0x7fa72d5d3ae0" loc="46:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <component-ref qname="DigitalHeartRateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72d5d3ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DigitalHeartRate"/>
      </instance>
      <interface-functions>
        <function-ref name="beat" scoped="" ref="0x7fa72d5d3e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d5d3460" loc="45:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRateC.nc">
      <component-ref qname="DigitalHeartRateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d5d3460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d5d37e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DigitalHeartRate" ref="0x7fa72d5ba020" loc="51:../../../../tos/platforms/shimmer/chips/rmcm01/Rmcm01P.nc">
      <component-ref qname="Rmcm01P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DigitalHeartRate" scoped="" ref="0x7fa72d5ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="DigitalHeartRate"/>
      </instance>
      <interface-functions>
        <function-ref name="beat" scoped="" ref="0x7fa72d5ba3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430GeneralIO" ref="0x7fa72d5b98c0" loc="55:../../../../tos/platforms/shimmer/chips/rmcm01/Rmcm01P.nc">
      <component-ref qname="Rmcm01P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430GeneralIO" scoped="" ref="0x7fa72d5b98c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d5b9c40"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d5b9dd0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d5b8020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d5b81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d5b8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d5b84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d5b8660"/>
        <function-ref name="get" scoped="" ref="0x7fa72d5b87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d5b8980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d5b8b10"/>
        <function-ref name="set" scoped="" ref="0x7fa72d5b8ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d5b8e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d5b7020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d5b72b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d5b7440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7fa72d5b7850" loc="56:../../../../tos/platforms/shimmer/chips/rmcm01/Rmcm01P.nc">
      <component-ref qname="Rmcm01P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa72d5b7850"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72d5b64c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d5bd900" loc="50:../../../../tos/platforms/shimmer/chips/rmcm01/Rmcm01P.nc">
      <component-ref qname="Rmcm01P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d5bd900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d5bdc80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeatInterrupt" ref="0x7fa72d5ba800" loc="54:../../../../tos/platforms/shimmer/chips/rmcm01/Rmcm01P.nc">
      <component-ref qname="Rmcm01P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BeatInterrupt" scoped="" ref="0x7fa72d5ba800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72d5bab80"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d5bad10"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d5b9020"/>
        <function-ref name="edge" scoped="" ref="0x7fa72d5b91b0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d5b9340"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72d5b94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fa72d5acb70" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="DigitalHeartRateC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa72d5acb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72d5ab7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa72d5abe40" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="DigitalHeartRateC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa72d5abe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b6950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa72e6b6cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa72d5aaca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa72d5a9670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa72d5a91b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa72d5a9b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d5a5df0" loc="37:../../../../tos/platforms/shimmer/chips/gsr/GsrC.nc">
      <component-ref qname="GsrC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d5a5df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d5a21c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gsr" ref="0x7fa72d5a2430" loc="38:../../../../tos/platforms/shimmer/chips/gsr/GsrC.nc">
      <component-ref qname="GsrC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gsr" scoped="" ref="0x7fa72d5a2430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Gsr"/>
      </instance>
      <interface-functions>
        <function-ref name="controlRange" scoped="" ref="0x7fa72d5a27b0"/>
        <function-ref name="smoothSample" scoped="" ref="0x7fa72d5a2940"/>
        <function-ref name="initSmoothing" scoped="" ref="0x7fa72d5a2ad0"/>
        <function-ref name="calcResistance" scoped="" ref="0x7fa72d5a2c60"/>
        <function-ref name="setRange" scoped="" ref="0x7fa72d5a2df0"/>
        <function-ref name="smoothTransition" scoped="" ref="0x7fa72d5a1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d5a1a70" loc="42:../../../../tos/platforms/shimmer/chips/gsr/GsrP.nc">
      <component-ref qname="GsrP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d5a1a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d5a1df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gsr" ref="0x7fa72d59e0e0" loc="43:../../../../tos/platforms/shimmer/chips/gsr/GsrP.nc">
      <component-ref qname="GsrP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gsr" scoped="" ref="0x7fa72d59e0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Gsr"/>
      </instance>
      <interface-functions>
        <function-ref name="controlRange" scoped="" ref="0x7fa72d59e460"/>
        <function-ref name="smoothSample" scoped="" ref="0x7fa72d59e5f0"/>
        <function-ref name="initSmoothing" scoped="" ref="0x7fa72d59e780"/>
        <function-ref name="calcResistance" scoped="" ref="0x7fa72d59e910"/>
        <function-ref name="setRange" scoped="" ref="0x7fa72d59eaa0"/>
        <function-ref name="smoothTransition" scoped="" ref="0x7fa72d59ec30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BtCommandParser" ref="0x7fa72d56e160" loc="37:BtCommandParserC.nc">
      <component-ref qname="BtCommandParserC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72d56e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="BtCommandParser"/>
      </instance>
      <interface-functions>
        <function-ref name="handleByte" scoped="" ref="0x7fa72d56e4e0"/>
        <function-ref name="activate" scoped="" ref="0x7fa72d56e670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BtCommandParser" ref="0x7fa72d56b270" loc="38:BtCommandParserP.nc">
      <component-ref qname="BtCommandParserP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BtCommandParser" scoped="" ref="0x7fa72d56b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="BtCommandParser"/>
      </instance>
      <interface-functions>
        <function-ref name="handleByte" scoped="" ref="0x7fa72d56b5f0"/>
        <function-ref name="activate" scoped="" ref="0x7fa72d56b780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InternalFlash" ref="0x7fa72d55a0c0" loc="44:../../../../tos/platforms/shimmer/chips/msp430/InternalFlashC.nc">
      <component-ref qname="InternalFlashC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InternalFlash" scoped="" ref="0x7fa72d55a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="InternalFlash"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7fa72d55a440"/>
        <function-ref name="write" scoped="" ref="0x7fa72d55a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7fa72d542020" loc="51:../../../../tos/platforms/shimmer/UserButtonC.nc">
      <component-ref qname="UserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7fa72d542020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e07ee30"/>
            <typename><typedef-ref name="button_state_t" ref="0x7fa72e07d770"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d5410d0"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d542c10"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d541550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x7fa72d53c660" loc="44:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <component-ref qname="HplUserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d53c660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d53c9e0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d53cb70"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7fa72d53cd00"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7fa72d53b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72d53d380" loc="43:../../../../tos/platforms/shimmer2r/HplUserButtonC.nc">
      <component-ref qname="HplUserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d53d380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d53d700"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d53d890"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d53da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d53dbb0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d53dd40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d53c020"/>
        <function-ref name="set" scoped="" ref="0x7fa72d53c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d53c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa72d539ac0" loc="44:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplUserButtonC.UserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa72d539ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d539e40"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d538020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa72d5381b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d538340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d5384d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa72d538660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d5387f0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d538980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa72d538b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa72d538ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d538e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa72d537020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa72d5371b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa72d537440"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d5375d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa72d53a850" loc="43:../../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplUserButtonC.UserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d53a850"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d53abd0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d53ad60"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d539020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d5391b0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d539340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d5394d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d539660"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d5397f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7fa72d5347a0" loc="46:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplUserButtonC.InterruptUserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7fa72d5347a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa72d534b20"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d534cb0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d534e40"/>
        <function-ref name="edge" scoped="" ref="0x7fa72d533020"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d5331b0"/>
        <function-ref name="getValue" scoped="" ref="0x7fa72d533340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7fa72d535b40" loc="45:../../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplUserButtonC.InterruptUserButtonC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7fa72d535b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d534020"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d5341b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7fa72d534340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7fa72d5344d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendEvent" ref="0x7fa72d52b020" loc="51:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="UserButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendEvent" scoped="" ref="0x7fa72d52b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72d52b3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72d52b530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GpioInterrupt" ref="0x7fa72d52c440" loc="48:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="UserButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GpioInterrupt" scoped="" ref="0x7fa72d52c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa72d52c7c0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d52c950"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7fa72d52cae0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7fa72d52cc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7fa72d530880" loc="45:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="UserButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7fa72d530880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d52f940"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d52f4c0"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d52fdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7fa72d52d290" loc="47:../../../../tos/platforms/shimmer/SwitchToggleC.nc">
      <component-ref qname="UserButtonC.SwitchToggleC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa72d52d290"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa72d52d610"/>
        <function-ref name="isInput" scoped="" ref="0x7fa72d52d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa72d52d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa72d52dac0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d52dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa72d52dde0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d52c020"/>
        <function-ref name="clr" scoped="" ref="0x7fa72d52c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="debounce" ref="0x7fa72d518bb0" loc="64:../../../../tos/platforms/shimmer/UserButtonP.nc">
      <component-ref qname="UserButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="debounce" scoped="" ref="0x7fa72d518bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa72d517020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa72d5171b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Notify" ref="0x7fa72d529840" loc="45:../../../../tos/platforms/shimmer/UserButtonP.nc">
      <component-ref qname="UserButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Notify" scoped="" ref="0x7fa72d529840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e07ee30"/>
            <typename><typedef-ref name="button_state_t" ref="0x7fa72e07d770"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d526900"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d526480"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d526d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NotifyLower" ref="0x7fa72d525490" loc="47:../../../../tos/platforms/shimmer/UserButtonP.nc">
      <component-ref qname="UserButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="NotifyLower" scoped="" ref="0x7fa72d525490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Notify"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="disable" scoped="" ref="0x7fa72d523550"/>
        <function-ref name="enable" scoped="" ref="0x7fa72d5230d0"/>
        <function-ref name="notify" scoped="" ref="0x7fa72d5239d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="debounceTimer" ref="0x7fa72d5220f0" loc="48:../../../../tos/platforms/shimmer/UserButtonP.nc">
      <component-ref qname="UserButtonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="debounceTimer" scoped="" ref="0x7fa72d5220f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72d51e630"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d521b70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72d520920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72d5204a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72d51d020"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72d51eab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72d520020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72d522ce0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72d51e020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72d521220"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d5216f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa72d512c30" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="UserButtonC.debounceTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa72d512c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72e6b61a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa72e6b6510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa72d50d110"/>
        <function-ref name="fired" scoped="" ref="0x7fa72d50f6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa72d50e4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa72d50e020"/>
        <function-ref name="getdt" scoped="" ref="0x7fa72d50da10"/>
        <function-ref name="gett0" scoped="" ref="0x7fa72d50d590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa72d50fb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa72d510860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa72d50eab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa72d510d30"/>
        <function-ref name="stop" scoped="" ref="0x7fa72d50f220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CRYPTO" ref="0x7fa72d509aa0" loc="2:../../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <component-ref qname="CRYPTOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7fa72d509aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7fa72d509e20"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7fa72d506020"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7fa72d5061b0"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7fa72d506340"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7fa72d5064d0"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7fa72d506660"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7fa72d5067f0"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7fa72d506980"/>
        <function-ref name="lsb" scoped="" ref="0x7fa72d506b10"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7fa72d506ca0"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7fa72d506e30"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7fa72d505020"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7fa72d5051b0"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7fa72d505440"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7fa72d5055d0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7fa72d505760"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7fa72d5058f0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7fa72d505a80"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7fa72d505c10"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7fa72d505da0"/>
        <function-ref name="msb" scoped="" ref="0x7fa72d504020"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7fa72d5041b0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7fa72d504340"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7fa72d5044d0"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7fa72d504660"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7fa72d5049f0"/>
        <function-ref name="safer_done" scoped="" ref="0x7fa72d504b80"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7fa72d504d10"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7fa72d503020"/>
        <function-ref name="rc2_done" scoped="" ref="0x7fa72d5031b0"/>
        <function-ref name="rc5_done" scoped="" ref="0x7fa72d503340"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7fa72d5034d0"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7fa72d503660"/>
        <function-ref name="safer_setup" scoped="" ref="0x7fa72d5037f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CRYPTO" ref="0x7fa72d502680" loc="4:../../../../tos/platforms/shimmer2r/CRYPTOP.nc">
      <component-ref qname="CRYPTOP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7fa72d502680"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7fa72d502a00"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7fa72d502b90"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7fa72d502d20"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7fa72d4ff020"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7fa72d4ff1b0"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7fa72d4ff340"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7fa72d4ff4d0"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7fa72d4ff660"/>
        <function-ref name="lsb" scoped="" ref="0x7fa72d4ff7f0"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7fa72d4ff980"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7fa72d4ffb10"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7fa72d4ffca0"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7fa72d4ffe30"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7fa72d4fe120"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7fa72d4fe2b0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7fa72d4fe440"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7fa72d4fe5d0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7fa72d4fe760"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7fa72d4fe8f0"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7fa72d4fea80"/>
        <function-ref name="msb" scoped="" ref="0x7fa72d4fec10"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7fa72d4feda0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7fa72d4fd020"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7fa72d4fd1b0"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7fa72d4fd340"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7fa72d4fd6d0"/>
        <function-ref name="safer_done" scoped="" ref="0x7fa72d4fd860"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7fa72d4fd9f0"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7fa72d4fdb80"/>
        <function-ref name="rc2_done" scoped="" ref="0x7fa72d4fdd10"/>
        <function-ref name="rc5_done" scoped="" ref="0x7fa72d4fc020"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7fa72d4fc1b0"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7fa72d4fc340"/>
        <function-ref name="safer_setup" scoped="" ref="0x7fa72d4fc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d1a58e0" loc="38:../../../../tos/platforms/shimmer/chips/msp430/FastClockC.nc">
      <component-ref qname="FastClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d1a58e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d1a5c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastClock" ref="0x7fa72d1a2020" loc="39:../../../../tos/platforms/shimmer/chips/msp430/FastClockC.nc">
      <component-ref qname="FastClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastClock" scoped="" ref="0x7fa72d1a2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastClock"/>
      </instance>
      <interface-functions>
        <function-ref name="setSMCLK" scoped="" ref="0x7fa72d1a23a0"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d1a2530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa72d19f0c0" loc="52:../../../../tos/platforms/shimmer/chips/msp430/FastClockP.nc">
      <component-ref qname="FastClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa72d19f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa72d19f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastClock" ref="0x7fa72d19f6f0" loc="53:../../../../tos/platforms/shimmer/chips/msp430/FastClockP.nc">
      <component-ref qname="FastClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastClock" scoped="" ref="0x7fa72d19f6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastClock"/>
      </instance>
      <interface-functions>
        <function-ref name="setSMCLK" scoped="" ref="0x7fa72d19fa70"/>
        <function-ref name="disable" scoped="" ref="0x7fa72d19fc00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa72d19e020" loc="55:../../../../tos/platforms/shimmer/chips/msp430/FastClockP.nc">
      <component-ref qname="FastClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa72d19e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa72d19e3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa72d19e530"/>
        <function-ref name="led1On" scoped="" ref="0x7fa72d19e6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa72d19e850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa72d19e9e0"/>
        <function-ref name="get" scoped="" ref="0x7fa72d19eb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa72d19ed00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa72d19d4d0"/>
        <function-ref name="set" scoped="" ref="0x7fa72d19d020"/>
        <function-ref name="led0On" scoped="" ref="0x7fa72d19d1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa72d19d340"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fa72eb93860" loc="62:../../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fa72eb912b0" loc="60:../../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7fa72eb54b40" loc="48:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7fa72eb57de0" loc="43:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7fa72eb54420" loc="47:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7fa72eb57700" loc="42:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7fa72eb565a0" loc="45:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7fa72eb5a900" loc="40:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7fa72eb57020" loc="41:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7fa72eb56cc0" loc="46:../../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fa72eedc020" loc="62:../../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fa72f19d3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7fa72eb03500" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fa72eb03280" loc="55:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7fa72eb089c0" loc="42:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fa72eb4c5a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fa72eb4b020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fa72eb03d70" loc="57:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7fa72eb01c80" loc="59:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7fa72eb04b00" loc="47:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fa72eb014f0" loc="58:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fa72eb05190" loc="43:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7fa72eb05920" loc="44:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7fa72eb04390" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fa72eb4c5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fa72eb4b020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa72eb04110" loc="46:../../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fa72eb4c5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fa72eb4b020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fa72eaf5740" loc="44:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7fa72eaf3d80" loc="84:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7fa72eaf3b00" loc="84:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fa72eaf19d0" loc="91:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fa72eaf1750" loc="91:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fa72eaf3350" loc="73:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fa72eaf4a40" loc="68:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7fa72eaf4120" loc="56:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fa72eaf5e70" loc="56:../../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fa72eafe890" loc="40:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7fa72eafb2a0" loc="41:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fa72eafb020" loc="41:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7fa72eafbc80" loc="42:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fa72eafba00" loc="42:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7fa72eafa6a0" loc="43:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fa72eafa420" loc="43:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa72eafad90" loc="45:../../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fa72eb0b120" loc="52:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fa72eb0aa10" loc="55:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7fa72eb0a790" loc="55:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fa72eb0b850" loc="53:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa72eb0f350" loc="45:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fa72eb0a020" loc="54:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fa72eb0e270" loc="47:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fa72eb0d9e0" loc="51:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fa72eb0fae0" loc="46:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fa72eb0e980" loc="48:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fa72eb0d2e0" loc="50:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa72eb0d060" loc="50:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7fa72eb09450" loc="56:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7fa72eb091d0" loc="56:../../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fa72eacc1f0" loc="39:../../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fa72ec2e7f0" loc="85:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fa72ec2d020" loc="86:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fa72ec2e020" loc="79:../../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fa72f0b6810" loc="52:../../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fa72f25c020" loc="57:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fa72f25b020" loc="72:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fa72f25c790" loc="65:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fa72f250270" loc="67:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fa72f250ac0" loc="75:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa72e9b6020" loc="80:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa72e9b8690" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fa72e9b8a10" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e9b8d40" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fa72e9b1660" loc="135:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9b1060" loc="135:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e9b1390" loc="135:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fa72e9b0790" loc="123:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fa72e9b5390" loc="96:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9b5110" loc="96:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fa72e9b38b0" loc="110:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9b32d0" loc="110:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fa72e9b3620" loc="110:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fa72e9ac020" loc="65:../../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9bac60" loc="65:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fa72e9ab110" loc="78:../../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9ace10" loc="78:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fa72e9a7490" loc="126:../../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9a8e50" loc="126:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e9a71c0" loc="126:../../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fa72e9a8560" loc="106:../../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fa72e9aa5e0" loc="94:../../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9aa020" loc="94:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e9aa350" loc="94:../../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fa72e998d30" loc="177:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fa72ebb6930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e998ab0" loc="177:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fa72e9a1a10" loc="88:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e9a1790" loc="88:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fa72e9b9e50" loc="68:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fa72e9a3950" loc="78:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e9a36d0" loc="78:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fa72e99e3a0" loc="121:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e9a2d70" loc="121:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fa72e99e110" loc="121:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fa72e9a0e50" loc="103:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e9a0870" loc="103:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fa72e9a0bc0" loc="103:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa72ebb6d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fa72e99b810" loc="147:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e99b590" loc="147:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fa72e999b90" loc="162:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e9995e0" loc="162:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fa72e999900" loc="162:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fa72ebb6550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fa72e99d600" loc="136:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e99d380" loc="136:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fa72e9962f0" loc="187:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fa72ebb6930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa72e99acf0" loc="187:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fa72e996060" loc="187:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fa72ebb6930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fa72e995190" loc="195:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fa72ebb6930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fa72e992ad0" loc="59:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e992850" loc="59:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fa72e990cd0" loc="71:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e990a50" loc="71:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fa72e98e020" loc="85:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e991ce0" loc="85:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa72e9885e0" loc="75:../../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e988020" loc="75:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e988350" loc="75:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fa72e983bb0" loc="125:../../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e9835b0" loc="125:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e9838e0" loc="125:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fa72e985d20" loc="112:../../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fa72e986900" loc="89:../../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e986680" loc="89:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fa72e984e00" loc="100:../../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e984820" loc="100:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fa72e984b70" loc="100:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fa72e917ab0" loc="113:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa72e917830" loc="113:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fa72e915020" loc="138:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa72e916d30" loc="138:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fa72e91ad60" loc="104:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa72e916350" loc="130:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7fa72e911410" loc="78:../../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
              <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e914a80" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fa72e914dd0" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e911130" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fa72e907270" loc="62:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fa72e907a20" loc="68:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fa72e906270" loc="73:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fa72e9051f0" loc="84:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fa72e903940" loc="101:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa72e902190" loc="117:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fa72e906a00" loc="78:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fa72e902d00" loc="134:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fa72e902a80" loc="134:../../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fa72e908a60" loc="57:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fa72e9059d0" loc="90:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fa72e903190" loc="95:../../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fa72e899020" loc="31:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e89a960" loc="31:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fa72e89ace0" loc="31:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fa72e89c020" loc="15:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fa72e89a020" loc="23:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa72e89c8b0" loc="23:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa72eba6720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa72eba5d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fa72e89cc20" loc="23:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fa72e87ea40" loc="95:../../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa72e87b270" loc="105:../../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fa72e879070" loc="54:../../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fa72e87d8e0" loc="49:../../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fa72e88fb20" loc="56:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fa72e882020" loc="72:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fa72e881c20" loc="94:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e8819a0" loc="94:../../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fa72e8828a0" loc="79:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fa72e8836d0" loc="65:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e883450" loc="65:../../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fa72e8804b0" loc="100:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fa72e881190" loc="85:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fa72e88c0e0" loc="71:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fa72e88ca10" loc="81:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fa72e88e720" loc="62:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fa72e88e4a0" loc="62:../../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fa72e88b5c0" loc="91:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa72e88b340" loc="91:../../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fa72e8897a0" loc="62:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fa72e888400" loc="69:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e888180" loc="69:../../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fa72e886020" loc="80:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fa72e888c50" loc="80:../../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa72e753dd0" loc="48:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa72e753800" loc="48:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e753b40" loc="48:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fa72e74cac0" loc="79:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fa72e74c840" loc="79:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fa72e74b930" loc="90:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa72e74b360" loc="90:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e74b6a0" loc="90:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fa72e74d740" loc="65:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fa72e74a2c0" loc="99:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa72e749920" loc="99:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e749c60" loc="99:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fa72e74a020" loc="99:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fa72e74c070" loc="72:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fa72e74f720" loc="57:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa72e750db0" loc="57:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e74f130" loc="57:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fa72e74f480" loc="57:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa72e7295b0" loc="50:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fa72e729330" loc="50:../../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fa72e729df0" loc="59:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fa72e728cf0" loc="69:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fa72e728700" loc="69:../../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fa72e728a60" loc="69:../../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fa72e726b50" loc="79:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fa72e6d3ae0" loc="53:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fa72e6cc4e0" loc="61:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7fa72e6c9890" loc="39:../../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa72e6f2e70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fa72e6f12b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fa72e6d0350" loc="120:../../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fa72e6d1350" loc="97:../../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fa72e6d4980" loc="88:../../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fa72e6d1b40" loc="102:../../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fa72e6d0db0" loc="128:../../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fa72e6c1020" loc="65:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fa72e6c2750" loc="59:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7fa72e6bad70" loc="54:../../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e6baaf0" loc="54:../../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fa72e6ba350" loc="49:../../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fa72e691390" loc="213:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7fa72e69c020" loc="143:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7fa72e6acde0" loc="50:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e721c50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fa72e7204f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa72e6acb60" loc="50:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e721c50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fa72e7204f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7fa72e69f020" loc="123:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7fa72e6a62a0" loc="70:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e71cc30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fa72e71b4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa72e6a6020" loc="70:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e71cc30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fa72e71b4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fa72e696750" loc="180:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7fa72e693cf0" loc="197:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7fa72e6a8830" loc="65:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e71fb60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7fa72e71d390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7fa72e6a6a90" loc="75:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e71cc30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7fa72e71b4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7fa72e6a3830" loc="97:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7fa72e6a35b0" loc="97:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7fa72e6a4e40" loc="95:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7fa72e696020" loc="179:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7fa72e6a8040" loc="60:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e71fb60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fa72e71d390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa72e6a9da0" loc="60:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e71fb60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fa72e71d390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7fa72e6a5c80" loc="85:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fa72e696e80" loc="181:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7fa72e6a4690" loc="90:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7fa72e6a4410" loc="90:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7fa72e6a00e0" loc="113:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7fa72e6a0860" loc="118:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fa72e697070" loc="177:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7fa72e69a020" loc="163:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7fa72e69e020" loc="133:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fa72e6977b0" loc="178:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7fa72e69c800" loc="148:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7fa72e6955c0" loc="182:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fa72e6a1070" loc="103:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e72a330"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7fa72e722320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7fa72e695d60" loc="187:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7fa72e692bd0" loc="207:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7fa72e6a54d0" loc="80:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7fa72e6a5250" loc="80:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fa72e691d30" loc="224:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e691ab0" loc="224:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7fa72e6a9600" loc="55:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72e721c50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7fa72e7204f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7fa72e69f790" loc="128:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fa72e69b020" loc="153:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7fa72e699800" loc="174:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa72e6f2e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fa72e6f12b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fa72e699580" loc="174:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa72e6f2e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fa72e6f12b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7fa72e69aaf0" loc="168:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fa72e704020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fa72e704440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fa72e69a870" loc="168:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fa72e704020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fa72e704440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fa72e690730" loc="231:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7fa72e693570" loc="192:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7fa72e6a1820" loc="108:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7fa72e692480" loc="202:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7fa72e69b790" loc="158:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7fa72e69e800" loc="138:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72e68bce0" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72e68bce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fa72e687020" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e687020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fa72e687940" loc="64:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e687020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fa72e686a50" loc="76:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fa72e6861f0" loc="71:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fa72e6851f0" loc="82:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fa72e611930" loc="39:../../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fa72e5d4a50" loc="78:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fa72e5d31f0" loc="80:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7fa72e5cfb10" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa72e5cf890" loc="110:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fa72e5d52d0" loc="58:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fa72e5d10e0" loc="87:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7fa72e5ce490" loc="117:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fa72e5d3930" loc="85:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa72e5d42b0" loc="73:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7fa72e5d07c0" loc="99:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7fa72e5d5a70" loc="66:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fa72e5d7420" loc="48:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7fa72e5d1860" loc="92:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7fa72e5cf020" loc="101:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7fa72e5d0070" loc="94:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fa72e5d7b50" loc="53:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7fa72e5e8780" loc="80:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7fa72e5fbc90" loc="31:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7fa72e5ee020" loc="62:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa72e5efca0" loc="62:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7fa72e602390" loc="11:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7fa72e5eb7a0" loc="71:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7fa72e5f3020" loc="49:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7fa72e5fcda0" loc="28:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7fa72e5f9b70" loc="34:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fa72e5fdd40" loc="25:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7fa72e5fdac0" loc="25:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7fa72e5fe270" loc="21:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7fa72e5f7900" loc="41:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7fa72e5ed020" loc="66:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7fa72e5e8020" loc="78:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7fa72e5ef560" loc="61:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7fa72e5e31f0" loc="91:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7fa72e5df880" loc="100:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7fa72e601270" loc="14:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7fa72e5f7190" loc="38:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7fa72e5f6a90" loc="45:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7fa72e5fc650" loc="27:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7fa72e604190" loc="7:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7fa72e5f0d40" loc="58:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa72e5f0ac0" loc="58:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7fa72e607a00" loc="6:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7fa72e5eb020" loc="69:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7fa72e5e6020" loc="81:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7fa72e5e19a0" loc="94:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7fa72e5df120" loc="97:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7fa72e5ea790" loc="74:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7fa72e5e6750" loc="83:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7fa72e5ee7b0" loc="65:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7fa72e5e41f0" loc="87:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7fa72e601990" loc="15:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7fa72e5f21f0" loc="53:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7fa72e5e5630" loc="86:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7fa72e5e9790" loc="77:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7fa72e5f4760" loc="46:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7fa72e5f44e0" loc="46:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7fa72e5e0190" loc="95:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7fa72e5f0390" loc="57:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7fa72e5ea020" loc="72:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7fa72e604c10" loc="8:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa72e6deb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fa72e6dc020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fa72e604990" loc="8:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa72e6deb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fa72e6dc020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7fa72e5f8a00" loc="37:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7fa72e600a80" loc="19:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa72e600800" loc="19:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7fa72e5f62a0" loc="42:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e5f6020" loc="42:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7fa72e5e49c0" loc="90:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7fa72e5fd3b0" loc="24:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7fa72e600120" loc="18:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7fa72e5f2bb0" loc="54:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7fa72e5f2930" loc="54:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7fa72e602ac0" loc="12:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7fa72e5e6e70" loc="84:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7fa72e5e9020" loc="75:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7fa72e5ed790" loc="68:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7fa72e5f39f0" loc="50:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7fa72e5f3770" loc="50:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7fa72e5f82b0" loc="35:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7fa72e5fb530" loc="29:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7fa72e5e0900" loc="96:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7fa72e5febf0" loc="22:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa72e5fe970" loc="22:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7fa72e5e39b0" loc="92:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7fa72e5f9420" loc="32:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7fa72e5e11f0" loc="93:../../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fa72e30b730" loc="44:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fa72e30be60" loc="45:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fa72e30d880" loc="42:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fa72e30acf0" loc="47:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa72e30b020" loc="43:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fa72e30a5b0" loc="46:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fa72e310a90" loc="40:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fa72e30d190" loc="41:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fa72e2b0020" loc="90:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fa72e2b0880" loc="98:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fa72e27be00" loc="56:../../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7fa72e279020" loc="73:../../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fa72e27b570" loc="46:../../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fa72e27a6d0" loc="65:../../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fa72e279950" loc="81:../../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fa72e26c020" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa72e274090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fa72e26ed20" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa72e274090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fa72e26f020" loc="53:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fa72e26fb20" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa72e274090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fa72e26f8a0" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa72e274090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fa72e26e470" loc="70:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fa72e274090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7fa72e103ad0" loc="43:../../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa72e103ad0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7fa72e0fe270" loc="80:../../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa72e103ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7fa72e0fccb0" loc="97:../../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa72e103ad0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7fa72e0fca30" loc="97:../../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa72e103ad0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7fa72fcecc30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7fa72fcecc30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7fa72e0fac70" loc="108:../../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa72e103ad0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fa72e0fa9f0" loc="108:../../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7fa72e100b20" loc="57:../../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7fa72e0ffad0" loc="72:../../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fa72e0fee50" loc="88:../../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa72e103ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7fa72e1003b0" loc="50:../../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7fa72e0ff2d0" loc="65:../../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7fa72e0d9dd0" loc="49:../../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7fa72e0d9b50" loc="49:../../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="shimmerAnalogSetup" loc="43:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
      <function command="" provided="0" name="addAccelInputs" ref="0x7fa72e04e2b0" loc="46:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerConversion" ref="0x7fa72e048190" loc="79:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNumberOfChannels" ref="0x7fa72e046070" loc="83:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addECGInputs" ref="0x7fa72e04d120" loc="52:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addAnExInput" ref="0x7fa72e04a110" loc="64:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7fa72e04ce30" loc="64:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fa72e049020" loc="70:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addEMGInput" ref="0x7fa72e04c720" loc="61:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addStrainGaugeInputs" ref="0x7fa72e04a870" loc="67:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addGSRInput" ref="0x7fa72e04c020" loc="58:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="finishADCSetup" ref="0x7fa72e049a00" loc="77:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7fa72e049780" loc="77:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="addUVInputs" ref="0x7fa72e04d820" loc="55:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="addGyroInputs" ref="0x7fa72e04e9d0" loc="49:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7fa72e048890" loc="81:../../../../tos/platforms/shimmer/shimmerAnalogSetup.nc">
        <interfacedef-ref qname="shimmerAnalogSetup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72e0365b0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72e0365b0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fa72e0367f0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fa72e031390" loc="109:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa72e0333b0" loc="78:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fa72e0329d0" loc="103:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fa72e032400" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fa72e032740" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fa72e033b90" loc="88:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fa72e031b80" loc="116:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fa72e034390" loc="66:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fa72e034110" loc="66:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa72e0367f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa72e034bc0" loc="73:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GyroBoard" loc="39:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoard.nc">
      <function command="" provided="0" name="autoZero" ref="0x7fa72e071bd0" loc="47:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoard.nc">
        <interfacedef-ref qname="GyroBoard"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="buttonPressed" ref="0x7fa72e06f350" loc="50:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoard.nc">
        <interfacedef-ref qname="GyroBoard"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="ledOn" ref="0x7fa72e074730" loc="43:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoard.nc">
        <interfacedef-ref qname="GyroBoard"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="ledOff" ref="0x7fa72e074de0" loc="44:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoard.nc">
        <interfacedef-ref qname="GyroBoard"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="ledToggle" ref="0x7fa72e071500" loc="45:../../../../tos/platforms/shimmer2/chips/gyro/GyroBoard.nc">
        <interfacedef-ref qname="GyroBoard"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BtCommandParser" loc="35:BtCommandParser.nc">
      <function command="" provided="0" name="handleByte" ref="0x7fa72dfea4d0" loc="36:BtCommandParser.nc">
        <interfacedef-ref qname="BtCommandParser"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfea250" loc="36:BtCommandParser.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="activate" ref="0x7fa72dfe9630" loc="38:BtCommandParser.nc">
        <interfacedef-ref qname="BtCommandParser"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-qualified const="">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="action" ref="0x7fa72dfeac10" loc="38:BtCommandParser.nc">
            <type-qualified const="">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </variable>
          <variable name="arg_size" ref="0x7fa72dfe9020" loc="38:BtCommandParser.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="arg" ref="0x7fa72dfe9390" loc="38:BtCommandParser.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Notify" loc="52:../../../../tos/interfaces/Notify.nc">
      <documentation loc="33:../../../../tos/interfaces/Notify.nc">
        <short>&#10; The Notify interface is intended for delivery of values from&#10; self-triggered devices, at relatively low rates.</short>
        <long>&#10; The Notify interface is intended for delivery of values from&#10; self-triggered devices, at relatively low rates. For example, a&#10; driver for a motion detector or a switch might provide this&#10; interface. The type of the value is given as a template&#10; argument. Generally, these values are backed by memory or&#10; computation. Because no error code is included, both calls must be&#10; guaranteed to succeed. This interface should be used when a single&#10; logical unit supports both getting and setting.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be stored&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7fa72dfdd070" loc="52:../../../../tos/interfaces/Notify.nc">
          <interfacedef-ref qname="Notify"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fa72dfdd070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="disable" ref="0x7fa72dfdc190" loc="67:../../../../tos/interfaces/Notify.nc">
        <documentation loc="61:../../../../tos/interfaces/Notify.nc">
          <short>&#10; Disables delivery of notifications from the device to the calling&#10; generic client component.</short>
          <long>&#10; Disables delivery of notifications from the device to the calling&#10; generic client component.&#10;&#10; @return SUCCESS if notifications were disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Notify"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7fa72dfdd940" loc="59:../../../../tos/interfaces/Notify.nc">
        <documentation loc="53:../../../../tos/interfaces/Notify.nc">
          <short>&#10; Enables delivery of notifications from the device to the calling&#10; generic client component.</short>
          <long>&#10; Enables delivery of notifications from the device to the calling&#10; generic client component.&#10;&#10; @return SUCCESS if notifications were enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Notify"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="notify" ref="0x7fa72dfdcba0" loc="74:../../../../tos/interfaces/Notify.nc">
        <documentation loc="69:../../../../tos/interfaces/Notify.nc">
          <short>&#10; Signals the arrival of a new value from the device.</short>
          <long>&#10; Signals the arrival of a new value from the device.&#10;&#10; @param val the value arriving from the device&#10;</long>
        </documentation>
        <interfacedef-ref qname="Notify"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fa72dfdd070"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fa72dfdc920" loc="74:../../../../tos/interfaces/Notify.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7fa72dfdd070"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Magnetometer" loc="37:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
      <function event="" provided="0" name="readDone" ref="0x7fa72e0658c0" loc="69:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e0652d0" loc="69:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="success" ref="0x7fa72e065630" loc="69:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIdle" ref="0x7fa72e06cd50" loc="49:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableBus" ref="0x7fa72e073bb0" loc="39:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="convertRegistersToData" ref="0x7fa72e067b50" loc="66:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="int" size="I:2" alignment="I:2">
                <typename><typedef-ref name="int16_t" ref="0x7fa72fce7580"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="readBuf" ref="0x7fa72e067540" loc="66:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data" ref="0x7fa72e0678c0" loc="66:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="int" size="I:2" alignment="I:2">
                <typename><typedef-ref name="int16_t" ref="0x7fa72fce7580"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="readHeading" ref="0x7fa72e068610" loc="60:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="readBuf" ref="0x7fa72e068390" loc="60:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7fa72e064390" loc="71:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7fa72e064110" loc="71:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="goToSleep" ref="0x7fa72e06b4c0" loc="50:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selfTest" ref="0x7fa72e068d00" loc="63:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runSingleConversion" ref="0x7fa72e06bc40" loc="52:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="readData" ref="0x7fa72e069b60" loc="57:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runContinuousConversion" ref="0x7fa72e069420" loc="54:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOutputRate" ref="0x7fa72e06dc80" loc="44:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="rate" ref="0x7fa72e06da00" loc="44:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGain" ref="0x7fa72e06c640" loc="47:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="gain" ref="0x7fa72e06c3c0" loc="47:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableBus" ref="0x7fa72e06d2b0" loc="41:../../../../tos/platforms/shimmer2/chips/hmc5843/Magnetometer.nc">
        <interfacedef-ref qname="Magnetometer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="InternalFlash" loc="43:../../../../tos/interfaces/InternalFlash.nc">
      <documentation loc="36:../../../../tos/interfaces/InternalFlash.nc">
        <short>&#10; A generic interface to read from and write to the internal flash of&#10; a microcontroller.</short>
        <long>&#10; A generic interface to read from and write to the internal flash of&#10; a microcontroller.&#10;&#10; @author Jonathan Hui &#60;jwhui@cs.berkeley.edu>&#10; @author Prabal Dutta &#60;prabal@cs.berkeley.edu> (Port to T2)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7fa72dfe7480" loc="56:../../../../tos/interfaces/InternalFlash.nc">
        <documentation loc="45:../../../../tos/interfaces/InternalFlash.nc">
          <short>&#10; Read &#60;code>size&#60;/code> bytes starting from &#60;code>addr&#60;/code> and&#10; return them in &#60;code>buf&#60;/code>.</short>
          <long>&#10; Read &#60;code>size&#60;/code> bytes starting from &#60;code>addr&#60;/code> and&#10; return them in &#60;code>buf&#60;/code>.&#10;&#10; @param   addr A pointer to the starting address from which to read.&#10; @param   'void* COUNT(size) buf'  A pointer to the buffer into which read bytes are&#10;               placed.&#10; @param   size The number of bytes to read.&#10; @return  SUCCESS if the bytes were successfully read.&#10;          FAIL if the call could not be completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="InternalFlash"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa72e00db40" loc="56:../../../../tos/interfaces/InternalFlash.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="buf" ref="0x7fa72e00de60" loc="56:../../../../tos/interfaces/InternalFlash.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72dfe71e0" loc="56:../../../../tos/interfaces/InternalFlash.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fa72dfe6d40" loc="68:../../../../tos/interfaces/InternalFlash.nc">
        <documentation loc="58:../../../../tos/interfaces/InternalFlash.nc">
          <short>&#10; Write &#60;code>size&#60;/code> bytes from &#60;code>buf&#60;/code> into internal&#10; flash starting at &#60;code>addr&#60;/code>.</short>
          <long>&#10; Write &#60;code>size&#60;/code> bytes from &#60;code>buf&#60;/code> into internal&#10; flash starting at &#60;code>addr&#60;/code>.&#10;&#10; @param   addr A pointer to the starting address to which to write.&#10; @param   'void* COUNT(size) buf'  A pointer to the buffer from which bytes are read.&#10; @param   size The number of bytes to write.&#10; @return  SUCCESS if the bytes were successfully written.&#10;          FAIL if the call could not be completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="InternalFlash"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa72dfe6430" loc="68:../../../../tos/interfaces/InternalFlash.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="buf" ref="0x7fa72dfe6750" loc="68:../../../../tos/interfaces/InternalFlash.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72dfe6aa0" loc="68:../../../../tos/interfaces/InternalFlash.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DigitalHeartRate" loc="39:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRate.nc">
      <function event="" provided="0" name="beat" ref="0x7fa72e05d3f0" loc="43:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRate.nc">
        <interfacedef-ref qname="DigitalHeartRate"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time_32k" ref="0x7fa72e05d170" loc="43:../../../../tos/platforms/shimmer/chips/rmcm01/DigitalHeartRate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72e026350" loc="53:../../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72e026350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fa72e026c70" loc="61:../../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="37:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="33:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fa72dfe2ae0" loc="52:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="49:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa72dfdf670" loc="72:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7fa72dfe2350" loc="47:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="44:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7fa72dfe0d90" loc="67:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="61:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7fa72dfe0b10" loc="67:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7fa72dfebb20" loc="42:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="39:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7fa72dfe0350" loc="59:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="54:../../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port.</short>
          <long> &#10; Gets the current value of the input voltage of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430DmaChannel" loc="41:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
      <function command="" provided="0" name="stopTransfer" ref="0x7fa72dfeebf0" loc="102:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="99:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Stop a DMA transfer in progress&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="repeatTransfer" ref="0x7fa72dfefb20" loc="91:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="86:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Repeat a DMA transfer using previous settings but new pointers&#10; and transfer size.</short>
          <long>&#10; Repeat a DMA transfer using previous settings but new pointers&#10; and transfer size.  Automatically starts the transfer (sets the&#10; enable bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src_addr" ref="0x7fa72dfef1b0" loc="91:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dst_addr" ref="0x7fa72dfef510" loc="91:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72dfef880" loc="92:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setupTransfer" ref="0x7fa72dff3420" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="43:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Setup a transfer using explicit argument (most robust and simple&#10; mechanism and recommended for novice users)&#10;&#10; See MSP430DMA.h for parameter options&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e001e20"/>
              <typename><typedef-ref name="dma_transfer_mode_t" ref="0x7fa72dfffb30"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e009480"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7fa72e0051d0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffb960"/>
              <typename><typedef-ref name="dma_level_t" ref="0x7fa72dffa3c0"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffdc60"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7fa72dffb6b0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffdc60"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7fa72dffb6b0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffeb20"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7fa72dffd9d0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffeb20"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7fa72dffd9d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="transfer_mode" ref="0x7fa72dff5020" loc="49:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e001e20"/>
              <typename><typedef-ref name="dma_transfer_mode_t" ref="0x7fa72dfffb30"/></typename>
            </type-tag>
          </variable>
          <variable name="trigger" ref="0x7fa72dff53e0" loc="50:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e009480"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7fa72e0051d0"/></typename>
            </type-tag>
          </variable>
          <variable name="level" ref="0x7fa72dff5770" loc="51:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffb960"/>
              <typename><typedef-ref name="dma_level_t" ref="0x7fa72dffa3c0"/></typename>
            </type-tag>
          </variable>
          <variable name="src_addr" ref="0x7fa72dff5af0" loc="52:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dst_addr" ref="0x7fa72dff5e70" loc="53:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72dff4210" loc="54:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="src_byte" ref="0x7fa72dff45c0" loc="55:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffdc60"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7fa72dffb6b0"/></typename>
            </type-tag>
          </variable>
          <variable name="dst_byte" ref="0x7fa72dff4970" loc="56:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffdc60"/>
              <typename><typedef-ref name="dma_byte_t" ref="0x7fa72dffb6b0"/></typename>
            </type-tag>
          </variable>
          <variable name="src_incr" ref="0x7fa72dff4d20" loc="57:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffeb20"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7fa72dffd9d0"/></typename>
            </type-tag>
          </variable>
          <variable name="dst_incr" ref="0x7fa72dff3110" loc="58:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72dffeb20"/>
              <typename><typedef-ref name="dma_incr_t" ref="0x7fa72dffd9d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startTransfer" ref="0x7fa72dff0910" loc="84:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="80:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Enable the DMA module.</short>
          <long>&#10; Enable the DMA module.  Equivalent to setting the DMA enable bit.&#10; This function does not force a transfer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setupTransferRaw" ref="0x7fa72dff2c40" loc="77:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="60:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Raw interface for setting up a DMA transfer.</short>
          <long>&#10; Raw interface for setting up a DMA transfer.  This function is&#10; intended to provide as much raw performance as possible but&#10; sacrifices type checking in the process.  Recommended ONLY for&#10; advanced users that have very intricate knowledge of the MSP430&#10; DMA module described in the user's guide.&#10;&#10; @param state The control register value, as specified by &#10;              dma_control_state_t in MSP430DMA.h&#10; @param trigger The trigger for the DMA transfer.  Should be one&#10;                of the options from dma_trigger_t in MSP430DMA.h&#10; @param src Pointer to the source address&#10; @param dest Pointer to the destination address&#10; @param size Size of the DMA transfer&#10;&#10; See MSP430DMA.h for parameter options&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x7fa72dff3c40" loc="77:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="trigger" ref="0x7fa72dff2020" loc="77:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="src" ref="0x7fa72dff2360" loc="78:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7fa72dff2690" loc="78:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72dff2980" loc="78:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="transferDone" ref="0x7fa72dfed610" loc="107:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="104:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Notification that the transfer has completed&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7fa72dfed390" loc="107:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="softwareTrigger" ref="0x7fa72dfee420" loc="97:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
        <documentation loc="94:../../../../tos/chips/msp430/dma/Msp430DmaChannel.nc">
          <short>&#10; Trigger a DMA transfer using software&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastClock" loc="37:../../../../tos/platforms/shimmer/chips/msp430/FastClock.nc">
      <function command="" provided="0" name="setSMCLK" ref="0x7fa72df97b90" loc="41:../../../../tos/platforms/shimmer/chips/msp430/FastClock.nc">
        <interfacedef-ref qname="FastClock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mhz" ref="0x7fa72df97910" loc="41:../../../../tos/platforms/shimmer/chips/msp430/FastClock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7fa72df97270" loc="39:../../../../tos/platforms/shimmer/chips/msp430/FastClock.nc">
        <interfacedef-ref qname="FastClock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Gsr" loc="35:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
      <function command="" provided="0" name="controlRange" ref="0x7fa72e0552b0" loc="66:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
        <documentation loc="57:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
          <short>&#10; Determines whether to change the currently active internal resistor based &#10; on the ADC value, and if necessary change the internal resistor to a new&#10; value&#10;&#10; </short>
          <long>&#10; Determines whether to change the currently active internal resistor based &#10; on the ADC value, and if necessary change the internal resistor to a new&#10; value&#10;&#10; @param ADC_val: the ADC value to be used in the calculation&#10; @param active_resistor: the currently active resistor on the GSR board &#10; @return the active internal resistor &#10;</long>
        </documentation>
        <interfacedef-ref qname="Gsr"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ADC_val" ref="0x7fa72e056b70" loc="66:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="active_resistor" ref="0x7fa72e055020" loc="66:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="smoothSample" ref="0x7fa72e051020" loc="90:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
        <documentation loc="83:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
          <short>&#10; Smooths the GSR values&#10;&#10; </short>
          <long>&#10; Smooths the GSR values&#10;&#10; @param resistance: the current resistance value to smoothed &#10; @param active_resistor: the currently active resistor on the GSR board &#10; @return the smoothed resistance. Returns 0xFFFFFFFF if transient sample&#10;</long>
        </documentation>
        <interfacedef-ref qname="Gsr"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="resistance" ref="0x7fa72e053920" loc="90:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
          <variable name="active_resistor" ref="0x7fa72e053cd0" loc="90:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initSmoothing" ref="0x7fa72e054020" loc="73:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
        <documentation loc="68:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
          <short>&#10; Initializes the smoothing state &#10;&#10; </short>
          <long>&#10; Initializes the smoothing state &#10;&#10; @param active_resistor: the currently active resistor on the GSR board &#10;</long>
        </documentation>
        <interfacedef-ref qname="Gsr"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="active_resistor" ref="0x7fa72e055c20" loc="73:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="calcResistance" ref="0x7fa72e0562b0" loc="55:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
        <documentation loc="48:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
          <short>&#10; Calculates resistance from a raw ADC value using linear fit to conductance&#10;&#10; </short>
          <long>&#10; Calculates resistance from a raw ADC value using linear fit to conductance&#10;&#10; @param ADC_val: the ADC value to be used in the calculation&#10; @param active_resistor: the currently active resistor on the GSR board &#10; @return the calculated resistance&#10;</long>
        </documentation>
        <interfacedef-ref qname="Gsr"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ADC_val" ref="0x7fa72e058bb0" loc="55:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="active_resistor" ref="0x7fa72e056020" loc="55:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRange" ref="0x7fa72e0582e0" loc="46:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
        <documentation loc="37:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
          <short>&#10; Adjusts the GSR's range by selecting the which internal resistor is used&#10;&#10; </short>
          <long>&#10; Adjusts the GSR's range by selecting the which internal resistor is used&#10;&#10; @param range: select the resistor to use&#10;               0:  40 kohm&#10;               1: 287 kohm&#10;               2: 1.0 Mohm&#10;               3: 3.3 Mohm &#10;</long>
        </documentation>
        <interfacedef-ref qname="Gsr"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="range" ref="0x7fa72e058060" loc="46:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="smoothTransition" ref="0x7fa72e053020" loc="81:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
        <documentation loc="75:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
          <short> &#10; Smooths ADC values during autorange transition settling time.</short>
          <long> &#10; Smooths ADC values during autorange transition settling time.&#10; @param active_resistor: currently selected HW resistor&#10; @param sampling_period: sampling period of shimmer. Determines number of transient samples&#10; @return true if transient and false otherwise.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="Gsr"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dummy_active_resistor" ref="0x7fa72e054900" loc="81:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="sampling_period" ref="0x7fa72e054cc0" loc="81:../../../../tos/platforms/shimmer/chips/gsr/Gsr.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StrainGauge" loc="35:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGauge.nc">
      <function command="" provided="0" name="powerOn" ref="0x7fa72e06eb60" loc="36:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGauge.nc">
        <interfacedef-ref qname="StrainGauge"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="powerOff" ref="0x7fa72e061270" loc="38:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGauge.nc">
        <interfacedef-ref qname="StrainGauge"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="ledOn" ref="0x7fa72e061940" loc="41:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGauge.nc">
        <interfacedef-ref qname="StrainGauge"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="ledOff" ref="0x7fa72e05f020" loc="42:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGauge.nc">
        <interfacedef-ref qname="StrainGauge"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="ledToggle" ref="0x7fa72e05f6f0" loc="43:../../../../tos/platforms/shimmer2/chips/straingauge/StrainGauge.nc">
        <interfacedef-ref qname="StrainGauge"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa72e04f6b0" loc="53:../../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa72e04f6b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fa72e03d420" loc="136:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa72e042d60" loc="83:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fa72e03fb10" loc="114:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fa72e03f540" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fa72e03f880" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fa72e041d60" loc="98:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fa72e03c460" loc="151:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fa72e03dbb0" loc="144:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fa72e041570" loc="92:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fa72e0432a0" loc="64:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fa72e043020" loc="64:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fa72e03eaa0" loc="129:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fa72e03e4d0" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fa72e03e810" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fa72e043d60" loc="73:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fa72e043ae0" loc="73:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa72e042650" loc="78:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Bluetooth" loc="47:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
      <documentation loc="34:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <short>&#10; </short>
        <long>&#10; @author Steve Ayer&#10; @author Adrian Burns&#10; @date February, 2007&#10;&#10; @author Mike Healy&#10; @date April 20, 2009 - ported to TinyOS 2.x &#10;</long>
      </documentation>
      <function command="" provided="0" name="resetDefaults" ref="0x7fa72e014350" loc="90:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBaudrate" ref="0x7fa72e017810" loc="84:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="new_baud" ref="0x7fa72e017590" loc="84:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDiscoverable" ref="0x7fa72e01f700" loc="66:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="disc" ref="0x7fa72e01f480" loc="66:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="commandModeEnded" ref="0x7fa72e012020" loc="95:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataAvailable" ref="0x7fa72e0129e0" loc="103:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72e012760" loc="103:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="connectionClosed" ref="0x7fa72e013740" loc="94:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reason" ref="0x7fa72e0134c0" loc="94:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setName" ref="0x7fa72e01c350" loc="69:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7fa72e01c0d0" loc="69:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setServiceName" ref="0x7fa72e01a020" loc="72:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7fa72e01bcc0" loc="72:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRawBaudrate" ref="0x7fa72e018e40" loc="78:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="rate_factor" ref="0x7fa72e018bc0" loc="78:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPagingTime" ref="0x7fa72e0162a0" loc="88:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="hexval_time" ref="0x7fa72e016020" loc="88:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7fa72e0100e0" loc="104:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInquiryTime" ref="0x7fa72e016c30" loc="89:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="hexval_time" ref="0x7fa72e0169b0" loc="89:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="connect" ref="0x7fa72e0203d0" loc="61:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa72e020150" loc="61:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="connectionMade" ref="0x7fa72e014d20" loc="93:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="status" ref="0x7fa72e014aa0" loc="93:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAuthentication" ref="0x7fa72e01ea10" loc="68:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="auth" ref="0x7fa72e01e790" loc="68:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setServiceClass" ref="0x7fa72e01b5f0" loc="71:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="class" ref="0x7fa72e01b370" loc="71:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fa72e023b00" loc="51:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa72e023540" loc="51:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa72e023870" loc="51:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="discoverDevices" ref="0x7fa72e0229c0" loc="58:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRadioMode" ref="0x7fa72e020d40" loc="64:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa72e020ac0" loc="64:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPIN" ref="0x7fa72e01cc50" loc="70:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7fa72e01c9d0" loc="70:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEncryption" ref="0x7fa72e01e0b0" loc="67:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enc" ref="0x7fa72e01fdb0" loc="67:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRemoteConfig" ref="0x7fa72e018490" loc="74:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="disableConfig" ref="0x7fa72e018210" loc="74:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDeviceClass" ref="0x7fa72e01a980" loc="73:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="class" ref="0x7fa72e01a700" loc="73:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disconnect" ref="0x7fa72e022270" loc="54:../../../../tos/platforms/shimmer/chips/bluetooth/Bluetooth.nc">
        <interfacedef-ref qname="Bluetooth"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CRYPTO" loc="2:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
      <function command="" provided="0" name="xtea_decrypt" ref="0x7fa72dfc32c0" loc="13:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7fa72dfc4820" loc="13:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7fa72dfc4b40" loc="13:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfc3020" loc="13:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_decrypt" ref="0x7fa72dfa9dc0" loc="37:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7fa72dfa9420" loc="37:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7fa72dfa9780" loc="37:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfa9b20" loc="37:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_encrypt" ref="0x7fa72dfa5e50" loc="41:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7fa72dfa5460" loc="41:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7fa72dfa57c0" loc="41:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfa5bb0" loc="41:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_encrypt" ref="0x7fa72dfc0800" loc="16:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7fa72dfc2e20" loc="16:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7fa72dfc01b0" loc="16:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfc0560" loc="16:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_decrypt" ref="0x7fa72dfb4cc0" loc="27:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block_in" ref="0x7fa72dfb42f0" loc="27:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="block_out" ref="0x7fa72dfb4690" loc="27:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfb4a20" loc="27:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_setup" ref="0x7fa72dfa7cb0" loc="40:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7fa72dfa7020" loc="40:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7fa72dfa7320" loc="40:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7fa72dfa7650" loc="40:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7fa72dfa7a00" loc="40:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_done" ref="0x7fa72dfa39f0" loc="43:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7fa72dfa3770" loc="43:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_encrypt" ref="0x7fa72dfb0a80" loc="31:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7fa72dfb0110" loc="31:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7fa72dfb0430" loc="31:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ctx" ref="0x7fa72dfb07e0" loc="31:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="lsb" ref="0x7fa72dfa1350" loc="45:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfa10d0" loc="45:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_setup" ref="0x7fa72dfac9a0" loc="35:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7fa72dfadbb0" loc="35:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7fa72dfac020" loc="35:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7fa72dfac350" loc="35:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7fa72dfac6f0" loc="35:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc4_encrypt" ref="0x7fa72dfc7360" loc="9:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfc8d20" loc="9:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7fa72dfc70d0" loc="9:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_decrypt" ref="0x7fa72dfafac0" loc="32:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7fa72dfaf150" loc="32:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7fa72dfaf470" loc="32:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ctx" ref="0x7fa72dfaf820" loc="32:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_decrypt" ref="0x7fa72dfb9b10" loc="22:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7fa72dfb9150" loc="22:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7fa72dfb94b0" loc="22:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfb9870" loc="22:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_setup" ref="0x7fa72dfb1a40" loc="30:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/>
                <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7fa72dfb3d20" loc="30:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="keysize_b" ref="0x7fa72dfb10d0" loc="30:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="rounds" ref="0x7fa72dfb1420" loc="30:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="ctx" ref="0x7fa72dfb1790" loc="30:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/>
                <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_done" ref="0x7fa72dfa8790" loc="38:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7fa72dfa8510" loc="38:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xxtea_encrypt" ref="0x7fa72dfc9780" loc="6:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfc9180" loc="6:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7fa72dfc94f0" loc="6:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_setup" ref="0x7fa72dfbc7b0" loc="20:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/>
                <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7fa72dfbdae0" loc="20:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7fa72dfbdde0" loc="20:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7fa72dfbc180" loc="20:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7fa72dfbc500" loc="20:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/>
                <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tea_decrypt" ref="0x7fa72dfcdd50" loc="3:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7fa72dfcd790" loc="3:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7fa72dfcdac0" loc="3:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tea_encrypt" ref="0x7fa72dfcba20" loc="4:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7fa72dfcb460" loc="4:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7fa72dfcb790" loc="4:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_done" ref="0x7fa72dfbd3d0" loc="18:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7fa72dfbd150" loc="18:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="msb" ref="0x7fa72dfa1c50" loc="46:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfa19d0" loc="46:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_decrypt" ref="0x7fa72dfbf9d0" loc="17:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7fa72dfbf020" loc="17:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7fa72dfbf380" loc="17:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfbf730" loc="17:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xxtea_decrypt" ref="0x7fa72dfc8620" loc="7:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfc8020" loc="7:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7fa72dfc8390" loc="7:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_encrypt" ref="0x7fa72dfb5b20" loc="26:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block_in" ref="0x7fa72dfb5150" loc="26:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="block_out" ref="0x7fa72dfb54f0" loc="26:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfb5880" loc="26:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_setup" ref="0x7fa72dfc26c0" loc="15:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7fa72dfc3a00" loc="15:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7fa72dfc3d00" loc="15:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7fa72dfc2060" loc="15:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7fa72dfc2410" loc="15:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7fa72dfd11a0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7fa72dfd1870"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_decrypt" ref="0x7fa72dfa3020" loc="42:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7fa72dfa45f0" loc="42:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7fa72dfa4950" loc="42:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfa4d40" loc="42:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7fa72dfd5a50"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7fa72dfd7eb0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_done" ref="0x7fa72dfb3690" loc="28:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7fa72dfb3410" loc="28:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xtea_encrypt" ref="0x7fa72dfc4130" loc="12:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7fa72dfc67b0" loc="12:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7fa72dfc6ad0" loc="12:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfc6e60" loc="12:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7fa72fce6920"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_encrypt" ref="0x7fa72dfbb9e0" loc="21:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7fa72dfbb020" loc="21:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7fa72dfbb380" loc="21:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfbb740" loc="21:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_done" ref="0x7fa72dfb8510" loc="23:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/>
                <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7fa72dfb8290" loc="23:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7fa72dfd7490"/>
                <typename><typedef-ref name="rc2_key" ref="0x7fa72dfd7b00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_done" ref="0x7fa72dfad480" loc="33:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/>
                <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ctx" ref="0x7fa72dfad200" loc="33:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7fa72dfd3500"/>
                <typename><typedef-ref name="rc5_key" ref="0x7fa72dfd3d50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc4_decrypt" ref="0x7fa72dfc60c0" loc="10:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa72dfc7a60" loc="10:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7fa72dfc7dd0" loc="10:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_encrypt" ref="0x7fa72dfabcb0" loc="36:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7fa72dfab310" loc="36:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7fa72dfab670" loc="36:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7fa72dfaba10" loc="36:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7fa72dfd05a0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7fa72dfcd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_setup" ref="0x7fa72dfb7980" loc="25:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7fa72dfb8c30" loc="25:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7fa72dfb7020" loc="25:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="numrounds" ref="0x7fa72dfb7340" loc="25:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7fa72dfb76d0" loc="25:../../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7fa72dfd1c00"/>
                <typename><typedef-ref name="safer_key" ref="0x7fa72dfd0200"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Mma_Accel" loc="40:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
      <function command="" provided="0" name="setSensitivity" ref="0x7fa72e05bb80" loc="54:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
        <documentation loc="49:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
          <short>&#10; Sets the sensitivity (gain) of the sensors.</short>
          <long>&#10; Sets the sensitivity (gain) of the sensors.&#10;&#10; @param sensitivity the sensitivity (gain)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Mma_Accel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sensitivity" ref="0x7fa72e05b900" loc="54:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wake" ref="0x7fa72e05b110" loc="47:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
        <documentation loc="42:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
          <short>&#10; Turns the accelerometer on or off.</short>
          <long>&#10; Turns the accelerometer on or off.&#10;&#10; @param wakeup if &#60;code>TRUE&#60;/code> turns it on; if &#60;code>FALSE&#60;/code> turns it off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Mma_Accel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="wakeup" ref="0x7fa72e062e10" loc="47:../../../../tos/platforms/shimmer/chips/mma7260/Mma_Accel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fa72d9ed7b0" loc="95:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa72d9ec030" loc="105:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430DmaControl" loc="40:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFlags" ref="0x7fa72d936a40" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
        <interfacedef-ref qname="Msp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enable_nmi" ref="0x7fa72d9360d0" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
          <variable name="round_robin" ref="0x7fa72d936430" loc="42:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
          <variable name="on_fetch" ref="0x7fa72d9367a0" loc="43:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x7fa72d93a990" loc="41:../../../../tos/chips/msp430/dma/Msp430DmaControl.nc">
        <interfacedef-ref qname="Msp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <function command="" provided="0" name="getCtl0" ref="0x7fa72d91ad80" loc="63:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72d91f5f0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7fa72d91e090"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7fa72d916020" loc="82:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72d9319f0"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7fa72d92f020"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fa72d918c90" loc="82:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7fa72d914610" loc="106:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7fa72d913800" loc="118:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7fa72d913040" loc="112:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7fa72d914d90" loc="112:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7fa72d9195e0" loc="68:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72d91d710"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7fa72d91b020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7fa72d918410" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72d9319f0"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7fa72d92f020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fa72d919d50" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7fa72d918180" loc="75:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa72d9319f0"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7fa72d92f020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7fa72d9118b0" loc="128:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7fa72d91bad0" loc="51:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72d91f5f0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7fa72d91e090"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7fa72d91b850" loc="51:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72d91f5f0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7fa72d91e090"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7fa72d916af0" loc="89:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fa72d916870" loc="89:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7fa72d9155c0" loc="95:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7fa72d915340" loc="95:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7fa72d915e30" loc="101:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7fa72d911020" loc="123:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7fa72d910070" loc="133:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7fa72d91a560" loc="57:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72d91d710"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7fa72d91b020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7fa72d91a2e0" loc="57:../../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa72d91d710"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7fa72d91b020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaChannel" loc="38:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableDMA" ref="0x7fa72d871e50" loc="61:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearTrigger" ref="0x7fa72d87d5c0" loc="40:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstDecrement" ref="0x7fa72d8767c0" loc="51:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLevelSensitive" ref="0x7fa72d871020" loc="58:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcIncrement" ref="0x7fa72d8788e0" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getState" ref="0x7fa72d867ab0" loc="77:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7fa72dffa750"/>
            <typename><typedef-ref name="dma_channel_state_t" ref="0x7fa72dff75b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordToWord" ref="0x7fa72d8757b0" loc="53:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTrigger" ref="0x7fa72d885e50" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e009480"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7fa72e0051d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="trigger" ref="0x7fa72d885bd0" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa72e009480"/>
              <typename><typedef-ref name="dma_trigger_t" ref="0x7fa72e0051d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestination" ref="0x7fa72d8669b0" loc="79:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedBlockMode" ref="0x7fa72d87ab10" loc="45:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="aborted" ref="0x7fa72d86fe40" loc="68:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setByteToByte" ref="0x7fa72d873020" loc="56:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7fa72d8705e0" loc="63:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterrupt" ref="0x7fa72d870d40" loc="64:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="interruptPending" ref="0x7fa72d86f510" loc="66:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa72f260090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStateRaw" ref="0x7fa72d8672e0" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x7fa72d868270" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="trigger" ref="0x7fa72d8685e0" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="src" ref="0x7fa72d868900" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7fa72d868c30" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72d867020" loc="76:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTrigger" ref="0x7fa72d864990" loc="81:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7fa72e005590"/>
            <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7fa72e004180"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstIncrement" ref="0x7fa72d875070" loc="52:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fa72d8630e0" loc="83:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSingleMode" ref="0x7fa72d87dd00" loc="41:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerDMA" ref="0x7fa72d86e5b0" loc="69:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setByteToWord" ref="0x7fa72d874020" loc="54:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrc" ref="0x7fa72d86c020" loc="71:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="saddr" ref="0x7fa72d86ec80" loc="71:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedSingleMode" ref="0x7fa72d87a390" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcNoIncrement" ref="0x7fa72d879a10" loc="47:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBurstMode" ref="0x7fa72d87cbd0" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSource" ref="0x7fa72d866230" loc="78:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSize" ref="0x7fa72d864190" loc="80:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcDecrement" ref="0x7fa72d878190" loc="48:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="transferDone" ref="0x7fa72d863a90" loc="85:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="success" ref="0x7fa72d863810" loc="85:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableDMA" ref="0x7fa72d871730" loc="60:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatedBurstMode" ref="0x7fa72d8792b0" loc="46:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setBlockMode" ref="0x7fa72d87c4a0" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSize" ref="0x7fa72d86b350" loc="73:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sz" ref="0x7fa72d86b0d0" loc="73:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setState" ref="0x7fa72d86aaf0" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7fa72dffa750"/>
              <typename><typedef-ref name="dma_channel_state_t" ref="0x7fa72dff75b0"/></typename>
            </type-tag>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7fa72e005590"/>
              <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7fa72e004180"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7fa72d86ba90" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_state_s" ref="0x7fa72dffa750"/>
              <typename><typedef-ref name="dma_channel_state_t" ref="0x7fa72dff75b0"/></typename>
            </type-tag>
          </variable>
          <variable name="t" ref="0x7fa72d86be40" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_channel_trigger_s" ref="0x7fa72e005590"/>
              <typename><typedef-ref name="dma_channel_trigger_t" ref="0x7fa72e004180"/></typename>
            </type-tag>
          </variable>
          <variable name="src" ref="0x7fa72d86a1b0" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7fa72d86a4e0" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="size" ref="0x7fa72d86a830" loc="75:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDstNoIncrement" ref="0x7fa72d876070" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdgeSensitive" ref="0x7fa72d873780" loc="57:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordToByte" ref="0x7fa72d874760" loc="55:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDst" ref="0x7fa72d86c970" loc="72:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
        <interfacedef-ref qname="HplMsp430DmaChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="daddr" ref="0x7fa72d86c6f0" loc="72:../../../../tos/chips/msp430/dma/HplMsp430DmaChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaControl" loc="40:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
      <documentation loc="34:../../../../tos/chips/msp430/dma/Msp430Dma.h">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Mark Hays&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearENNMI" ref="0x7fa72d8821f0" loc="47:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoundRobin" ref="0x7fa72d884c20" loc="44:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOnFetch" ref="0x7fa72d8844e0" loc="43:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setENNMI" ref="0x7fa72d883aa0" loc="46:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getState" ref="0x7fa72d880350" loc="49:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7fa72e002020"/>
            <typename><typedef-ref name="dma_state_t" ref="0x7fa72e001230"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7fa72d880a40" loc="50:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOnFetch" ref="0x7fa72d887d90" loc="42:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setState" ref="0x7fa72d882b60" loc="48:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7fa72e002020"/>
              <typename><typedef-ref name="dma_state_t" ref="0x7fa72e001230"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7fa72d8828e0" loc="48:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref name="dma_state_s" ref="0x7fa72e002020"/>
              <typename><typedef-ref name="dma_state_t" ref="0x7fa72e001230"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearRoundRobin" ref="0x7fa72d883390" loc="45:../../../../tos/chips/msp430/dma/HplMsp430DmaControl.nc">
        <interfacedef-ref qname="HplMsp430DmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430DmaInterrupt" loc="38:../../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
      <documentation loc="33:../../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Ben Greenstein &#60;ben@cs.ucla.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fa72d8503b0" loc="39:../../../../tos/chips/msp430/dma/HplMsp430DmaInterrupt.nc">
        <interfacedef-ref qname="HplMsp430DmaInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fa72d703950" loc="68:../../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7fa72d703190" loc="61:../../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7fa72d7049e0" loc="54:../../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7fa72d704120" loc="53:../../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="I2CPacket" loc="102:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
      <parameters>
        <typedef name="addr_size" ref="0x7fa72d6a3e60" loc="102:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
          <interfacedef-ref qname="I2CPacket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="addr_size" scoped="" ref="0x7fa72d6a3e60"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7fa72d6a14c0" loc="120:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
        <documentation loc="103:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
          <short>&#10; Perform an I2C read operation&#10;&#10; </short>
          <long>&#10; Perform an I2C read operation&#10;&#10; @param flags Flags that may be logical ORed and defined by:&#10;    I2C_START   - The START condition is transmitted at the beginning &#10;                   of the packet if set.&#10;    I2C_STOP    - The STOP condition is transmitted at the end of the &#10;                   packet if set.&#10;    I2C_ACK_END - ACK the last byte if set. Otherwise NACK last byte. This&#10;                   flag cannot be used with the I2C_STOP flag.&#10;    I2C_RESTART - restarting an I2C transaction (turn bus around).&#10; @param addr The slave device address. Only used if I2C_START is set.&#10; @param length Length, in bytes, to be read&#10; @param 'uint8_t* COUNT(length) data' A point to a data buffer to read into&#10;&#10; @return SUCCESS if bus available and request accepted. &#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x7fa72d6a59b0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7fa72d6a27a0" loc="120:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x7fa72d6a59b0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7fa72d6a2af0" loc="120:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x7fa72d6a2e40" loc="120:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7fa72d6a1210" loc="120:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7fa72d699020" loc="157:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
        <documentation loc="149:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
          <short>&#10; Notification that the write operation has completed&#10;&#10; </short>
          <long>&#10; Notification that the write operation has completed&#10;&#10; @param addr The slave device address&#10; @param length Length, in bytes, written&#10; @param 'uint8_t* COUNT(length) data' Pointer to the data buffer written&#10; @param success SUCCESS if transfer completed without error.&#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa72d69b260" loc="157:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7fa72d69b5b0" loc="157:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x7fa72d69b900" loc="157:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7fa72d69bc80" loc="157:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7fa72d6a03c0" loc="137:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
        <documentation loc="122:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
          <short>&#10; Perform an I2C write operation&#10;&#10; </short>
          <long>&#10; Perform an I2C write operation&#10;&#10; @param flags Flags that may be logical ORed and defined by:&#10;    I2C_START   - The START condition is transmitted at the beginning &#10;                   of the packet if set.&#10;    I2C_STOP    - The STOP condition is transmitted at the end of the &#10;                   packet if set.&#10;    I2C_RESTART - restarting an I2C transaction (turn bus around).&#10; @param addr The slave device address. Only used if I2C_START is set.&#10; @param length Length, in bytes, to be read&#10; @param 'uint8_t* COUNT(length) data' A point to a data buffer to read into&#10;&#10; @return SUCCESS if bus available and request accepted. &#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x7fa72d6a59b0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7fa72d69f6b0" loc="137:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="i2c_flags_t" ref="0x7fa72d6a59b0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7fa72d69fa00" loc="137:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x7fa72d69fd50" loc="137:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7fa72d6a0110" loc="137:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7fa72d69c2d0" loc="147:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
        <documentation loc="139:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
          <short>&#10; Notification that the read operation has completed&#10;&#10; </short>
          <long>&#10; Notification that the read operation has completed&#10;&#10; @param addr The slave device address&#10; @param length Length, in bytes, read&#10; @param 'uint8_t* COUNT(length) data' Pointer to the received data buffer&#10; @param success SUCCESS if transfer completed without error.&#10;</long>
        </documentation>
        <interfacedef-ref qname="I2CPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa72d69d4b0" loc="147:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa72f257c20"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7fa72d69d800" loc="147:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa72fce6520"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x7fa72d69db50" loc="147:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7fa72d69c020" loc="147:../../../../tos/platforms/shimmer2r/I2CPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa72fce6160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
